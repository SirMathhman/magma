{
"children": [package {
 "namespace": ["magma", "app", "compile"]
 }, import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "api", "result", "Ok"]
 }, import {
 "namespace": ["magma", "api", "result", "Result"]
 }, import {
 "namespace": ["magma", "app", "compile", "lang", "JavaLang"]
 }, import {
 "namespace": ["magma", "app", "compile", "lang", "MagmaLang"]
 }, import {
 "namespace": ["magma", "app", "compile", "rule", "RuleResult"]
 }, import {
 "namespace": ["java", "util", "ArrayList"]
 }, import {
 "namespace": ["java", "util", "List"]
 }, import {
 "namespace": ["java", "util", "Optional"]
 }, import {
 "namespace": ["static magma", "app", "compile", "lang", "CommonLang", "CHILDREN"]
 }, import {
 "namespace": ["static magma", "app", "compile", "lang", "JavaLang", "*"]
 }, import {
 "namespace": ["static magma", "app", "compile", "lang", "MagmaLang", "FUNCTION"]
 }, record {
 "name": "Compiler",
 "modifiers": ["public"],
 "children": [method {
  "name": "pass",
  "modifiers": ["private", "static"],
  "params": content {
   "params": "Node node"
   },
  "returns": symbol {
   "type": "Node"
   },
  "children": [return {
   "value": any {
    "content": "node.mapNodeList(CHILDREN, Compiler::passChildren).orElse(node)"
    }
   }]
  }, method {
  "name": "passChildren",
  "modifiers": ["private", "static"],
  "params": content {
   "params": "List<Node> children"
   },
  "returns": generic {
   "base": symbol {
    "type": "List"
    },
   "children": [symbol {
    "type": "Node"
    }]
   },
  "children": [return {
   "value": any {
    "content": "children.stream()
                .filter(child -> !child.is(JavaLang.PACKAGE))
                .map(Compiler::passRootChild)
                .toList()"
    }
   }]
  }, method {
  "name": "passRootChild",
  "modifiers": ["private", "static"],
  "params": content {
   "params": "Node node"
   },
  "returns": symbol {
   "type": "Node"
   },
  "children": [return {
   "value": any {
    "content": "passRecord(node)
                .or(() -> passInterface(node))
                .or(() -> passClass(node))
                .orElse(node)"
    }
   }]
  }, method {
  "name": "passClass",
  "modifiers": ["private", "static", "Optional<?", "extends"],
  "params": content {
   "params": "Node node"
   },
  "returns": symbol {
   "type": "Node>"
   },
  "children": [any {
   "content": "if (node.is(CLASS)) {
            return Optional.of(node.retype(FUNCTION));
        }"
   }, any {
   "content": "else {
            return Optional.empty();
        }"
   }]
  }, method {
  "name": "passRecord",
  "modifiers": ["private", "static"],
  "params": content {
   "params": "Node node"
   },
  "returns": generic {
   "base": symbol {
    "type": "Optional"
    },
   "children": [symbol {
    "type": "Node"
    }]
   },
  "children": [return {
   "value": any {
    "content": "node.is(RECORD) ? Optional.of(node.retype(FUNCTION)) : Optional.empty()"
    }
   }]
  }, method {
  "name": "passInterface",
  "modifiers": ["private", "static"],
  "params": content {
   "params": "Node node"
   },
  "returns": generic {
   "base": symbol {
    "type": "Optional"
    },
   "children": [symbol {
    "type": "Node"
    }]
   },
  "children": [any {
   "content": "if (!node.is(INTERFACE)) return Optional.empty();"
   }, any {
   "content": "final var retype = node.retype(MagmaLang.TRAIT);"
   }, any {
   "content": "final var withModifiers = retype.mapStringList(MODIFIERS, modifiers -> {
            var newList = new ArrayList<String>();
            if (modifiers.contains("public")) newList.add("export");
            return newList;
        }"
   }, any {
   "content": ").orElse(retype);"
   }, any {
   "content": "final var withChildren = withModifiers.mapNodeList(CHILDREN, children -> children.stream()
                .map(Compiler::passClassMember)
                .toList()).orElse(withModifiers);"
   }, return {
   "value": any {
    "content": "Optional.of(withChildren)"
    }
   }]
  }, method {
  "name": "passClassMember",
  "modifiers": ["private", "static"],
  "params": content {
   "params": "Node child"
   },
  "returns": symbol {
   "type": "Node"
   },
  "children": [any {
   "content": "if (child.is(METHOD)) return child.retype(FUNCTION);"
   }, return {
   "value": any {
    "content": "child"
    }
   }]
  }, method {
  "name": "compile",
  "modifiers": ["public", "Result<CompileResult,"],
  "returns": symbol {
   "type": "CompileException>"
   },
  "children": [any {
   "content": "final var parsed = createRootRule().parse(input);"
   }, any {
   "content": "return write(parsed).flatMapValue(beforePass -> {
            final var afterPass = pass(beforePass);
            final var generated = MagmaLang.createRootRule().generate(afterPass);
            return write(generated).mapValue(output -> new CompileResult(beforePass, afterPass, output));
        }"
   }, any {
   "content": ");"
   }]
  }, method {
  "name": "write",
  "modifiers": ["private", "<T,", "E", "extends", "Exception>", "Result<T,"],
  "params": content {
   "params": "RuleResult<T, E> result"
   },
  "returns": symbol {
   "type": "CompileException>"
   },
  "children": [any {
   "content": "if (result.isValid()) {
            return new Ok<>(result.result().findValue().orElseThrow());
        }"
   }, any {
   "content": "else {
            writeResult(result, 0, 0);
            return new Err<>(new CompileException());
        }"
   }]
  }, method {
  "name": "writeResult",
  "modifiers": ["private", "<T,", "E", "extends", "Exception>"],
  "params": content {
   "params": "RuleResult<T, E> result, int depth, int index"
   },
  "returns": symbol {
   "type": "void"
   },
  "children": [any {
   "content": "final var error = result.result().findError();"
   }, any {
   "content": "if (error.isPresent()) {
            final var repeat = " ".repeat(depth);
            final var s = (index + 1) + ") ";
            final var rawMessage = error.get().getMessage();
            final var message = rawMessage.replaceAll("\r\n", "\r\n" + repeat + " ".repeat(s.length()));
            System.out.println(repeat + s + message);
        }"
   }, any {
   "content": "List<RuleResult<T, E>> children = result.sortedChildren();"
   }, any {
   "content": "for (int i = 0;"
   }, any {
   "content": "i < children.size();"
   }, any {
   "content": "i++) {
            RuleResult<T, E> child = children.get(i);
            writeResult(child, depth + 1, i);
        }"
   }]
  }],
 "params": [definition {
  "type": "String",
  "name": "input"
  }]
 }]
}