{
"children": [package {
 "namespace": ["magma", "app", "compile"]
 }, import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "api", "result", "Ok"]
 }, import {
 "namespace": ["magma", "api", "result", "Result"]
 }, import {
 "namespace": ["magma", "app", "compile", "lang", "JavaLang"]
 }, import {
 "namespace": ["magma", "app", "compile", "lang", "MagmaLang"]
 }, import {
 "namespace": ["magma", "app", "compile", "rule", "RuleResult"]
 }, import {
 "namespace": ["java", "util", "ArrayList"]
 }, import {
 "namespace": ["java", "util", "List"]
 }, import {
 "namespace": ["java", "util", "Optional"]
 }, import {
 "namespace": ["static magma", "app", "compile", "lang", "CommonLang", "CHILDREN"]
 }, import {
 "namespace": ["static magma", "app", "compile", "lang", "JavaLang", "*"]
 }, import {
 "namespace": ["static magma", "app", "compile", "lang", "MagmaLang", "FUNCTION"]
 }, record {
 "name": "Compiler",
 "modifiers": [modifier {
  "content": "public"
  }],
 "params": [definition {
  "name": "input",
  "before-name": "String"
  }],
 "children": [method {
  "name": "pass",
  "before-name": "private static Node",
  "children": [return {
   "value": invocation {
    "caller": access {
     "name": "mapNodeList",
     "parent": symbol {
      "content": "node"
      }
     },
    "arguments": [symbol {
     "content": "CHILDREN"
     }, access {
     "name": "orElse(node",
     "parent": symbol {
      "content": " Compiler::passChildren)"
      }
     }]
    }
   }],
  "params": [definition {
   "name": "node",
   "before-name": "Node"
   }]
  }, method {
  "name": "passChildren",
  "before-name": "private static List<Node>",
  "children": [return {
   "value": invocation {
    "caller": access {
     "name": "stream",
     "parent": symbol {
      "content": "children"
      }
     },
    "arguments": [access {
     "name": "toList(",
     "parent": access {
      "name": "map(Compiler::passRootChild)
                ",
      "parent": access {
       "name": "PACKAGE))
                ",
       "parent": access {
        "name": "is(JavaLang",
        "parent": access {
         "name": "filter(child -> !child",
         "parent": symbol {
          "content": ")
                "
          }
         }
        }
       }
      }
     }]
    }
   }],
  "params": [definition {
   "name": "children",
   "before-name": "List<Node>"
   }]
  }, method {
  "name": "passRootChild",
  "before-name": "private static Node",
  "children": [return {
   "value": invocation {
    "caller": symbol {
     "content": "passRecord"
     },
    "arguments": [access {
     "name": "orElse(node",
     "parent": access {
      "name": "or(() -> passClass(node))
                ",
      "parent": access {
       "name": "or(() -> passInterface(node))
                ",
       "parent": symbol {
        "content": "node)
                "
        }
       }
      }
     }]
    }
   }],
  "params": [definition {
   "name": "node",
   "before-name": "Node"
   }]
  }, method {
  "name": "passClass",
  "before-name": "private static Optional<Node>",
  "children": [symbol {
   "content": "if (node.is(CLASS)) {
            return Optional.of(node.retype(FUNCTION));
        }"
   }, symbol {
   "content": "else {
            return Optional.empty();
        }"
   }],
  "params": [definition {
   "name": "node",
   "before-name": "Node"
   }]
  }, method {
  "name": "passRecord",
  "before-name": "private static Optional<Node>",
  "children": [return {
   "value": invocation {
    "caller": access {
     "name": "is",
     "parent": symbol {
      "content": "node"
      }
     },
    "arguments": [access {
     "name": "empty(",
     "parent": access {
      "name": "retype(FUNCTION)) : Optional",
      "parent": access {
       "name": "of(node",
       "parent": symbol {
        "content": "RECORD) ? Optional"
        }
       }
      }
     }]
    }
   }],
  "params": [definition {
   "name": "node",
   "before-name": "Node"
   }]
  }, method {
  "name": "passInterface",
  "before-name": "private static Optional<Node>",
  "children": [symbol {
   "content": "if (!node.is(INTERFACE)) return Optional.empty();"
   }, symbol {
   "content": "final var retype = node.retype(MagmaLang.TRAIT);"
   }, symbol {
   "content": "final var withModifiers = retype.mapStringList(MODIFIERS, modifiers -> {
            var newList = new ArrayList<String>();
            if (modifiers.contains("public")) newList.add("export");
            return newList;
        }"
   }, symbol {
   "content": ").orElse(retype);"
   }, symbol {
   "content": "final var withChildren = withModifiers.mapNodeList(CHILDREN, children -> children.stream()
                .map(Compiler::passClassMember)
                .toList()).orElse(withModifiers);"
   }, return {
   "value": invocation {
    "caller": access {
     "name": "of",
     "parent": symbol {
      "content": "Optional"
      }
     },
    "arguments": [symbol {
     "content": "withChildren"
     }]
    }
   }],
  "params": [definition {
   "name": "node",
   "before-name": "Node"
   }]
  }, method {
  "name": "passClassMember",
  "before-name": "private static Node",
  "children": [symbol {
   "content": "if (child.is(METHOD)) return child.retype(FUNCTION);"
   }, return {
   "value": symbol {
    "content": "child"
    }
   }],
  "params": [definition {
   "name": "child",
   "before-name": "Node"
   }]
  }, method {
  "name": "compile",
  "before-name": "public Result<CompileResult, CompileException>",
  "children": [symbol {
   "content": "final var parsed = createRootRule().parse(input);"
   }, symbol {
   "content": "return write(parsed).flatMapValue(beforePass -> {
            final var afterPass = pass(beforePass);
            final var generated = MagmaLang.createRootRule().generate(afterPass);
            return write(generated).mapValue(output -> new CompileResult(beforePass, afterPass, output));
        }"
   }, symbol {
   "content": ");"
   }],
  "params": []
  }, method {
  "name": "write",
  "before-name": "private <T, E extends Exception> Result<T, CompileException>",
  "children": [symbol {
   "content": "if (result.isValid()) {
            return new Ok<>(result.result().findValue().orElseThrow());
        }"
   }, symbol {
   "content": "else {
            writeResult(result, 0, 0);
            return new Err<>(new CompileException());
        }"
   }],
  "params": [definition {
   "name": "result",
   "before-name": "RuleResult<T, E>"
   }]
  }, method {
  "name": "writeResult",
  "before-name": "private <T, E extends Exception> void",
  "children": [symbol {
   "content": "final var error = result.result().findError();"
   }, symbol {
   "content": "if (error.isPresent()) {
            final var repeat = " ".repeat(depth);
            final var s = (index + 1) + ") ";
            final var rawMessage = error.get().getMessage();
            final var message = rawMessage.replaceAll("\r\n", "\r\n" + repeat + " ".repeat(s.length()));
            System.out.println(repeat + s + message);
        }"
   }, symbol {
   "content": "List<RuleResult<T, E>> children = result.sortedChildren();"
   }, symbol {
   "content": "for (int i = 0;"
   }, symbol {
   "content": "i < children.size();"
   }, symbol {
   "content": "i++) {
            RuleResult<T, E> child = children.get(i);
            writeResult(child, depth + 1, i);
        }"
   }],
  "params": [definition {
   "name": "result",
   "before-name": "RuleResult<T, E>"
   }, definition {
   "name": "depth",
   "before-name": " int"
   }, definition {
   "name": "index",
   "before-name": " int"
   }]
  }]
 }]
}