{
"children": [import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "api"
  }, segment {
  "segment": "result"
  }, segment {
  "segment": "Err"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "api"
  }, segment {
  "segment": "result"
  }, segment {
  "segment": "Ok"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "api"
  }, segment {
  "segment": "result"
  }, segment {
  "segment": "Result"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "lang"
  }, segment {
  "segment": "MagmaLang"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "rule"
  }, segment {
  "segment": "Rule"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "rule"
  }, segment {
  "segment": "RuleResult"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "List"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "lang"
  }, segment {
  "segment": "JavaLang"
  }, segment {
  "segment": "*"
  }]
 }, function {
 "name": "Compiler",
 "modifiers": [modifier {
  "modifier-value": "public"
  }, modifier {
  "modifier-value": "class"
  }],
 "params": [definition {
  "name": "input",
  "returns": symbol {
   "namespace": [segment {
    "segment": "String"
    }]
   }
  }],
 "children": [method {
  "name": "compile",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Result"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "CompileResult"
     }]
    }, symbol {
    "namespace": [segment {
     "segment": "CompileException"
     }]
    }]
   },
  "children": [declaration {
   "name": "rule",
   "caller": symbol {
    "content": "createRootRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "Rule"
     }]
    }
   }, declaration {
   "name": "parsed",
   "caller": property-access {
    "child": "parse",
    "parent": symbol {
     "content": "rule"
     }
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [symbol {
    "content": "input"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, return {
   "value": invocation {
    "caller": property-access {
     "child": "flatMapValue",
     "parent": invocation {
      "caller": symbol {
       "content": "write"
       },
      "arguments": [symbol {
       "content": "parsed"
       }]
      }
     },
    "arguments": [subtraction {
     "left": symbol {
      "content": "beforePass"
      },
     "right": lambda {
      "before-arrow": "> {
            final var afterPass = Passer.pass(beforePass);
            final var generated = MagmaLang.createRootRule().generate(afterPass);
            return write(generated).mapValue(output ",
      "after-arrow": " new CompileResult(beforePass, afterPass, output));
        }"
      }
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }]
  }, method {
  "name": "write",
  "type-params": "T, E extends Exception",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Result"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "T"
     }]
    }, symbol {
    "namespace": [segment {
     "segment": "CompileException"
     }]
    }]
   },
  "children": [if {
   "content": " (result.isValid()) {
            return new Ok<>(result.result().findValue().orElseThrow());
        }"
   }, else {
   "children": [invocation {
    "caller": symbol {
     "content": "writeResult"
     },
    "arguments": [symbol {
     "content": "result"
     }, number {
     "value": "0"
     }, number {
     "value": "0"
     }]
    }, return {
    "value": construction {
     "caller": symbol {
      "content": "Err"
      },
     "arguments": [construction {
      "caller": symbol {
       "content": "CompileException"
       }
      }]
     }
    }, whitespace {
    }]
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }],
  "params": [definition {
   "name": "result",
   "returns": generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "RuleResult"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "T"
      }]
     }, symbol {
     "namespace": [segment {
      "segment": "E"
      }]
     }]
    }
   }]
  }, method {
  "name": "writeResult",
  "type-params": "T, E extends Exception",
  "returns": symbol {
   "namespace": [segment {
    "segment": "void"
    }]
   },
  "children": [declaration {
   "name": "error",
   "caller": property-access {
    "child": "findError",
    "parent": invocation {
     "caller": property-access {
      "child": "result",
      "parent": symbol {
       "content": "result"
       }
      }
     }
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, if {
   "content": " (error.isPresent()) {
            final var repeat = "| ".repeat(depth);
            final var s = (index + 1) + ") ";
            final var rawMessage = error.get().getMessage();
            final var message = rawMessage.replaceAll("\r\n", "\r\n" + repeat + " ".repeat(s.length()));
            System.out.println(repeat + s + message);
        }"
   }, declaration {
   "name": "children",
   "caller": property-access {
    "child": "sortedChildren",
    "parent": symbol {
     "content": "result"
     }
    },
   "returns": generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "List"
      }]
     },
    "children": [generic {
     "base": symbol {
      "namespace": [segment {
       "segment": "RuleResult"
       }]
      },
     "children": [symbol {
      "namespace": [segment {
       "segment": "T"
       }]
      }, symbol {
      "namespace": [segment {
       "segment": "E"
       }]
      }]
     }]
    }
   }, declaration {
   "name": "i",
   "value": "0",
   "returns": symbol {
    "namespace": [segment {
     "segment": "int"
     }]
    }
   }, while {
   "content": " (i < children.size()) {
            RuleResult<T, E> child = children.get(i);
            writeResult(child, depth + 1, i);
            i++;
        }"
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }],
  "params": [definition {
   "name": "result",
   "returns": generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "RuleResult"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "T"
      }]
     }, symbol {
     "namespace": [segment {
      "segment": "E"
      }]
     }]
    }
   }, definition {
   "name": "depth",
   "returns": symbol {
    "namespace": [segment {
     "segment": "int"
     }]
    }
   }, definition {
   "name": "index",
   "returns": symbol {
    "namespace": [segment {
     "segment": "int"
     }]
    }
   }]
  }, implements {
  }]
 }]
}