{
"children": [package {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }]
 }, import {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "lang"
  }, segment {
  "segment": "JavaLang"
  }]
 }, import {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "pass"
  }, segment {
  "segment": "ClassPasser"
  }]
 }, import {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "pass"
  }, segment {
  "segment": "ImportPasser"
  }]
 }, import {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "pass"
  }, segment {
  "segment": "InterfacePasser"
  }]
 }, import {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "pass"
  }, segment {
  "segment": "RecordPasser"
  }]
 }, import {
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "ArrayList"
  }]
 }, import {
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "List"
  }]
 }, import {
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "Optional"
  }]
 }, import {
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "stream"
  }, segment {
  "segment": "Collectors"
  }]
 }, import-static {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "lang"
  }, segment {
  "segment": "CommonLang"
  }, segment {
  "segment": "*"
  }]
 }, import-static {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "lang"
  }, segment {
  "segment": "JavaLang"
  }, segment {
  "segment": "*"
  }]
 }, class {
 "name": "Passer ",
 "children": [method {
  "name": "pass",
  "returns": symbol {
   "namespace": [segment {
    "segment": "Node"
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "orElse",
     "parent": invocation {
      "caller": property-access {
       "child": "mapNodeList",
       "parent": symbol {
        "content": "node"
        }
       },
      "arguments": [symbol {
       "content": "CHILDREN"
       }, method-access {
       "child": "passChildren",
       "parent": symbol {
        "content": "Passer"
        }
       }]
      }
     },
    "arguments": [symbol {
     "content": "node"
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "static"
   }],
  "params": [definition {
   "name": "node",
   "returns": symbol {
    "namespace": [segment {
     "segment": "Node"
     }]
    }
   }]
  }, method {
  "name": "passChildren",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "List"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "Node"
     }]
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "toList",
     "parent": invocation {
      "caller": property-access {
       "child": "map",
       "parent": invocation {
        "caller": property-access {
         "child": "filter",
         "parent": invocation {
          "caller": property-access {
           "child": "stream",
           "parent": symbol {
            "content": "children"
            }
           }
          }
         },
        "arguments": [invocation {
         "caller": property-access {
          "child": "is",
          "parent": lambda {
           "before-arrow": "child ",
           "after-arrow": " !child"
           }
          },
         "arguments": [property-access {
          "child": "PACKAGE",
          "parent": symbol {
           "content": "JavaLang"
           }
          }]
         }]
        }
       },
      "arguments": [method-access {
       "child": "passRootChild",
       "parent": symbol {
        "content": "Passer"
        }
       }]
      }
     }
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }],
  "params": [definition {
   "name": "children",
   "returns": generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "List"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "Node"
      }]
     }]
    }
   }]
  }, method {
  "name": "passRootChild",
  "returns": symbol {
   "namespace": [segment {
    "segment": "Node"
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "orElse",
     "parent": invocation {
      "caller": property-access {
       "child": "or",
       "parent": invocation {
        "caller": property-access {
         "child": "or",
         "parent": invocation {
          "caller": property-access {
           "child": "or",
           "parent": invocation {
            "caller": property-access {
             "child": "passRecord",
             "parent": symbol {
              "content": "RecordPasser"
              }
             },
            "arguments": [symbol {
             "content": "node"
             }]
            }
           },
          "arguments": [quantity {
           "value": lambda {
            "before-arrow": ") ",
            "after-arrow": " InterfacePasser.passInterface(node"
            }
           }]
          }
         },
        "arguments": [quantity {
         "value": lambda {
          "before-arrow": ") ",
          "after-arrow": " ClassPasser.pass(node"
          }
         }]
        }
       },
      "arguments": [quantity {
       "value": lambda {
        "before-arrow": ") ",
        "after-arrow": " ImportPasser.pass(node"
        }
       }]
      }
     },
    "arguments": [symbol {
     "content": "node"
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }],
  "params": [definition {
   "name": "node",
   "returns": symbol {
    "namespace": [segment {
     "segment": "Node"
     }]
    }
   }]
  }, method {
  "name": "passRootMemberModifiers",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Optional"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "Node"
     }]
    }]
   },
  "children": [if {
   "content": " (node.is(CLASS_TYPE) || node.is(INTERFACE_TYPE) || node.is(RECORD_TYPE)) return Optional.empty();"
   }, return {
   "value": invocation {
    "caller": property-access {
     "child": "mapNodeList",
     "parent": symbol {
      "content": "node"
      }
     },
    "arguments": [symbol {
     "content": "MODIFIERS"
     }, subtraction {
     "left": symbol {
      "content": "modifiers"
      },
     "right": lambda {
      "before-arrow": "> {
            final var inputModifiers = modifiers.stream()
                    .map(modifier ",
      "after-arrow": " modifier.findString(MODIFIER_VALUE))
                    .flatMap(Optional::stream)
                    .collect(Collectors.toSet());

            var newList = new ArrayList<String>();
            if (inputModifiers.contains("public")) newList.add("export");

            return newList.stream()
                    .map(modifier -> new MapNode().retype(MODIFIER_TYPE).withString(MODIFIER_VALUE, modifier))
                    .toList();
        }"
      }
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }, modifier {
   "modifier-value": "static"
   }],
  "params": [definition {
   "name": "node",
   "returns": symbol {
    "namespace": [segment {
     "segment": "Node"
     }]
    }
   }]
  }, whitespace {
  }],
 "modifiers": [modifier {
  "modifier-value": "public"
  }]
 }, whitespace {
 }]
}