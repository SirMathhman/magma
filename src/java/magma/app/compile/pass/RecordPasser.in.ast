{
"children": [package {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "pass"
  }]
 }, import {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "MapNode"
  }]
 }, import {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "Node"
  }]
 }, import {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "lang"
  }, segment {
  "segment": "CommonLang"
  }]
 }, import {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "lang"
  }, segment {
  "segment": "JavaLang"
  }]
 }, import {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "lang"
  }, segment {
  "segment": "MagmaLang"
  }]
 }, import {
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "ArrayList"
  }]
 }, import {
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "Collections"
  }]
 }, import {
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "List"
  }]
 }, import {
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "Optional"
  }]
 }, import-static {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "lang"
  }, segment {
  "segment": "CommonLang"
  }, segment {
  "segment": "*"
  }]
 }, class {
 "name": "RecordPasser ",
 "children": [method {
  "name": "passRecord",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Optional"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "Node"
     }]
    }]
   },
  "children": [if {
   "content": " (!node.is(JavaLang.RECORD_TYPE)) return Optional.empty();"
   }, declaration {
   "name": "retyped",
   "caller": property-access {
    "child": "retype",
    "parent": symbol {
     "content": "node"
     }
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [property-access {
    "child": "FUNCTION",
    "parent": symbol {
     "content": "MagmaLang"
     }
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, invocation {
   "caller": property-access {
    "child": "orElseGet",
    "parent": lambda {
     "before-arrow": "final var withModifiers = retyped.mapNodeList(MODIFIERS, modifiers ",
     "after-arrow": " {
            final var copy = new ArrayList<Node>();
            if (hasPublicKeyword(modifiers)) {
                copy.add(createClassModifier("export"));
            }

            copy.add(createClassModifier("class"));
            return copy;
        })"
     }
    },
   "arguments": [quantity {
    "value": invocation {
     "caller": property-access {
      "child": "singletonList",
      "parent": lambda {
       "before-arrow": ") ",
       "after-arrow": " retyped.withNodeList(MODIFIERS, Collections"
       }
      },
     "arguments": [invocation {
      "caller": symbol {
       "content": "createClassModifier"
       },
      "arguments": [string {
       "value": "class"
       }]
      }]
     }
    }]
   }, invocation {
   "caller": property-access {
    "child": "orElse",
    "parent": lambda {
     "before-arrow": "final var withImplements = withModifiers.mapNodeList(CommonLang.CHILDREN, children ",
     "after-arrow": " {
            var copy = new ArrayList<>(children);
            copy.add(new MapNode().retype("implements"));
            return copy;
        })"
     }
    },
   "arguments": [symbol {
    "content": "withModifiers"
    }]
   }, return {
   "value": invocation {
    "caller": property-access {
     "child": "of",
     "parent": symbol {
      "content": "Optional"
      }
     },
    "arguments": [symbol {
     "content": "withImplements"
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }, modifier {
   "modifier-value": "static"
   }],
  "params": [definition {
   "name": "node",
   "returns": symbol {
    "namespace": [segment {
     "segment": "Node"
     }]
    }
   }]
  }, method {
  "name": "hasPublicKeyword",
  "returns": symbol {
   "namespace": [segment {
    "segment": "boolean"
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "anyMatch",
     "parent": invocation {
      "caller": property-access {
       "child": "flatMap",
       "parent": invocation {
        "caller": property-access {
         "child": "map",
         "parent": invocation {
          "caller": property-access {
           "child": "stream",
           "parent": symbol {
            "content": "modifiers"
            }
           }
          }
         },
        "arguments": [invocation {
         "caller": property-access {
          "child": "findString",
          "parent": lambda {
           "before-arrow": "modifier ",
           "after-arrow": " modifier"
           }
          },
         "arguments": [symbol {
          "content": "MODIFIER_VALUE"
          }]
         }]
        }
       },
      "arguments": [method-access {
       "child": "stream",
       "parent": symbol {
        "content": "Optional"
        }
       }]
      }
     },
    "arguments": [method-access {
     "child": "equals",
     "parent": string {
      "value": "public"
      }
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }],
  "params": [definition {
   "name": "modifiers",
   "returns": generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "List"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "Node"
      }]
     }]
    }
   }]
  }, method {
  "name": "createClassModifier",
  "returns": symbol {
   "namespace": [segment {
    "segment": "Node"
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "withString",
     "parent": invocation {
      "caller": property-access {
       "child": "retype",
       "parent": construction {
        "caller": symbol {
         "content": "MapNode"
         }
        }
       },
      "arguments": [symbol {
       "content": "MODIFIER_TYPE"
       }]
      }
     },
    "arguments": [symbol {
     "content": "MODIFIER_VALUE"
     }, symbol {
     "content": "modifier"
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }],
  "params": [definition {
   "name": "modifier",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, whitespace {
  }],
 "modifiers": [modifier {
  "modifier-value": "public"
  }]
 }]
}