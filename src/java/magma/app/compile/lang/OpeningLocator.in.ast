{
"children": [package {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "lang"
  }]
 }, import {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "api"
  }, segment {
  "segment": "Tuple"
  }]
 }, import {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "rule"
  }, segment {
  "segment": "Locator"
  }]
 }, import {
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "Optional"
  }]
 }, import {
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "stream"
  }, segment {
  "segment": "Stream"
  }]
 }, class {
 "name": "OpeningLocator implements Locator ",
 "children": [method {
  "name": "locate",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Stream"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "Integer"
     }]
    }]
   },
  "children": [declaration {
   "name": "depth",
   "value": "0",
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    }
   }, declaration {
   "name": "i",
   "left": invocation {
    "caller": property-access {
     "child": "length",
     "parent": symbol {
      "content": "input"
      }
     }
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "int"
     }]
    },
   "right": number {
    "value": "1"
    }
   }, while {
   "content": " (i >= 0) {
            var c = input.charAt(i);

            final var tuple = locateAtIndex(depth, i, c);
            depth = tuple.left();

            final var right = tuple.right();
            if (right.isPresent()) {
                return right.get();
            }

            i--;
        }"
   }, return {
   "value": invocation {
    "caller": property-access {
     "child": "empty",
     "parent": symbol {
      "content": "Stream"
      }
     }
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "input",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "locateAtIndex",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Tuple"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "Integer"
     }]
    }, generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "Optional"
      }]
     },
    "children": [generic {
     "base": symbol {
      "namespace": [segment {
       "segment": "Stream"
       }]
      },
     "children": [symbol {
      "namespace": [segment {
       "segment": "Integer"
       }]
      }]
     }]
    }]
   },
  "children": [if {
   "content": " (c == '(' && depth == 1) {
            return new Tuple<>(depth, Optional.of(Stream.of(index)));
        }"
   }, else {
   "children": [if {
    "content": " (c == ')') return new Tuple<>(depth + 1, Optional.empty());"
    }, if {
    "content": " (c == '(') return new Tuple<>(depth - 1, Optional.empty());"
    }, return {
    "value": construction {
     "caller": symbol {
      "content": "Tuple"
      },
     "arguments": [symbol {
      "content": "depth"
      }, invocation {
      "caller": property-access {
       "child": "empty",
       "parent": symbol {
        "content": "Optional"
        }
       }
      }]
     }
    }, whitespace {
    }]
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }],
  "params": [definition {
   "name": "depth",
   "returns": symbol {
    "namespace": [segment {
     "segment": "int"
     }]
    }
   }, definition {
   "name": "index",
   "returns": symbol {
    "namespace": [segment {
     "segment": "int"
     }]
    }
   }, definition {
   "name": "c",
   "returns": symbol {
    "namespace": [segment {
     "segment": "char"
     }]
    }
   }]
  }, method {
  "name": "slice",
  "returns": symbol {
   "namespace": [segment {
    "segment": "String"
    }]
   },
  "children": [return {
   "value": string {
    "value": "("
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }]
  }, whitespace {
  }],
 "modifiers": [modifier {
  }]
 }, whitespace {
 }]
}