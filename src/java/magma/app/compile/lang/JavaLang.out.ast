{
"children": [import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "rule"
  }, segment {
  "segment": "*"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "List"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "lang"
  }, segment {
  "segment": "CommonLang"
  }, segment {
  "segment": "*"
  }]
 }, function {
 "name": "JavaLang ",
 "children": [declaration {
  "name": "PACKAGE",
  "value": "package",
  "returns": symbol {
   "namespace": [segment {
    "segment": "String"
    }]
   },
  "modifiers": [modifier {
   "modifier-value": "public"
   }, modifier {
   "modifier-value": "static"
   }, modifier {
   "modifier-value": "final"
   }]
  }, declaration {
  "name": "RECORD_TYPE",
  "value": "record",
  "returns": symbol {
   "namespace": [segment {
    "segment": "String"
    }]
   },
  "modifiers": [modifier {
   "modifier-value": "public"
   }, modifier {
   "modifier-value": "static"
   }, modifier {
   "modifier-value": "final"
   }]
  }, declaration {
  "name": "CLASS_TYPE",
  "value": "class",
  "returns": symbol {
   "namespace": [segment {
    "segment": "String"
    }]
   },
  "modifiers": [modifier {
   "modifier-value": "public"
   }, modifier {
   "modifier-value": "static"
   }, modifier {
   "modifier-value": "final"
   }]
  }, declaration {
  "name": "INTERFACE_TYPE",
  "value": "interface",
  "returns": symbol {
   "namespace": [segment {
    "segment": "String"
    }]
   },
  "modifiers": [modifier {
   "modifier-value": "public"
   }, modifier {
   "modifier-value": "static"
   }, modifier {
   "modifier-value": "final"
   }]
  }, declaration {
  "name": "MODIFIERS",
  "value": "modifiers",
  "returns": symbol {
   "namespace": [segment {
    "segment": "String"
    }]
   },
  "modifiers": [modifier {
   "modifier-value": "public"
   }, modifier {
   "modifier-value": "static"
   }, modifier {
   "modifier-value": "final"
   }]
  }, declaration {
  "name": "METHOD",
  "value": "method",
  "returns": symbol {
   "namespace": [segment {
    "segment": "String"
    }]
   },
  "modifiers": [modifier {
   "modifier-value": "public"
   }, modifier {
   "modifier-value": "static"
   }, modifier {
   "modifier-value": "final"
   }]
  }, declaration {
  "name": "MODIFIERS_LIST",
  "caller": property-access {
   "child": "of",
   "parent": symbol {
    "content": "List"
    }
   },
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "List"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }]
   },
  "arguments": [string {
   "value": "public"
   }, string {
   "value": "private"
   }, string {
   "value": "static"
   }, string {
   "value": "final"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }, modifier {
   "modifier-value": "static"
   }, modifier {
   "modifier-value": "final"
   }]
  }, declaration {
  "name": "IMPORT_STATIC_TYPE",
  "value": "import-static",
  "returns": symbol {
   "namespace": [segment {
    "segment": "String"
    }]
   },
  "modifiers": [modifier {
   "modifier-value": "public"
   }, modifier {
   "modifier-value": "static"
   }, modifier {
   "modifier-value": "final"
   }]
  }, method {
  "name": "createPackageRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "TypeRule"
    }]
   },
  "children": [return {
   "value": construction {
    "caller": symbol {
     "content": "TypeRule"
     },
    "arguments": [symbol {
     "content": "PACKAGE"
     }, construction {
     "caller": symbol {
      "content": "PrefixRule"
      },
     "arguments": [string {
      "value": "package "
      }, construction {
      "caller": symbol {
       "content": "SuffixRule"
       },
      "arguments": [invocation {
       "caller": symbol {
        "content": "createNamespaceRule"
        }
       }, symbol {
       "content": "STATEMENT_END"
       }]
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }, modifier {
   "modifier-value": "static"
   }]
  }, method {
  "name": "createRootRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "NodeListRule"
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": symbol {
     "content": "createChildrenRule"
     },
    "arguments": [invocation {
     "caller": symbol {
      "content": "createRootMemberRule"
      }
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }, modifier {
   "modifier-value": "static"
   }]
  }, method {
  "name": "createRecordRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "TypeRule"
    }]
   },
  "children": [declaration {
   "name": "simpleName",
   "caller": symbol {
    "content": "ExtractRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [symbol {
    "content": "NAME"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "typeParams",
   "caller": symbol {
    "content": "NodeListRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [construction {
    "caller": symbol {
     "content": "ValueSplitter"
     }
    }, string {
    "value": "type-params"
    }, invocation {
    "caller": symbol {
     "content": "createTypeRule"
     }
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "name",
   "caller": symbol {
    "content": "OptionalNodeRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [string {
    "value": "type-params"
    }, symbol {
    "content": "simpleName"
    }, construction {
    "caller": symbol {
     "content": "LocatingRule"
     },
    "arguments": [symbol {
     "content": "simpleName"
     }, construction {
     "caller": symbol {
      "content": "FirstLocator"
      },
     "arguments": [string {
      "value": "<"
      }]
     }, construction {
     "caller": symbol {
      "content": "SuffixRule"
      },
     "arguments": [symbol {
      "content": "typeParams"
      }, string {
      "value": ">"
      }]
     }]
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "params",
   "caller": symbol {
    "content": "NodeListRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [construction {
    "caller": symbol {
     "content": "ValueSplitter"
     }
    }, string {
    "value": "params"
    }, invocation {
    "caller": symbol {
     "content": "createDefinitionRule"
     }
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "withChildren",
   "caller": symbol {
    "content": "createChildrenRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [invocation {
    "caller": symbol {
     "content": "createClassMemberRule"
     }
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "maybeChildren",
   "caller": symbol {
    "content": "StripRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [construction {
    "caller": symbol {
     "content": "OptionalNodeRule"
     },
    "arguments": [string {
     "value": "children"
     }, construction {
     "caller": symbol {
      "content": "EmptyRule"
      }
     }, symbol {
     "content": "withChildren"
     }]
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "anInterface",
   "caller": symbol {
    "content": "NodeRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [string {
    "value": "interface"
    }, invocation {
    "caller": symbol {
     "content": "createTypeRule"
     }
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "implementsPresent",
   "caller": symbol {
    "content": "StripRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [construction {
    "caller": symbol {
     "content": "PrefixRule"
     },
    "arguments": [string {
     "value": "implements"
     }, construction {
     "caller": symbol {
      "content": "LocatingRule"
      },
     "arguments": [symbol {
      "content": "anInterface"
      }, construction {
      "caller": symbol {
       "content": "FirstLocator"
       },
      "arguments": [string {
       "value": "{"
       }]
      }, construction {
      "caller": symbol {
       "content": "SuffixRule"
       },
      "arguments": [symbol {
       "content": "maybeChildren"
       }, string {
       "value": "}"
       }]
      }]
     }]
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "implementsEmpty",
   "caller": symbol {
    "content": "StripRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [construction {
    "caller": symbol {
     "content": "PrefixRule"
     },
    "arguments": [string {
     "value": "{"
     }, construction {
     "caller": symbol {
      "content": "SuffixRule"
      },
     "arguments": [symbol {
      "content": "maybeChildren"
      }, string {
      "value": "}"
      }]
     }]
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "afterParams",
   "caller": symbol {
    "content": "OptionalNodeRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [string {
    "value": "super"
    }, symbol {
    "content": "implementsEmpty"
    }, symbol {
    "content": "implementsPresent"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "afterKeyword",
   "caller": symbol {
    "content": "LocatingRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [symbol {
    "content": "name"
    }, construction {
    "caller": symbol {
     "content": "FirstLocator"
     },
    "arguments": [string {
     "value": "("
     }]
    }, construction {
    "caller": symbol {
     "content": "LocatingRule"
     },
    "arguments": [symbol {
     "content": "params"
     }, construction {
     "caller": symbol {
      "content": "FirstLocator"
      },
     "arguments": [string {
      "value": ")"
      }]
     }, symbol {
     "content": "afterParams"
     }]
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, return {
   "value": construction {
    "caller": symbol {
     "content": "TypeRule"
     },
    "arguments": [symbol {
     "content": "RECORD_TYPE"
     }, construction {
     "caller": symbol {
      "content": "LocatingRule"
      },
     "arguments": [invocation {
      "caller": symbol {
       "content": "createModifiersRule"
       }
      }, construction {
      "caller": symbol {
       "content": "FirstLocator"
       },
      "arguments": [string {
       "value": "record "
       }]
      }, symbol {
      "content": "afterKeyword"
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }, modifier {
   "modifier-value": "static"
   }]
  }, method {
  "name": "createDefinitionRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "TypeRule"
    }]
   },
  "children": [declaration {
   "name": "content",
   "caller": symbol {
    "content": "NodeRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [string {
    "value": "returns"
    }, invocation {
    "caller": symbol {
     "content": "createTypeRule"
     }
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "typeParams",
   "caller": symbol {
    "content": "StripRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [construction {
    "caller": symbol {
     "content": "PrefixRule"
     },
    "arguments": [string {
     "value": "<"
     }, construction {
     "caller": symbol {
      "content": "SuffixRule"
      },
     "arguments": [construction {
      "caller": symbol {
       "content": "ExtractRule"
       },
      "arguments": [string {
       "value": "type-params"
       }]
      }, string {
      "value": ">"
      }]
     }]
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "withTypeParams",
   "caller": symbol {
    "content": "ContextRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [string {
    "value": "With type params"
    }, construction {
    "caller": symbol {
     "content": "LocatingRule"
     },
    "arguments": [symbol {
     "content": "typeParams"
     }, construction {
     "caller": symbol {
      "content": "ForwardsLocator"
      },
     "arguments": [string {
      "value": " "
      }]
     }, symbol {
     "content": "content"
     }]
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "withoutTypeParams",
   "caller": symbol {
    "content": "ContextRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [string {
    "value": "Without type params"
    }, symbol {
    "content": "content"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "maybeTypeParams",
   "caller": symbol {
    "content": "OptionalNodeRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [string {
    "value": "type-params"
    }, symbol {
    "content": "withoutTypeParams"
    }, symbol {
    "content": "withTypeParams"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "withModifiers",
   "caller": symbol {
    "content": "ContextRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [string {
    "value": "With modifiers"
    }, construction {
    "caller": symbol {
     "content": "LocatingRule"
     },
    "arguments": [invocation {
     "caller": symbol {
      "content": "createModifiersRule"
      }
     }, construction {
     "caller": symbol {
      "content": "ForwardsLocator"
      },
     "arguments": [string {
      "value": " "
      }]
     }, symbol {
     "content": "maybeTypeParams"
     }]
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "withoutModifiers",
   "caller": symbol {
    "content": "ContextRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [string {
    "value": "Without modifiers"
    }, symbol {
    "content": "maybeTypeParams"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "maybeModifiers",
   "caller": symbol {
    "content": "StripRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [construction {
    "caller": symbol {
     "content": "OptionalNodeRule"
     },
    "arguments": [string {
     "value": "modifiers"
     }, symbol {
     "content": "withoutModifiers"
     }, symbol {
     "content": "withModifiers"
     }]
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "annotation",
   "caller": symbol {
    "content": "TypeRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [string {
    "value": "annotation"
    }, construction {
    "caller": symbol {
     "content": "StripRule"
     },
    "arguments": [construction {
     "caller": symbol {
      "content": "PrefixRule"
      },
     "arguments": [string {
      "value": "@"
      }, construction {
      "caller": symbol {
       "content": "ExtractRule"
       },
      "arguments": [string {
       "value": "value"
       }]
      }]
     }]
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "annotations",
   "caller": symbol {
    "content": "NodeListRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [construction {
    "caller": symbol {
     "content": "SimpleSplitter"
     },
    "arguments": [string {
     "value": "\n"
     }]
    }, string {
    "value": "annotations"
    }, symbol {
    "content": "annotation"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "withAnnotations",
   "caller": symbol {
    "content": "ContextRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [string {
    "value": "With annotations"
    }, construction {
    "caller": symbol {
     "content": "LocatingRule"
     },
    "arguments": [symbol {
     "content": "annotations"
     }, construction {
     "caller": symbol {
      "content": "LastLocator"
      },
     "arguments": [string {
      "value": "\n"
      }]
     }, symbol {
     "content": "maybeModifiers"
     }]
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "withoutAnnotations",
   "caller": symbol {
    "content": "ContextRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [string {
    "value": "Without annotations"
    }, symbol {
    "content": "maybeModifiers"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "maybeAnnotations",
   "caller": symbol {
    "content": "OptionalNodeRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [string {
    "value": "annotations"
    }, symbol {
    "content": "withoutAnnotations"
    }, symbol {
    "content": "withAnnotations"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, return {
   "value": construction {
    "caller": symbol {
     "content": "TypeRule"
     },
    "arguments": [string {
     "value": "definition"
     }, construction {
     "caller": symbol {
      "content": "StripRule"
      },
     "arguments": [construction {
      "caller": symbol {
       "content": "LocatingRule"
       },
      "arguments": [symbol {
       "content": "maybeAnnotations"
       }, construction {
       "caller": symbol {
        "content": "LastLocator"
        },
       "arguments": [string {
        "value": " "
        }]
       }, construction {
       "caller": symbol {
        "content": "ExtractRule"
        },
       "arguments": [string {
        "value": "name"
        }]
       }]
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }]
  }, method {
  "name": "createRootMemberRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "OrRule"
    }]
   },
  "children": [return {
   "value": construction {
    "caller": symbol {
     "content": "OrRule"
     },
    "arguments": [invocation {
     "caller": property-access {
      "child": "of",
      "parent": symbol {
       "content": "List"
       }
      },
     "arguments": [invocation {
      "caller": symbol {
       "content": "createPackageRule"
       }
      }, invocation {
      "caller": symbol {
       "content": "createImportRule"
       }
      }, invocation {
      "caller": symbol {
       "content": "createImportRule"
       },
      "arguments": [symbol {
       "content": "IMPORT_STATIC_TYPE"
       }, string {
       "value": "import static "
       }]
      }, invocation {
      "caller": symbol {
       "content": "createRecordRule"
       }
      }, invocation {
      "caller": symbol {
       "content": "createInterfaceRule"
       }
      }, invocation {
      "caller": symbol {
       "content": "createClassRule"
       }
      }, invocation {
      "caller": symbol {
       "content": "createWhitespaceRule"
       }
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }]
  }, method {
  "name": "createClassRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "TypeRule"
    }]
   },
  "children": [declaration {
   "name": "body",
   "caller": symbol {
    "content": "createChildrenRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [invocation {
    "caller": symbol {
     "content": "createClassMemberRule"
     }
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "afterKeyword",
   "caller": symbol {
    "content": "LocatingRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [construction {
    "caller": symbol {
     "content": "ExtractRule"
     },
    "arguments": [string {
     "value": "name"
     }]
    }, construction {
    "caller": symbol {
     "content": "FirstLocator"
     },
    "arguments": [string {
     "value": "{"
     }]
    }, construction {
    "caller": symbol {
     "content": "SuffixRule"
     },
    "arguments": [symbol {
     "content": "body"
     }, string {
     "value": "}"
     }]
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, return {
   "value": construction {
    "caller": symbol {
     "content": "TypeRule"
     },
    "arguments": [symbol {
     "content": "CLASS_TYPE"
     }, construction {
     "caller": symbol {
      "content": "LocatingRule"
      },
     "arguments": [invocation {
      "caller": symbol {
       "content": "createModifiersRule"
       }
      }, construction {
      "caller": symbol {
       "content": "FirstLocator"
       },
      "arguments": [string {
       "value": "class "
       }]
      }, symbol {
      "content": "afterKeyword"
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }]
  }, method {
  "name": "createInterfaceRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "TypeRule"
    }]
   },
  "children": [declaration {
   "name": "memberRule",
   "caller": symbol {
    "content": "createClassMemberRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "content",
   "caller": symbol {
    "content": "SuffixRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [construction {
    "caller": symbol {
     "content": "NodeListRule"
     },
    "arguments": [construction {
     "caller": symbol {
      "content": "StatementSplitter"
      }
     }, string {
     "value": "content"
     }, construction {
     "caller": symbol {
      "content": "StripRule"
      },
     "arguments": [symbol {
      "content": "memberRule"
      }]
     }]
    }, string {
    "value": "}"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "name",
   "caller": symbol {
    "content": "LocatingRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [construction {
    "caller": symbol {
     "content": "StripRule"
     },
    "arguments": [construction {
     "caller": symbol {
      "content": "ExtractRule"
      },
     "arguments": [string {
      "value": "name"
      }]
     }]
    }, construction {
    "caller": symbol {
     "content": "FirstLocator"
     },
    "arguments": [string {
     "value": "{"
     }]
    }, construction {
    "caller": symbol {
     "content": "StripRule"
     },
    "arguments": [symbol {
     "content": "content"
     }]
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, return {
   "value": construction {
    "caller": symbol {
     "content": "TypeRule"
     },
    "arguments": [symbol {
     "content": "INTERFACE_TYPE"
     }, construction {
     "caller": symbol {
      "content": "LocatingRule"
      },
     "arguments": [invocation {
      "caller": symbol {
       "content": "createModifiersRule"
       }
      }, construction {
      "caller": symbol {
       "content": "FirstLocator"
       },
      "arguments": [string {
       "value": "interface"
       }]
      }, symbol {
      "content": "name"
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }]
  }, method {
  "name": "createClassMemberRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "OrRule"
    }]
   },
  "children": [return {
   "value": construction {
    "caller": symbol {
     "content": "OrRule"
     },
    "arguments": [invocation {
     "caller": property-access {
      "child": "of",
      "parent": symbol {
       "content": "List"
       }
      },
     "arguments": [invocation {
      "caller": symbol {
       "content": "createMethodRule"
       }
      }, invocation {
      "caller": symbol {
       "content": "createDeclarationRule"
       },
      "arguments": [invocation {
       "caller": symbol {
        "content": "createValueRule"
        }
       }]
      }, invocation {
      "caller": symbol {
       "content": "createDefinitionStatementRule"
       }
      }, invocation {
      "caller": symbol {
       "content": "createWhitespaceRule"
       }
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }]
  }, method {
  "name": "createDefinitionStatementRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "TypeRule"
    }]
   },
  "children": [return {
   "value": construction {
    "caller": symbol {
     "content": "TypeRule"
     },
    "arguments": [string {
     "value": "definition"
     }, construction {
     "caller": symbol {
      "content": "StripRule"
      },
     "arguments": [construction {
      "caller": symbol {
       "content": "SuffixRule"
       },
      "arguments": [invocation {
       "caller": symbol {
        "content": "createDefinitionRule"
        }
       }, string {
       "value": ";"
       }]
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }]
  }, method {
  "name": "createMethodRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "TypeRule"
    }]
   },
  "children": [declaration {
   "name": "params",
   "caller": symbol {
    "content": "OptionalNodeRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [string {
    "value": "params"
    }, construction {
    "caller": symbol {
     "content": "EmptyRule"
     }
    }, construction {
    "caller": symbol {
     "content": "NodeListRule"
     },
    "arguments": [construction {
     "caller": symbol {
      "content": "ValueSplitter"
      }
     }, string {
     "value": "params"
     }, invocation {
     "caller": symbol {
      "content": "createDefinitionRule"
      }
     }]
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "children",
   "caller": symbol {
    "content": "StripRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [construction {
    "caller": symbol {
     "content": "PrefixRule"
     },
    "arguments": [string {
     "value": "{"
     }, construction {
     "caller": symbol {
      "content": "SuffixRule"
      },
     "arguments": [invocation {
      "caller": symbol {
       "content": "createChildrenRule"
       },
      "arguments": [invocation {
       "caller": symbol {
        "content": "createStatementRule"
        }
       }]
      }, string {
      "value": "}"
      }]
     }]
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "maybeChildren",
   "caller": symbol {
    "content": "OptionalNodeRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [string {
    "value": "children"
    }, construction {
    "caller": symbol {
     "content": "SuffixRule"
     },
    "arguments": [construction {
     "caller": symbol {
      "content": "EmptyRule"
      }
     }, string {
     "value": ";"
     }]
    }, symbol {
    "content": "children"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "withParams",
   "caller": symbol {
    "content": "LocatingRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [symbol {
    "content": "params"
    }, construction {
    "caller": symbol {
     "content": "FirstLocator"
     },
    "arguments": [string {
     "value": ")"
     }]
    }, symbol {
    "content": "maybeChildren"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, return {
   "value": construction {
    "caller": symbol {
     "content": "TypeRule"
     },
    "arguments": [symbol {
     "content": "METHOD"
     }, construction {
     "caller": symbol {
      "content": "LocatingRule"
      },
     "arguments": [invocation {
      "caller": symbol {
       "content": "createDefinitionRule"
       }
      }, construction {
      "caller": symbol {
       "content": "FirstLocator"
       },
      "arguments": [string {
       "value": "("
       }]
      }, symbol {
      "content": "withParams"
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }]
  }, method {
  "name": "createStatementRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "Rule"
    }]
   },
  "children": [declaration {
   "name": "valueRule",
   "caller": symbol {
    "content": "createValueRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "statement",
   "caller": symbol {
    "content": "LazyRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, invocation {
   "caller": property-access {
    "child": "setChildRule",
    "parent": symbol {
     "content": "statement"
     }
    },
   "arguments": [construction {
    "caller": symbol {
     "content": "OrRule"
     },
    "arguments": [invocation {
     "caller": property-access {
      "child": "of",
      "parent": symbol {
       "content": "List"
       }
      },
     "arguments": [invocation {
      "caller": symbol {
       "content": "createWhitespaceRule"
       }
      }, invocation {
      "caller": symbol {
       "content": "createReturnRule"
       },
      "arguments": [symbol {
       "content": "valueRule"
       }]
      }, invocation {
      "caller": symbol {
       "content": "createInvocationStatementRule"
       },
      "arguments": [symbol {
       "content": "valueRule"
       }]
      }, invocation {
      "caller": symbol {
       "content": "createConditionRule"
       },
      "arguments": [string {
       "value": "if"
       }, string {
       "value": "if"
       }]
      }, invocation {
      "caller": symbol {
       "content": "createConditionRule"
       },
      "arguments": [string {
       "value": "while"
       }, string {
       "value": "while"
       }]
      }, invocation {
      "caller": symbol {
       "content": "createDeclarationRule"
       },
      "arguments": [symbol {
       "content": "valueRule"
       }]
      }, invocation {
      "caller": symbol {
       "content": "createNamedBlockRule"
       },
      "arguments": [symbol {
       "content": "statement"
       }, string {
       "value": "else"
       }, string {
       "value": "else"
       }]
      }, invocation {
      "caller": symbol {
       "content": "createNamedBlockRule"
       },
      "arguments": [symbol {
       "content": "statement"
       }, string {
       "value": "try"
       }, string {
       "value": "try"
       }]
      }, invocation {
      "caller": symbol {
       "content": "createConditionRule"
       },
      "arguments": [string {
       "value": "catch"
       }, string {
       "value": "catch"
       }]
      }, invocation {
      "caller": symbol {
       "content": "createAssignmentRule"
       },
      "arguments": [symbol {
       "content": "valueRule"
       }]
      }, invocation {
      "caller": symbol {
       "content": "createPostRule"
       },
      "arguments": [string {
       "value": "increment"
       }, symbol {
       "content": "valueRule"
       }, string {
       "value": "++"
       }]
      }, invocation {
      "caller": symbol {
       "content": "createPostRule"
       },
      "arguments": [string {
       "value": "decrement"
       }, symbol {
       "content": "valueRule"
       }, string {
       "value": "--"
       }]
      }]
     }]
    }]
   }, return {
   "value": symbol {
    "content": "statement"
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }]
  }, method {
  "name": "createPostRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "TypeRule"
    }]
   },
  "children": [return {
   "value": construction {
    "caller": symbol {
     "content": "TypeRule"
     },
    "arguments": [addition {
     "left": string {
      "value": "post-"
      },
     "right": symbol {
      "content": "type"
      }
     }, construction {
     "caller": symbol {
      "content": "StripRule"
      },
     "arguments": [construction {
      "caller": symbol {
       "content": "SuffixRule"
       },
      "arguments": [construction {
       "caller": symbol {
        "content": "NodeRule"
        },
       "arguments": [string {
        "value": "value"
        }, symbol {
        "content": "valueRule"
        }]
       }, addition {
       "left": symbol {
        "content": "operator"
        },
       "right": string {
        "value": ";"
        }
       }]
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }],
  "params": [definition {
   "name": "type",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }, definition {
   "name": "valueRule",
   "returns": symbol {
    "namespace": [segment {
     "segment": "Rule"
     }]
    }
   }, definition {
   "name": "operator",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "createAssignmentRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "TypeRule"
    }]
   },
  "children": [return {
   "value": construction {
    "caller": symbol {
     "content": "TypeRule"
     },
    "arguments": [string {
     "value": "assignment"
     }, construction {
     "caller": symbol {
      "content": "StripRule"
      },
     "arguments": [construction {
      "caller": symbol {
       "content": "LocatingRule"
       },
      "arguments": [symbol {
       "content": "valueRule"
       }, construction {
       "caller": symbol {
        "content": "FirstLocator"
        },
       "arguments": [string {
        "value": "="
        }]
       }, construction {
       "caller": symbol {
        "content": "SuffixRule"
        },
       "arguments": [symbol {
        "content": "valueRule"
        }, string {
        "value": ";"
        }]
       }]
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }],
  "params": [definition {
   "name": "valueRule",
   "returns": symbol {
    "namespace": [segment {
     "segment": "Rule"
     }]
    }
   }]
  }, method {
  "name": "createNamedBlockRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "TypeRule"
    }]
   },
  "children": [return {
   "value": construction {
    "caller": symbol {
     "content": "TypeRule"
     },
    "arguments": [symbol {
     "content": "type"
     }, construction {
     "caller": symbol {
      "content": "PrefixRule"
      },
     "arguments": [symbol {
      "content": "prefix"
      }, construction {
      "caller": symbol {
       "content": "StripRule"
       },
      "arguments": [construction {
       "caller": symbol {
        "content": "PrefixRule"
        },
       "arguments": [string {
        "value": "{"
        }, construction {
        "caller": symbol {
         "content": "SuffixRule"
         },
        "arguments": [invocation {
         "caller": symbol {
          "content": "createChildrenRule"
          },
         "arguments": [symbol {
          "content": "statement"
          }]
         }, string {
         "value": "}"
         }]
        }]
       }]
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }],
  "params": [definition {
   "name": "statement",
   "returns": symbol {
    "namespace": [segment {
     "segment": "Rule"
     }]
    }
   }, definition {
   "name": "type",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }, definition {
   "name": "prefix",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "createDeclarationRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "TypeRule"
    }]
   },
  "children": [return {
   "value": construction {
    "caller": symbol {
     "content": "TypeRule"
     },
    "arguments": [string {
     "value": "declaration"
     }, construction {
     "caller": symbol {
      "content": "LocatingRule"
      },
     "arguments": [invocation {
      "caller": symbol {
       "content": "createDefinitionRule"
       }
      }, construction {
      "caller": symbol {
       "content": "FirstLocator"
       },
      "arguments": [string {
       "value": "="
       }]
      }, construction {
      "caller": symbol {
       "content": "SuffixRule"
       },
      "arguments": [symbol {
       "content": "valueRule"
       }, string {
       "value": ";"
       }]
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }],
  "params": [definition {
   "name": "valueRule",
   "returns": symbol {
    "namespace": [segment {
     "segment": "Rule"
     }]
    }
   }]
  }, method {
  "name": "createConditionRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "TypeRule"
    }]
   },
  "children": [return {
   "value": construction {
    "caller": symbol {
     "content": "TypeRule"
     },
    "arguments": [symbol {
     "content": "type"
     }, construction {
     "caller": symbol {
      "content": "PrefixRule"
      },
     "arguments": [symbol {
      "content": "prefix"
      }, construction {
      "caller": symbol {
       "content": "ExtractRule"
       },
      "arguments": [string {
       "value": "content"
       }]
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }],
  "params": [definition {
   "name": "type",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }, definition {
   "name": "prefix",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "createInvocationStatementRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "TypeRule"
    }]
   },
  "children": [return {
   "value": construction {
    "caller": symbol {
     "content": "TypeRule"
     },
    "arguments": [string {
     "value": "invocation"
     }, construction {
     "caller": symbol {
      "content": "SuffixRule"
      },
     "arguments": [invocation {
      "caller": symbol {
       "content": "createInvocationRule"
       },
      "arguments": [symbol {
       "content": "valueRule"
       }]
      }, string {
      "value": ";"
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }],
  "params": [definition {
   "name": "valueRule",
   "returns": symbol {
    "namespace": [segment {
     "segment": "Rule"
     }]
    }
   }]
  }, method {
  "name": "createReturnRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "TypeRule"
    }]
   },
  "children": [return {
   "value": construction {
    "caller": symbol {
     "content": "TypeRule"
     },
    "arguments": [string {
     "value": "return"
     }, construction {
     "caller": symbol {
      "content": "PrefixRule"
      },
     "arguments": [string {
      "value": "return "
      }, construction {
      "caller": symbol {
       "content": "SuffixRule"
       },
      "arguments": [construction {
       "caller": symbol {
        "content": "NodeRule"
        },
       "arguments": [string {
        "value": "value"
        }, symbol {
        "content": "valueRule"
        }]
       }, string {
       "value": ";"
       }]
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }],
  "params": [definition {
   "name": "valueRule",
   "returns": symbol {
    "namespace": [segment {
     "segment": "Rule"
     }]
    }
   }]
  }, method {
  "name": "createValueRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "Rule"
    }]
   },
  "children": [declaration {
   "name": "value",
   "caller": symbol {
    "content": "LazyRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, invocation {
   "caller": property-access {
    "child": "setChildRule",
    "parent": symbol {
     "content": "value"
     }
    },
   "arguments": [construction {
    "caller": symbol {
     "content": "OrRule"
     },
    "arguments": [invocation {
     "caller": property-access {
      "child": "of",
      "parent": symbol {
       "content": "List"
       }
      },
     "arguments": [construction {
      "caller": symbol {
       "content": "TypeRule"
       },
      "arguments": [string {
       "value": "char"
       }, construction {
       "caller": symbol {
        "content": "StripRule"
        },
       "arguments": [construction {
        "caller": symbol {
         "content": "PrefixRule"
         },
        "arguments": [string {
         "value": "'"
         }, construction {
         "caller": symbol {
          "content": "SuffixRule"
          },
         "arguments": [construction {
          "caller": symbol {
           "content": "ExtractRule"
           },
          "arguments": [string {
           "value": "value"
           }]
          }, string {
          "value": "'"
          }]
         }]
        }]
       }]
      }, invocation {
      "caller": symbol {
       "content": "createQuantityRule"
       },
      "arguments": [symbol {
       "content": "value"
       }]
      }, invocation {
      "caller": symbol {
       "content": "createStringRule"
       }
      }, invocation {
      "caller": symbol {
       "content": "createConstructionRule"
       },
      "arguments": [symbol {
       "content": "value"
       }]
      }, invocation {
      "caller": symbol {
       "content": "createInvocationRule"
       },
      "arguments": [symbol {
       "content": "value"
       }]
      }, invocation {
      "caller": symbol {
       "content": "createSymbolRule"
       }
      }, invocation {
      "caller": symbol {
       "content": "createNumberRule"
       }
      }, invocation {
      "caller": symbol {
       "content": "createOperationRule"
       },
      "arguments": [symbol {
       "content": "value"
       }, string {
       "value": "addition"
       }, string {
       "value": "+"
       }]
      }, invocation {
      "caller": symbol {
       "content": "createOperationRule"
       },
      "arguments": [symbol {
       "content": "value"
       }, string {
       "value": "subtraction"
       }, string {
       "value": "-"
       }]
      }, invocation {
      "caller": symbol {
       "content": "createOperationRule"
       },
      "arguments": [symbol {
       "content": "value"
       }, string {
       "value": "equals"
       }, string {
       "value": "=="
       }]
      }, invocation {
      "caller": symbol {
       "content": "createOperationRule"
       },
      "arguments": [symbol {
       "content": "value"
       }, string {
       "value": "not-equals"
       }, string {
       "value": "!="
       }]
      }, invocation {
      "caller": symbol {
       "content": "createOperationRule"
       },
      "arguments": [symbol {
       "content": "value"
       }, string {
       "value": "or"
       }, string {
       "value": "||"
       }]
      }, invocation {
      "caller": symbol {
       "content": "createOperationRule"
       },
      "arguments": [symbol {
       "content": "value"
       }, string {
       "value": "and"
       }, string {
       "value": "&&"
       }]
      }, invocation {
      "caller": symbol {
       "content": "createTernaryRule"
       },
      "arguments": [symbol {
       "content": "value"
       }]
      }, invocation {
      "caller": symbol {
       "content": "createAccessRule"
       },
      "arguments": [symbol {
       "content": "value"
       }, string {
       "value": "property-access"
       }, string {
       "value": "."
       }]
      }, invocation {
      "caller": symbol {
       "content": "createAccessRule"
       },
      "arguments": [symbol {
       "content": "value"
       }, string {
       "value": "method-access"
       }, string {
       "value": "::"
       }]
      }, invocation {
      "caller": symbol {
       "content": "createLambdaRule"
       }
      }]
     }]
    }]
   }, return {
   "value": symbol {
    "content": "value"
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }]
  }, method {
  "name": "createQuantityRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "TypeRule"
    }]
   },
  "children": [return {
   "value": construction {
    "caller": symbol {
     "content": "TypeRule"
     },
    "arguments": [string {
     "value": "quantity"
     }, construction {
     "caller": symbol {
      "content": "StripRule"
      },
     "arguments": [construction {
      "caller": symbol {
       "content": "PrefixRule"
       },
      "arguments": [string {
       "value": "("
       }, construction {
       "caller": symbol {
        "content": "SuffixRule"
        },
       "arguments": [construction {
        "caller": symbol {
         "content": "NodeRule"
         },
        "arguments": [string {
         "value": "value"
         }, symbol {
         "content": "value"
         }]
        }, string {
        "value": ")"
        }]
       }]
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }],
  "params": [definition {
   "name": "value",
   "returns": symbol {
    "namespace": [segment {
     "segment": "LazyRule"
     }]
    }
   }]
  }, method {
  "name": "createStringRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "TypeRule"
    }]
   },
  "children": [declaration {
   "name": "value",
   "caller": symbol {
    "content": "OrRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [invocation {
    "caller": property-access {
     "child": "of",
     "parent": symbol {
      "content": "List"
      }
     },
    "arguments": [construction {
     "caller": symbol {
      "content": "ExtractRule"
      },
     "arguments": [string {
      "value": "value"
      }]
     }, construction {
     "caller": symbol {
      "content": "EmptyRule"
      }
     }]
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, return {
   "value": construction {
    "caller": symbol {
     "content": "TypeRule"
     },
    "arguments": [string {
     "value": "string"
     }, construction {
     "caller": symbol {
      "content": "StripRule"
      },
     "arguments": [construction {
      "caller": symbol {
       "content": "PrefixRule"
       },
      "arguments": [string {
       "value": "\""
       }, construction {
       "caller": symbol {
        "content": "SuffixRule"
        },
       "arguments": [symbol {
        "content": "value"
        }, string {
        "value": "\""
        }]
       }]
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }]
  }, method {
  "name": "createLambdaRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "TypeRule"
    }]
   },
  "children": [return {
   "value": construction {
    "caller": symbol {
     "content": "TypeRule"
     },
    "arguments": [string {
     "value": "lambda"
     }, construction {
     "caller": symbol {
      "content": "LocatingRule"
      },
     "arguments": [construction {
      "caller": symbol {
       "content": "ExtractRule"
       },
      "arguments": [string {
       "value": "before-arrow"
       }]
      }, construction {
      "caller": symbol {
       "content": "FirstLocator"
       },
      "arguments": [string {
       "value": "->"
       }]
      }, construction {
      "caller": symbol {
       "content": "ExtractRule"
       },
      "arguments": [string {
       "value": "after-arrow"
       }]
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }]
  }, method {
  "name": "createTernaryRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "TypeRule"
    }]
   },
  "children": [declaration {
   "name": "condition",
   "caller": symbol {
    "content": "NodeRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [string {
    "value": "condition"
    }, symbol {
    "content": "value"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "ifTrue",
   "caller": symbol {
    "content": "NodeRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [string {
    "value": "ifTrue"
    }, symbol {
    "content": "value"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "ifFalse",
   "caller": symbol {
    "content": "NodeRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [string {
    "value": "ifFalse"
    }, symbol {
    "content": "value"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "afterCondition",
   "caller": symbol {
    "content": "LocatingRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [symbol {
    "content": "ifTrue"
    }, construction {
    "caller": symbol {
     "content": "FirstLocator"
     },
    "arguments": [string {
     "value": ":"
     }]
    }, symbol {
    "content": "ifFalse"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, return {
   "value": construction {
    "caller": symbol {
     "content": "TypeRule"
     },
    "arguments": [string {
     "value": "ternary"
     }, construction {
     "caller": symbol {
      "content": "LocatingRule"
      },
     "arguments": [symbol {
      "content": "condition"
      }, construction {
      "caller": symbol {
       "content": "FirstLocator"
       },
      "arguments": [string {
       "value": "?"
       }]
      }, symbol {
      "content": "afterCondition"
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }],
  "params": [definition {
   "name": "value",
   "returns": symbol {
    "namespace": [segment {
     "segment": "LazyRule"
     }]
    }
   }]
  }, method {
  "name": "createNumberRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "Rule"
    }]
   },
  "children": [return {
   "value": construction {
    "caller": symbol {
     "content": "TypeRule"
     },
    "arguments": [string {
     "value": "number"
     }, construction {
     "caller": symbol {
      "content": "StripRule"
      },
     "arguments": [construction {
      "caller": symbol {
       "content": "FilterRule"
       },
      "arguments": [construction {
       "caller": symbol {
        "content": "NumberFilter"
        }
       }, construction {
       "caller": symbol {
        "content": "ExtractRule"
        },
       "arguments": [string {
        "value": "value"
        }]
       }]
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }]
  }, method {
  "name": "createOperationRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "TypeRule"
    }]
   },
  "children": [declaration {
   "name": "left",
   "caller": symbol {
    "content": "NodeRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [string {
    "value": "left"
    }, symbol {
    "content": "value"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "right",
   "caller": symbol {
    "content": "NodeRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [string {
    "value": "right"
    }, symbol {
    "content": "value"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, return {
   "value": construction {
    "caller": symbol {
     "content": "TypeRule"
     },
    "arguments": [symbol {
     "content": "type"
     }, construction {
     "caller": symbol {
      "content": "LocatingRule"
      },
     "arguments": [symbol {
      "content": "left"
      }, construction {
      "caller": symbol {
       "content": "FirstLocator"
       },
      "arguments": [symbol {
       "content": "operator"
       }]
      }, symbol {
      "content": "right"
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }],
  "params": [definition {
   "name": "value",
   "returns": symbol {
    "namespace": [segment {
     "segment": "Rule"
     }]
    }
   }, definition {
   "name": "type",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }, definition {
   "name": "operator",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "createSymbolRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "TypeRule"
    }]
   },
  "children": [return {
   "value": construction {
    "caller": symbol {
     "content": "TypeRule"
     },
    "arguments": [string {
     "value": "symbol"
     }, construction {
     "caller": symbol {
      "content": "StripRule"
      },
     "arguments": [construction {
      "caller": symbol {
       "content": "FilterRule"
       },
      "arguments": [construction {
       "caller": symbol {
        "content": "SymbolFilter"
        }
       }, construction {
       "caller": symbol {
        "content": "ExtractRule"
        },
       "arguments": [string {
        "value": "content"
        }]
       }]
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }]
  }, method {
  "name": "createAccessRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "TypeRule"
    }]
   },
  "children": [declaration {
   "name": "parent",
   "caller": symbol {
    "content": "NodeRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [string {
    "value": "parent"
    }, symbol {
    "content": "value"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "child",
   "caller": symbol {
    "content": "StripRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [construction {
    "caller": symbol {
     "content": "FilterRule"
     },
    "arguments": [construction {
     "caller": symbol {
      "content": "SymbolFilter"
      }
     }, construction {
     "caller": symbol {
      "content": "ExtractRule"
      },
     "arguments": [string {
      "value": "child"
      }]
     }]
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, return {
   "value": construction {
    "caller": symbol {
     "content": "TypeRule"
     },
    "arguments": [symbol {
     "content": "type"
     }, construction {
     "caller": symbol {
      "content": "LocatingRule"
      },
     "arguments": [symbol {
      "content": "parent"
      }, construction {
      "caller": symbol {
       "content": "LastLocator"
       },
      "arguments": [symbol {
       "content": "separator"
       }]
      }, symbol {
      "content": "child"
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }],
  "params": [definition {
   "name": "value",
   "returns": symbol {
    "namespace": [segment {
     "segment": "LazyRule"
     }]
    }
   }, definition {
   "name": "type",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }, definition {
   "name": "separator",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "createConstructionRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "TypeRule"
    }]
   },
  "children": [declaration {
   "name": "caller",
   "caller": symbol {
    "content": "NodeRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [string {
    "value": "caller"
    }, symbol {
    "content": "value"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "typeArguments",
   "caller": symbol {
    "content": "OptionalNodeRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [string {
    "value": "type-arguments"
    }, construction {
    "caller": symbol {
     "content": "EmptyRule"
     }
    }, construction {
    "caller": symbol {
     "content": "NodeListRule"
     },
    "arguments": [construction {
     "caller": symbol {
      "content": "ValueSplitter"
      }
     }, string {
     "value": "type-arguments"
     }, invocation {
     "caller": symbol {
      "content": "createTypeRule"
      }
     }]
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "withTypeArguments",
   "caller": symbol {
    "content": "StripRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [construction {
    "caller": symbol {
     "content": "LocatingRule"
     },
    "arguments": [symbol {
     "content": "caller"
     }, construction {
     "caller": symbol {
      "content": "FirstLocator"
      },
     "arguments": [string {
      "value": "<"
      }]
     }, construction {
     "caller": symbol {
      "content": "SuffixRule"
      },
     "arguments": [symbol {
      "content": "typeArguments"
      }, string {
      "value": ">"
      }]
     }]
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "beforeParams",
   "caller": symbol {
    "content": "PrefixRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [string {
    "value": "new "
    }, construction {
    "caller": symbol {
     "content": "OptionalNodeRule"
     },
    "arguments": [string {
     "value": "type-arguments"
     }, symbol {
     "content": "caller"
     }, symbol {
     "content": "withTypeArguments"
     }]
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "arguments",
   "caller": symbol {
    "content": "createArgumentsRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [symbol {
    "content": "value"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, return {
   "value": construction {
    "caller": symbol {
     "content": "TypeRule"
     },
    "arguments": [string {
     "value": "construction"
     }, construction {
     "caller": symbol {
      "content": "StripRule"
      },
     "arguments": [construction {
      "caller": symbol {
       "content": "LocatingRule"
       },
      "arguments": [symbol {
       "content": "beforeParams"
       }, construction {
       "caller": symbol {
        "content": "FirstLocator"
        },
       "arguments": [string {
        "value": "("
        }]
       }, construction {
       "caller": symbol {
        "content": "SuffixRule"
        },
       "arguments": [symbol {
        "content": "arguments"
        }, string {
        "value": ")"
        }]
       }]
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }],
  "params": [definition {
   "name": "value",
   "returns": symbol {
    "namespace": [segment {
     "segment": "Rule"
     }]
    }
   }]
  }, method {
  "name": "createInvocationRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "TypeRule"
    }]
   },
  "children": [declaration {
   "name": "caller",
   "caller": symbol {
    "content": "NodeRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [string {
    "value": "caller"
    }, symbol {
    "content": "value"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "arguments",
   "caller": symbol {
    "content": "createArgumentsRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [symbol {
    "content": "value"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, return {
   "value": construction {
    "caller": symbol {
     "content": "TypeRule"
     },
    "arguments": [string {
     "value": "invocation"
     }, construction {
     "caller": symbol {
      "content": "StripRule"
      },
     "arguments": [construction {
      "caller": symbol {
       "content": "LocatingRule"
       },
      "arguments": [symbol {
       "content": "caller"
       }, construction {
       "caller": symbol {
        "content": "OpeningLocator"
        }
       }, construction {
       "caller": symbol {
        "content": "SuffixRule"
        },
       "arguments": [symbol {
        "content": "arguments"
        }, string {
        "value": ")"
        }]
       }]
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }],
  "params": [definition {
   "name": "value",
   "returns": symbol {
    "namespace": [segment {
     "segment": "Rule"
     }]
    }
   }]
  }, method {
  "name": "createArgumentsRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "OptionalNodeListRule"
    }]
   },
  "children": [return {
   "value": construction {
    "caller": symbol {
     "content": "OptionalNodeListRule"
     },
    "arguments": [string {
     "value": "arguments"
     }, construction {
     "caller": symbol {
      "content": "EmptyRule"
      }
     }, construction {
     "caller": symbol {
      "content": "NodeListRule"
      },
     "arguments": [construction {
      "caller": symbol {
       "content": "ValueSplitter"
       }
      }, string {
      "value": "arguments"
      }, symbol {
      "content": "value"
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }],
  "params": [definition {
   "name": "value",
   "returns": symbol {
    "namespace": [segment {
     "segment": "Rule"
     }]
    }
   }]
  }, method {
  "name": "createTypeRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "Rule"
    }]
   },
  "children": [declaration {
   "name": "type",
   "caller": symbol {
    "content": "LazyRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, invocation {
   "caller": property-access {
    "child": "setChildRule",
    "parent": symbol {
     "content": "type"
     }
    },
   "arguments": [construction {
    "caller": symbol {
     "content": "OrRule"
     },
    "arguments": [invocation {
     "caller": property-access {
      "child": "of",
      "parent": symbol {
       "content": "List"
       }
      },
     "arguments": [invocation {
      "caller": symbol {
       "content": "createGenericRule"
       },
      "arguments": [symbol {
       "content": "type"
       }]
      }, construction {
      "caller": symbol {
       "content": "TypeRule"
       },
      "arguments": [string {
       "value": "array"
       }, construction {
       "caller": symbol {
        "content": "StripRule"
        },
       "arguments": [construction {
        "caller": symbol {
         "content": "SuffixRule"
         },
        "arguments": [construction {
         "caller": symbol {
          "content": "NodeRule"
          },
         "arguments": [string {
          "value": "child"
          }, symbol {
          "content": "type"
          }]
         }, string {
         "value": "[]"
         }]
        }]
       }]
      }, construction {
      "caller": symbol {
       "content": "TypeRule"
       },
      "arguments": [string {
       "value": "symbol"
       }, construction {
       "caller": symbol {
        "content": "StripRule"
        },
       "arguments": [invocation {
        "caller": symbol {
         "content": "createNamespaceRule"
         }
        }]
       }]
      }]
     }]
    }]
   }, return {
   "value": symbol {
    "content": "type"
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }]
  }, method {
  "name": "createGenericRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "TypeRule"
    }]
   },
  "children": [declaration {
   "name": "base",
   "caller": symbol {
    "content": "NodeRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [string {
    "value": "base"
    }, symbol {
    "content": "type"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "child",
   "caller": symbol {
    "content": "NodeListRule"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [construction {
    "caller": symbol {
     "content": "ValueSplitter"
     }
    }, string {
    "value": "children"
    }, symbol {
    "content": "type"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, return {
   "value": construction {
    "caller": symbol {
     "content": "TypeRule"
     },
    "arguments": [string {
     "value": "generic"
     }, construction {
     "caller": symbol {
      "content": "StripRule"
      },
     "arguments": [construction {
      "caller": symbol {
       "content": "LocatingRule"
       },
      "arguments": [symbol {
       "content": "base"
       }, construction {
       "caller": symbol {
        "content": "FirstLocator"
        },
       "arguments": [string {
        "value": "<"
        }]
       }, construction {
       "caller": symbol {
        "content": "SuffixRule"
        },
       "arguments": [symbol {
        "content": "child"
        }, string {
        "value": ">"
        }]
       }]
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }],
  "params": [definition {
   "name": "type",
   "returns": symbol {
    "namespace": [segment {
     "segment": "LazyRule"
     }]
    }
   }]
  }, whitespace {
  }],
 "modifiers": [modifier {
  "modifier-value": "public"
  }]
 }, whitespace {
 }]
}