{
"children": [import {
 "namespace": ["magma", "app", "compile", "rule", "Locator"]
 }, import {
 "namespace": ["java", "util", "ArrayList"]
 }, import {
 "namespace": ["java", "util", "List"]
 }, import {
 "namespace": ["java", "util", "stream", "Stream"]
 }, function {
 "name": "BackwardsLocator",
 "interface": symbol {
  "value": "Locator"
  },
 "modifiers": [modifier {
  "content": "public"
  }],
 "params": [definition {
  "name": "delimiter",
  "returns": symbol {
   "value": "String"
   }
  }],
 "children": [method {
  "name": "slice",
  "returns": symbol {
   "value": "String"
   },
  "modifiers": [modifier {
   "content": "public"
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "children": [return {
   "value": symbol {
    "content": "delimiter"
    }
   }]
  }, method {
  "name": "locate",
  "returns": generic {
   "base": symbol {
    "value": "Stream"
    },
   "children": [symbol {
    "value": "Integer"
    }]
   },
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "input",
   "returns": symbol {
    "value": "String"
    }
   }],
  "children": [symbol {
   "content": "List<Integer> indices = new ArrayList<>();"
   }, symbol {
   "content": "int index = input.lastIndexOf(delimiter);"
   }, symbol {
   "content": "while (index != -1) {
            indices.add(index);
            index = input.lastIndexOf(delimiter, index - 1);
        }"
   }, symbol {
   "content": "return indices.stream();"
   }]
  }]
 }]
}