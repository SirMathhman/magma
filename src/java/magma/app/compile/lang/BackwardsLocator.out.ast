{
"children": [import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "rule"
  }, segment {
  "segment": "Locator"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "ArrayList"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "List"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "stream"
  }, segment {
  "segment": "Stream"
  }]
 }, function {
 "name": "BackwardsLocator",
 "interface": symbol {
  "namespace": [segment {
   "segment": "Locator"
   }]
  },
 "modifiers": [modifier {
  "modifier-value": "export"
  }, modifier {
  "modifier-value": "class"
  }],
 "params": [definition {
  "name": "delimiter",
  "returns": symbol {
   "namespace": [segment {
    "segment": "String"
    }]
   }
  }],
 "children": [method {
  "name": "slice",
  "returns": symbol {
   "namespace": [segment {
    "segment": "String"
    }]
   },
  "children": [return {
   "value": symbol {
    "content": "delimiter"
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }]
  }, method {
  "name": "locate",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Stream"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "Integer"
     }]
    }]
   },
  "children": [declaration {
   "name": "indices",
   "caller": symbol {
    "content": "ArrayList"
    },
   "returns": generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "List"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "Integer"
      }]
     }]
    }
   }, declaration {
   "name": "index",
   "caller": property-access {
    "child": "lastIndexOf",
    "parent": symbol {
     "content": "input"
     }
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "int"
     }]
    },
   "arguments": [symbol {
    "content": "delimiter"
    }]
   }, while {
   "content": " (index != -1) {
            indices.add(index);
            index = input.lastIndexOf(delimiter, index - 1);
        }"
   }, return {
   "value": invocation {
    "caller": property-access {
     "child": "stream",
     "parent": symbol {
      "content": "indices"
      }
     }
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "input",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, implements {
  }]
 }, whitespace {
 }]
}