{
"children": [import {
 "namespace": ["magma", "app", "compile", "rule", "Splitter"]
 }, import {
 "namespace": ["java", "util", "ArrayList"]
 }, import {
 "namespace": ["java", "util", "LinkedList"]
 }, import {
 "namespace": ["java", "util", "List"]
 }, import {
 "namespace": ["java", "util", "stream", "Collectors"]
 }, import {
 "namespace": ["java", "util", "stream", "IntStream"]
 }, function {
 "name": "ValueSplitter implements Splitter ",
 "body": "
    private static void advance(StringBuilder buffer, ArrayList<String> lines) {
        if (!buffer.isEmpty()) lines.add(buffer.toString());
    }

    @Override
    public List<String> split(String input) {
        var lines = new ArrayList<String>();
        var buffer = new StringBuilder();
        var depth = 0;
        final var length = input.length();
        var queue = IntStream.range(0, length)
                .mapToObj(input::charAt)
                .collect(Collectors.toCollection(LinkedList::new));

        while (!queue.isEmpty()) {
            var c = queue.pop();
            if (c == '') {
                if (!queue.isEmpty() && queue.peek() == '') {
                    queue.pop();
                }
            }

            if (c == '\"') {
                while (!queue.isEmpty()) {
                    final var next = queue.pop();
                    buffer.append(next);

                    if (next == '\\' && !queue.isEmpty()) {
                        final var escaped = queue.pop();
                        buffer.append(escaped);
                    }

                    if (next == '\"') {
                        break;
                    }
                }
            }

            if (c == '' && depth == 0) {
                advance(buffer, lines);
                buffer = new StringBuilder();
            } else {
                if (c == '' || c == '') depth++;
                if (c == '' || c == '') depth--;
                buffer.append(c);
            }
        }
        advance(buffer, lines);
        return lines;
    }
}",
 "before-keyword": "public "
 }]
}