{
"children": [package {
 "namespace": ["magma", "app", "compile"]
 }, import {
 "namespace": ["magma", "api", "Tuple"]
 }, import {
 "namespace": ["java", "util", "List"]
 }, import {
 "namespace": ["java", "util", "Optional"]
 }, import {
 "namespace": ["java", "util", "function", "Function"]
 }, import {
 "namespace": ["java", "util", "stream", "Stream"]
 }, interface {
 "name": "Node",
 "modifiers": [modifier {
  "content": "public"
  }],
 "content": [method {
  "name": "retype",
  "returns": symbol {
   "value": "Node"
   },
  "params": [definition {
   "name": "type",
   "type": symbol {
    "value": "String"
    }
   }]
  }, method {
  "name": "is",
  "returns": symbol {
   "value": "boolean"
   },
  "params": [definition {
   "name": "type",
   "type": symbol {
    "value": "String"
    }
   }]
  }, method {
  "name": "withString",
  "returns": symbol {
   "value": "Node"
   },
  "params": [definition {
   "name": "propertyKey",
   "type": symbol {
    "value": "String"
    }
   }, definition {
   "name": "propertyValue",
   "type": symbol {
    "value": "String"
    }
   }]
  }, method {
  "name": "findString",
  "returns": generic {
   "base": symbol {
    "value": "Optional"
    },
   "children": [symbol {
    "value": "String"
    }]
   },
  "params": [definition {
   "name": "propertyKey",
   "type": symbol {
    "value": "String"
    }
   }]
  }, method {
  "name": "mapNodeList",
  "returns": generic {
   "base": symbol {
    "value": "Optional"
    },
   "children": [symbol {
    "value": "Node"
    }]
   },
  "params": [definition {
   "name": "propertyKey",
   "type": symbol {
    "value": "String"
    }
   }, definition {
   "name": "mapper",
   "type": generic {
    "base": symbol {
     "value": "Function"
     },
    "children": [generic {
     "base": symbol {
      "value": "List"
      },
     "children": [symbol {
      "value": "Node"
      }]
     }, generic {
     "base": symbol {
      "value": "List"
      },
     "children": [symbol {
      "value": "Node"
      }]
     }]
    }
   }]
  }, method {
  "name": "findNodeList",
  "returns": generic {
   "base": symbol {
    "value": "Optional"
    },
   "children": [generic {
    "base": symbol {
     "value": "List"
     },
    "children": [symbol {
     "value": "Node"
     }]
    }]
   },
  "params": [definition {
   "name": "propertyKey",
   "type": symbol {
    "value": "String"
    }
   }]
  }, method {
  "name": "withNodeList",
  "returns": symbol {
   "value": "Node"
   },
  "params": [definition {
   "name": "propertyKey",
   "type": symbol {
    "value": "String"
    }
   }, definition {
   "name": "values",
   "type": generic {
    "base": symbol {
     "value": "List"
     },
    "children": [symbol {
     "value": "Node"
     }]
    }
   }]
  }, method {
  "name": "format",
  "returns": symbol {
   "value": "String"
   },
  "params": [definition {
   "name": "depth",
   "type": symbol {
    "value": "int"
    }
   }]
  }, method {
  "name": "merge",
  "returns": symbol {
   "value": "Node"
   },
  "params": [definition {
   "name": "other",
   "type": symbol {
    "value": "Node"
    }
   }]
  }, method {
  "name": "streamStrings",
  "returns": generic {
   "base": symbol {
    "value": "Stream"
    },
   "children": [generic {
    "base": symbol {
     "value": "Tuple"
     },
    "children": [symbol {
     "value": "String"
     }, symbol {
     "value": "String"
     }]
    }]
   },
  "params": []
  }, method {
  "name": "streamNodeLists",
  "returns": generic {
   "base": symbol {
    "value": "Stream"
    },
   "children": [generic {
    "base": symbol {
     "value": "Tuple"
     },
    "children": [symbol {
     "value": "String"
     }, generic {
     "base": symbol {
      "value": "List"
      },
     "children": [symbol {
      "value": "Node"
      }]
     }]
    }]
   },
  "params": []
  }, method {
  "name": "withNode",
  "returns": symbol {
   "value": "Node"
   },
  "params": [definition {
   "name": "propertyKey",
   "type": symbol {
    "value": "String"
    }
   }, definition {
   "name": "propertyValue",
   "type": symbol {
    "value": "Node"
    }
   }]
  }, method {
  "name": "findNode",
  "returns": generic {
   "base": symbol {
    "value": "Optional"
    },
   "children": [symbol {
    "value": "Node"
    }]
   },
  "params": [definition {
   "name": "propertyKey",
   "type": symbol {
    "value": "String"
    }
   }]
  }, method {
  "name": "streamNodes",
  "returns": generic {
   "base": symbol {
    "value": "Stream"
    },
   "children": [generic {
    "base": symbol {
     "value": "Tuple"
     },
    "children": [symbol {
     "value": "String"
     }, symbol {
     "value": "Node"
     }]
    }]
   },
  "params": []
  }, method {
  "name": "hasNode",
  "returns": symbol {
   "value": "boolean"
   },
  "params": [definition {
   "name": "node",
   "type": symbol {
    "value": "String"
    }
   }]
  }, method {
  "name": "withStringList",
  "returns": symbol {
   "value": "Node"
   },
  "params": [definition {
   "name": "propertyKey",
   "type": symbol {
    "value": "String"
    }
   }, definition {
   "name": "propertyValues",
   "type": generic {
    "base": symbol {
     "value": "List"
     },
    "children": [symbol {
     "value": "String"
     }]
    }
   }]
  }, method {
  "name": "findStringList",
  "returns": generic {
   "base": symbol {
    "value": "Optional"
    },
   "children": [generic {
    "base": symbol {
     "value": "List"
     },
    "children": [symbol {
     "value": "String"
     }]
    }]
   },
  "params": [definition {
   "name": "propertyKey",
   "type": symbol {
    "value": "String"
    }
   }]
  }, method {
  "name": "streamStringLists",
  "returns": generic {
   "base": symbol {
    "value": "Stream"
    },
   "children": [generic {
    "base": symbol {
     "value": "Tuple"
     },
    "children": [symbol {
     "value": "String"
     }, generic {
     "base": symbol {
      "value": "List"
      },
     "children": [symbol {
      "value": "String"
      }]
     }]
    }]
   },
  "params": []
  }, method {
  "name": "mapStringList",
  "returns": generic {
   "base": symbol {
    "value": "Optional"
    },
   "children": [symbol {
    "value": "Node"
    }]
   },
  "params": [definition {
   "name": "propertyKey",
   "type": symbol {
    "value": "String"
    }
   }, definition {
   "name": "mapper",
   "type": generic {
    "base": symbol {
     "value": "Function"
     },
    "children": [generic {
     "base": symbol {
      "value": "List"
      },
     "children": [symbol {
      "value": "String"
      }]
     }, generic {
     "base": symbol {
      "value": "List"
      },
     "children": [symbol {
      "value": "String"
      }]
     }]
    }
   }]
  }]
 }]
}