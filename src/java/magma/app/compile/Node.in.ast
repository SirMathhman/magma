{
"children": [package {
 "namespace": ["magma", "app", "compile"]
 }, import {
 "namespace": ["magma", "api", "Tuple"]
 }, import {
 "namespace": ["java", "util", "List"]
 }, import {
 "namespace": ["java", "util", "Optional"]
 }, import {
 "namespace": ["java", "util", "function", "Function"]
 }, import {
 "namespace": ["java", "util", "stream", "Stream"]
 }, interface {
 "name": "Node",
 "modifiers": ["public"],
 "content": [method {
  "name": "retype",
  "content": ";",
  "params": content {
   "params": "String type"
   },
  "returns": symbol {
   "type": "Node"
   }
  }, method {
  "name": "is",
  "content": ";",
  "params": content {
   "params": "String type"
   },
  "returns": symbol {
   "type": "boolean"
   }
  }, method {
  "name": "withString",
  "content": ";",
  "params": content {
   "params": "String propertyKey, String propertyValue"
   },
  "returns": symbol {
   "type": "Node"
   }
  }, method {
  "name": "findString",
  "content": ";",
  "params": content {
   "params": "String propertyKey"
   },
  "returns": generic {
   "base": symbol {
    "type": "Optional"
    },
   "children": [symbol {
    "type": "String"
    }]
   }
  }, method {
  "name": "mapNodeList",
  "content": ";",
  "params": content {
   "params": "String propertyKey, Function<List<Node>, List<Node>> mapper"
   },
  "returns": generic {
   "base": symbol {
    "type": "Optional"
    },
   "children": [symbol {
    "type": "Node"
    }]
   }
  }, method {
  "name": "findNodeList",
  "content": ";",
  "params": content {
   "params": "String propertyKey"
   },
  "returns": generic {
   "base": symbol {
    "type": "Optional"
    },
   "children": [generic {
    "base": symbol {
     "type": "List"
     },
    "children": [symbol {
     "type": "Node"
     }]
    }]
   }
  }, method {
  "name": "withNodeList",
  "content": ";",
  "params": content {
   "params": "String propertyKey, List<Node> values"
   },
  "returns": symbol {
   "type": "Node"
   }
  }, method {
  "name": "format",
  "content": ";",
  "params": content {
   "params": "int depth"
   },
  "returns": symbol {
   "type": "String"
   }
  }, method {
  "name": "merge",
  "content": ";",
  "params": content {
   "params": "Node other"
   },
  "returns": symbol {
   "type": "Node"
   }
  }, method {
  "name": "streamStrings",
  "content": ";",
  "returns": generic {
   "base": symbol {
    "type": "Stream"
    },
   "children": [generic {
    "base": symbol {
     "type": "Tuple"
     },
    "children": [symbol {
     "type": "String"
     }, symbol {
     "type": "String"
     }]
    }]
   }
  }, method {
  "name": "streamNodeLists",
  "content": ";",
  "returns": generic {
   "base": symbol {
    "type": "Stream"
    },
   "children": [generic {
    "base": symbol {
     "type": "Tuple"
     },
    "children": [symbol {
     "type": "String"
     }, generic {
     "base": symbol {
      "type": "List"
      },
     "children": [symbol {
      "type": "Node"
      }]
     }]
    }]
   }
  }, method {
  "name": "withNode",
  "content": ";",
  "params": content {
   "params": "String propertyKey, Node propertyValue"
   },
  "returns": symbol {
   "type": "Node"
   }
  }, method {
  "name": "findNode",
  "content": ";",
  "params": content {
   "params": "String propertyKey"
   },
  "returns": generic {
   "base": symbol {
    "type": "Optional"
    },
   "children": [symbol {
    "type": "Node"
    }]
   }
  }, method {
  "name": "streamNodes",
  "content": ";",
  "returns": generic {
   "base": symbol {
    "type": "Stream"
    },
   "children": [generic {
    "base": symbol {
     "type": "Tuple"
     },
    "children": [symbol {
     "type": "String"
     }, symbol {
     "type": "Node"
     }]
    }]
   }
  }, method {
  "name": "hasNode",
  "content": ";",
  "params": content {
   "params": "String node"
   },
  "returns": symbol {
   "type": "boolean"
   }
  }, method {
  "name": "withStringList",
  "content": ";",
  "params": content {
   "params": "String propertyKey, List<String> propertyValues"
   },
  "returns": symbol {
   "type": "Node"
   }
  }, method {
  "name": "findStringList",
  "content": ";",
  "params": content {
   "params": "String propertyKey"
   },
  "returns": generic {
   "base": symbol {
    "type": "Optional"
    },
   "children": [generic {
    "base": symbol {
     "type": "List"
     },
    "children": [symbol {
     "type": "String"
     }]
    }]
   }
  }, method {
  "name": "streamStringLists",
  "content": ";",
  "returns": generic {
   "base": symbol {
    "type": "Stream"
    },
   "children": [generic {
    "base": symbol {
     "type": "Tuple"
     },
    "children": [symbol {
     "type": "String"
     }, generic {
     "base": symbol {
      "type": "List"
      },
     "children": [symbol {
      "type": "String"
      }]
     }]
    }]
   }
  }, method {
  "name": "mapStringList",
  "content": ";",
  "params": content {
   "params": "String propertyKey, Function<List<String>, List<String>> mapper"
   },
  "returns": generic {
   "base": symbol {
    "type": "Optional"
    },
   "children": [symbol {
    "type": "Node"
    }]
   }
  }]
 }]
}