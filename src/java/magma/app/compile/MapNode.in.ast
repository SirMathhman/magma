{
"children": [package {
 "namespace": ["magma", "app", "compile"]
 }, import {
 "namespace": ["magma", "api", "Tuple"]
 }, import {
 "namespace": ["java", "util", "*"]
 }, import {
 "namespace": ["java", "util", "function", "Function"]
 }, import {
 "namespace": ["java", "util", "stream", "Collectors"]
 }, import {
 "namespace": ["java", "util", "stream", "Stream"]
 }, record {
 "name": "MapNode",
 "interface": symbol {
  "value": "Node"
  },
 "modifiers": [modifier {
  "content": "public"
  }],
 "params": [definition {
  "name": "type",
  "returns": generic {
   "base": symbol {
    "value": "Optional"
    },
   "children": [symbol {
    "value": "String"
    }]
   }
  }, definition {
  "name": "strings",
  "returns": generic {
   "base": symbol {
    "value": "Map"
    },
   "children": [symbol {
    "value": "String"
    }, symbol {
    "value": "String"
    }]
   }
  }, definition {
  "name": "stringLists",
  "returns": generic {
   "base": symbol {
    "value": "Map"
    },
   "children": [symbol {
    "value": "String"
    }, generic {
    "base": symbol {
     "value": "List"
     },
    "children": [symbol {
     "value": "String"
     }]
    }]
   }
  }, definition {
  "name": "nodes",
  "returns": generic {
   "base": symbol {
    "value": "Map"
    },
   "children": [symbol {
    "value": "String"
    }, symbol {
    "value": "Node"
    }]
   }
  }, definition {
  "name": "nodeLists",
  "returns": generic {
   "base": symbol {
    "value": "Map"
    },
   "children": [symbol {
    "value": "String"
    }, generic {
    "base": symbol {
     "value": "List"
     },
    "children": [symbol {
     "value": "Node"
     }]
    }]
   }
  }],
 "children": [method {
  "name": "MapNode",
  "returns": symbol {
   "value": "public"
   },
  "children": [symbol {
   "content": "this(Optional.empty(), Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap());"
   }]
  }, method {
  "name": "formatLine",
  "returns": symbol {
   "value": "String"
   },
  "modifiers": [modifier {
   "content": "private"
   }, modifier {
   "content": "static"
   }],
  "params": [definition {
   "name": "depth",
   "returns": symbol {
    "value": "int"
    }
   }, definition {
   "name": "key",
   "returns": symbol {
    "value": "String"
    }
   }, definition {
   "name": "value",
   "returns": symbol {
    "value": "String"
    }
   }],
  "children": [return {
   "value": symbol {
    "content": ""\n" + " ".repeat(depth) + "\"" + key + "\": " + value"
    }
   }]
  }, method {
  "name": "formatNodeList",
  "returns": symbol {
   "value": "String"
   },
  "modifiers": [modifier {
   "content": "private"
   }, modifier {
   "content": "static"
   }],
  "params": [definition {
   "name": "depth",
   "returns": symbol {
    "value": "int"
    }
   }, definition {
   "name": "values",
   "returns": generic {
    "base": symbol {
     "value": "List"
     },
    "children": [symbol {
     "value": "Node"
     }]
    }
   }],
  "children": [return {
   "value": invocation {
    "caller": access {
     "child": "stream",
     "parent": symbol {
      "content": "values"
      }
     },
    "arguments": [invocation {
     "caller": access {
      "child": "map",
      "parent": symbol {
       "content": ")
                "
       }
      },
     "arguments": [symbol {
      "content": "node -> node.format(depth + 1))
                .collect(Collectors.joining(", ", "[", "]""
      }]
     }]
    }
   }]
  }, method {
  "name": "retype",
  "returns": symbol {
   "value": "Node"
   },
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "type",
   "returns": symbol {
    "value": "String"
    }
   }],
  "children": [return {
   "value": invocation {
    "caller": symbol {
     "content": "new MapNode"
     },
    "arguments": [invocation {
     "caller": access {
      "child": "of",
      "parent": symbol {
       "content": "Optional"
       }
      },
     "arguments": [symbol {
      "content": "type"
      }]
     }, symbol {
     "content": " strings"
     }, symbol {
     "content": " stringLists"
     }, symbol {
     "content": " nodes"
     }, symbol {
     "content": " nodeLists"
     }]
    }
   }]
  }, method {
  "name": "is",
  "returns": symbol {
   "value": "boolean"
   },
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "type",
   "returns": symbol {
    "value": "String"
    }
   }],
  "children": [return {
   "value": invocation {
    "caller": access {
     "child": "filter",
     "parent": access {
      "child": "type",
      "parent": symbol {
       "content": "this"
       }
      }
     },
    "arguments": [symbol {
     "content": "value -> value.equals(type)).isPresent("
     }]
    }
   }]
  }, method {
  "name": "withString",
  "returns": symbol {
   "value": "Node"
   },
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "value": "String"
    }
   }, definition {
   "name": "propertyValue",
   "returns": symbol {
    "value": "String"
    }
   }],
  "children": [symbol {
   "content": "final var copy = new HashMap<>(strings);"
   }, symbol {
   "content": "copy.put(propertyKey, propertyValue);"
   }, return {
   "value": invocation {
    "caller": symbol {
     "content": "new MapNode"
     },
    "arguments": [symbol {
     "content": "type"
     }, symbol {
     "content": " copy"
     }, symbol {
     "content": " stringLists"
     }, symbol {
     "content": " nodes"
     }, symbol {
     "content": " nodeLists"
     }]
    }
   }]
  }, method {
  "name": "findString",
  "returns": generic {
   "base": symbol {
    "value": "Optional"
    },
   "children": [symbol {
    "value": "String"
    }]
   },
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "value": "String"
    }
   }],
  "children": [return {
   "value": invocation {
    "caller": access {
     "child": "ofNullable",
     "parent": symbol {
      "content": "Optional"
      }
     },
    "arguments": [invocation {
     "caller": access {
      "child": "get",
      "parent": symbol {
       "content": "strings"
       }
      },
     "arguments": [symbol {
      "content": "propertyKey"
      }]
     }]
    }
   }]
  }, method {
  "name": "mapNodeList",
  "returns": generic {
   "base": symbol {
    "value": "Optional"
    },
   "children": [symbol {
    "value": "Node"
    }]
   },
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "value": "String"
    }
   }, definition {
   "name": "mapper",
   "returns": generic {
    "base": symbol {
     "value": "Function"
     },
    "children": [generic {
     "base": symbol {
      "value": "List"
      },
     "children": [symbol {
      "value": "Node"
      }]
     }, generic {
     "base": symbol {
      "value": "List"
      },
     "children": [symbol {
      "value": "Node"
      }]
     }]
    }
   }],
  "children": [return {
   "value": invocation {
    "caller": symbol {
     "content": "findNodeList"
     },
    "arguments": [invocation {
     "caller": access {
      "child": "map",
      "parent": symbol {
       "content": "propertyKey)"
       }
      },
     "arguments": [symbol {
      "content": "mapper).map(value -> withNodeList(propertyKey, value"
      }]
     }]
    }
   }]
  }, method {
  "name": "streamNodeLists",
  "returns": generic {
   "base": symbol {
    "value": "Stream"
    },
   "children": [generic {
    "base": symbol {
     "value": "Tuple"
     },
    "children": [symbol {
     "value": "String"
     }, generic {
     "base": symbol {
      "value": "List"
      },
     "children": [symbol {
      "value": "Node"
      }]
     }]
    }]
   },
  "modifiers": [modifier {
   "content": "public"
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "children": [return {
   "value": invocation {
    "caller": access {
     "child": "entrySet",
     "parent": symbol {
      "content": "nodeLists"
      }
     },
    "arguments": [invocation {
     "caller": access {
      "child": "stream",
      "parent": symbol {
       "content": ")"
       }
      },
     "arguments": [invocation {
      "caller": access {
       "child": "map",
       "parent": symbol {
        "content": ")"
        }
       },
      "arguments": [symbol {
       "content": "pair -> new Tuple<>(pair.getKey(), pair.getValue("
       }]
      }]
     }]
    }
   }]
  }, method {
  "name": "withNode",
  "returns": symbol {
   "value": "Node"
   },
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "value": "String"
    }
   }, definition {
   "name": "propertyValue",
   "returns": symbol {
    "value": "Node"
    }
   }],
  "children": [symbol {
   "content": "final var copy = new HashMap<>(nodes);"
   }, symbol {
   "content": "copy.put(propertyKey, propertyValue);"
   }, return {
   "value": invocation {
    "caller": symbol {
     "content": "new MapNode"
     },
    "arguments": [symbol {
     "content": "type"
     }, symbol {
     "content": " strings"
     }, symbol {
     "content": " stringLists"
     }, symbol {
     "content": " copy"
     }, symbol {
     "content": " nodeLists"
     }]
    }
   }]
  }, method {
  "name": "findNode",
  "returns": generic {
   "base": symbol {
    "value": "Optional"
    },
   "children": [symbol {
    "value": "Node"
    }]
   },
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "value": "String"
    }
   }],
  "children": [return {
   "value": invocation {
    "caller": access {
     "child": "ofNullable",
     "parent": symbol {
      "content": "Optional"
      }
     },
    "arguments": [invocation {
     "caller": access {
      "child": "get",
      "parent": symbol {
       "content": "nodes"
       }
      },
     "arguments": [symbol {
      "content": "propertyKey"
      }]
     }]
    }
   }]
  }, method {
  "name": "streamNodes",
  "returns": generic {
   "base": symbol {
    "value": "Stream"
    },
   "children": [generic {
    "base": symbol {
     "value": "Tuple"
     },
    "children": [symbol {
     "value": "String"
     }, symbol {
     "value": "Node"
     }]
    }]
   },
  "modifiers": [modifier {
   "content": "public"
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "children": [return {
   "value": invocation {
    "caller": access {
     "child": "entrySet",
     "parent": symbol {
      "content": "nodes"
      }
     },
    "arguments": [invocation {
     "caller": access {
      "child": "stream",
      "parent": symbol {
       "content": ")"
       }
      },
     "arguments": [invocation {
      "caller": access {
       "child": "map",
       "parent": symbol {
        "content": ")"
        }
       },
      "arguments": [symbol {
       "content": "entry -> new Tuple<>(entry.getKey(), entry.getValue("
       }]
      }]
     }]
    }
   }]
  }, method {
  "name": "hasNode",
  "returns": symbol {
   "value": "boolean"
   },
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "node",
   "returns": symbol {
    "value": "String"
    }
   }],
  "children": [return {
   "value": invocation {
    "caller": access {
     "child": "containsKey",
     "parent": symbol {
      "content": "nodes"
      }
     },
    "arguments": [symbol {
     "content": "node"
     }]
    }
   }]
  }, method {
  "name": "withStringList",
  "returns": symbol {
   "value": "Node"
   },
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "value": "String"
    }
   }, definition {
   "name": "propertyValues",
   "returns": generic {
    "base": symbol {
     "value": "List"
     },
    "children": [symbol {
     "value": "String"
     }]
    }
   }],
  "children": [symbol {
   "content": "final var copy = new HashMap<>(stringLists);"
   }, symbol {
   "content": "copy.put(propertyKey, propertyValues);"
   }, return {
   "value": invocation {
    "caller": symbol {
     "content": "new MapNode"
     },
    "arguments": [symbol {
     "content": "type"
     }, symbol {
     "content": " strings"
     }, symbol {
     "content": " copy"
     }, symbol {
     "content": " nodes"
     }, symbol {
     "content": " nodeLists"
     }]
    }
   }]
  }, method {
  "name": "findStringList",
  "returns": generic {
   "base": symbol {
    "value": "Optional"
    },
   "children": [generic {
    "base": symbol {
     "value": "List"
     },
    "children": [symbol {
     "value": "String"
     }]
    }]
   },
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "value": "String"
    }
   }],
  "children": [return {
   "value": invocation {
    "caller": access {
     "child": "ofNullable",
     "parent": symbol {
      "content": "Optional"
      }
     },
    "arguments": [invocation {
     "caller": access {
      "child": "get",
      "parent": symbol {
       "content": "stringLists"
       }
      },
     "arguments": [symbol {
      "content": "propertyKey"
      }]
     }]
    }
   }]
  }, method {
  "name": "streamStrings",
  "returns": generic {
   "base": symbol {
    "value": "Stream"
    },
   "children": [generic {
    "base": symbol {
     "value": "Tuple"
     },
    "children": [symbol {
     "value": "String"
     }, symbol {
     "value": "String"
     }]
    }]
   },
  "modifiers": [modifier {
   "content": "public"
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "children": [return {
   "value": invocation {
    "caller": access {
     "child": "entrySet",
     "parent": symbol {
      "content": "strings"
      }
     },
    "arguments": [invocation {
     "caller": access {
      "child": "stream",
      "parent": symbol {
       "content": ")"
       }
      },
     "arguments": [invocation {
      "caller": access {
       "child": "map",
       "parent": symbol {
        "content": ")"
        }
       },
      "arguments": [symbol {
       "content": "pair -> new Tuple<>(pair.getKey(), pair.getValue("
       }]
      }]
     }]
    }
   }]
  }, method {
  "name": "findNodeList",
  "returns": generic {
   "base": symbol {
    "value": "Optional"
    },
   "children": [generic {
    "base": symbol {
     "value": "List"
     },
    "children": [symbol {
     "value": "Node"
     }]
    }]
   },
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "value": "String"
    }
   }],
  "children": [return {
   "value": invocation {
    "caller": access {
     "child": "ofNullable",
     "parent": symbol {
      "content": "Optional"
      }
     },
    "arguments": [invocation {
     "caller": access {
      "child": "get",
      "parent": symbol {
       "content": "nodeLists"
       }
      },
     "arguments": [symbol {
      "content": "propertyKey"
      }]
     }]
    }
   }]
  }, method {
  "name": "withNodeList",
  "returns": symbol {
   "value": "Node"
   },
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "value": "String"
    }
   }, definition {
   "name": "values",
   "returns": generic {
    "base": symbol {
     "value": "List"
     },
    "children": [symbol {
     "value": "Node"
     }]
    }
   }],
  "children": [symbol {
   "content": "final var copy = new HashMap<>(nodeLists);"
   }, symbol {
   "content": "copy.put(propertyKey, values);"
   }, return {
   "value": invocation {
    "caller": symbol {
     "content": "new MapNode"
     },
    "arguments": [symbol {
     "content": "type"
     }, symbol {
     "content": " strings"
     }, symbol {
     "content": " stringLists"
     }, symbol {
     "content": " nodes"
     }, symbol {
     "content": " copy"
     }]
    }
   }]
  }, method {
  "name": "toString",
  "returns": symbol {
   "value": "String"
   },
  "modifiers": [modifier {
   "content": "public"
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "children": [return {
   "value": invocation {
    "caller": symbol {
     "content": "format"
     },
    "arguments": [symbol {
     "content": "0"
     }]
    }
   }]
  }, method {
  "name": "format",
  "returns": symbol {
   "value": "String"
   },
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "depth",
   "returns": symbol {
    "value": "int"
    }
   }],
  "children": [symbol {
   "content": "final var typeString = type.map(value -> value + " ").orElse("");"
   }, symbol {
   "content": "final var joinedStrings = formatMap(depth, strings, value -> "\"" + value + "\"");"
   }, symbol {
   "content": "final var joinedStringLists = formatMap(depth, stringLists, this::formatStringList);"
   }, symbol {
   "content": "final var joinedNodes = formatMap(depth, nodes, value -> value.format(depth + 1));"
   }, symbol {
   "content": "final var joinedNodeLists = formatMap(depth, nodeLists, values -> formatNodeList(depth, values));"
   }, symbol {
   "content": "final List<String> list = new ArrayList<>();"
   }, symbol {
   "content": "if (!joinedStrings.isEmpty()) list.add(joinedStrings);"
   }, symbol {
   "content": "if (!joinedStringLists.isEmpty()) list.add(joinedStringLists);"
   }, symbol {
   "content": "if (!joinedNodes.isEmpty()) list.add(joinedNodes);"
   }, symbol {
   "content": "if (!joinedNodeLists.isEmpty()) list.add(joinedNodeLists);"
   }, symbol {
   "content": "final var joined = String.join(",", list);"
   }, symbol {
   "content": "return typeString + "{" + joined + "\n" + " ".repeat(depth) + "}"
   }, symbol {
   "content": "";"
   }]
  }, method {
  "name": "formatStringList",
  "returns": symbol {
   "value": "String"
   },
  "modifiers": [modifier {
   "content": "private"
   }],
  "params": [definition {
   "name": "list",
   "returns": generic {
    "base": symbol {
     "value": "List"
     },
    "children": [symbol {
     "value": "String"
     }]
    }
   }],
  "children": [return {
   "value": invocation {
    "caller": access {
     "child": "stream",
     "parent": symbol {
      "content": "list"
      }
     },
    "arguments": [invocation {
     "caller": access {
      "child": "map",
      "parent": symbol {
       "content": ")
                "
       }
      },
     "arguments": [symbol {
      "content": "inner -> "\"" + inner + "\"")
                .collect(Collectors.joining(", ", "[", "]""
      }]
     }]
    }
   }]
  }, method {
  "name": "formatMap",
  "type-params": "T",
  "returns": symbol {
   "value": "String"
   },
  "modifiers": [modifier {
   "content": "private"
   }],
  "params": [definition {
   "name": "depth",
   "returns": symbol {
    "value": "int"
    }
   }, definition {
   "name": "set",
   "returns": generic {
    "base": symbol {
     "value": "Map"
     },
    "children": [symbol {
     "value": "String"
     }, symbol {
     "value": "T"
     }]
    }
   }, definition {
   "name": "format",
   "returns": generic {
    "base": symbol {
     "value": "Function"
     },
    "children": [symbol {
     "value": "T"
     }, symbol {
     "value": "String"
     }]
    }
   }],
  "children": [return {
   "value": invocation {
    "caller": access {
     "child": "entrySet",
     "parent": symbol {
      "content": "set"
      }
     },
    "arguments": [invocation {
     "caller": access {
      "child": "stream",
      "parent": symbol {
       "content": ")
                "
       }
      },
     "arguments": [symbol {
      "content": ")
                .map(entry -> formatLine(depth, entry.getKey(), format.apply(entry.getValue())))
                .collect(Collectors.joining(",""
      }]
     }]
    }
   }]
  }, method {
  "name": "streamStringLists",
  "returns": generic {
   "base": symbol {
    "value": "Stream"
    },
   "children": [generic {
    "base": symbol {
     "value": "Tuple"
     },
    "children": [symbol {
     "value": "String"
     }, generic {
     "base": symbol {
      "value": "List"
      },
     "children": [symbol {
      "value": "String"
      }]
     }]
    }]
   },
  "modifiers": [modifier {
   "content": "public"
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "children": [return {
   "value": invocation {
    "caller": access {
     "child": "entrySet",
     "parent": symbol {
      "content": "stringLists"
      }
     },
    "arguments": [invocation {
     "caller": access {
      "child": "stream",
      "parent": symbol {
       "content": ")
                "
       }
      },
     "arguments": [invocation {
      "caller": access {
       "child": "map",
       "parent": symbol {
        "content": ")
                "
        }
       },
      "arguments": [symbol {
       "content": "entry -> new Tuple<>(entry.getKey(), entry.getValue("
       }]
      }]
     }]
    }
   }]
  }, method {
  "name": "mapStringList",
  "returns": generic {
   "base": symbol {
    "value": "Optional"
    },
   "children": [symbol {
    "value": "Node"
    }]
   },
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "value": "String"
    }
   }, definition {
   "name": "mapper",
   "returns": generic {
    "base": symbol {
     "value": "Function"
     },
    "children": [generic {
     "base": symbol {
      "value": "List"
      },
     "children": [symbol {
      "value": "String"
      }]
     }, generic {
     "base": symbol {
      "value": "List"
      },
     "children": [symbol {
      "value": "String"
      }]
     }]
    }
   }],
  "children": [return {
   "value": invocation {
    "caller": symbol {
     "content": "findStringList"
     },
    "arguments": [invocation {
     "caller": access {
      "child": "map",
      "parent": symbol {
       "content": "propertyKey)"
       }
      },
     "arguments": [symbol {
      "content": "mapper).map(list -> withStringList(propertyKey, list"
      }]
     }]
    }
   }]
  }, method {
  "name": "merge",
  "returns": symbol {
   "value": "Node"
   },
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "other",
   "returns": symbol {
    "value": "Node"
    }
   }],
  "children": [symbol {
   "content": "final var stringsCopy = new HashMap<>(strings);"
   }, symbol {
   "content": "other.streamStrings().forEach(tuple -> stringsCopy.put(tuple.left(), tuple.right()));"
   }, symbol {
   "content": "final var stringListCopy = new HashMap<>(stringLists);"
   }, symbol {
   "content": "other.streamStringLists().forEach(tuple -> stringListCopy.put(tuple.left(), tuple.right()));"
   }, symbol {
   "content": "final var nodesCopy = new HashMap<>(nodes);"
   }, symbol {
   "content": "other.streamNodes().forEach(tuple -> nodesCopy.put(tuple.left(), tuple.right()));"
   }, symbol {
   "content": "final var nodeListCopy = new HashMap<>(nodeLists);"
   }, symbol {
   "content": "other.streamNodeLists().forEach(tuple -> nodeListCopy.put(tuple.left(), tuple.right()));"
   }, return {
   "value": invocation {
    "caller": symbol {
     "content": "new MapNode"
     },
    "arguments": [symbol {
     "content": "type"
     }, symbol {
     "content": " stringsCopy"
     }, symbol {
     "content": " stringListCopy"
     }, symbol {
     "content": " nodesCopy"
     }, symbol {
     "content": " nodeListCopy"
     }]
    }
   }]
  }]
 }]
}