{
"children": [package {
 "namespace": ["magma", "app", "compile"]
 }, import {
 "namespace": ["magma", "api", "Tuple"]
 }, import {
 "namespace": ["java", "util", "*"]
 }, import {
 "namespace": ["java", "util", "function", "Function"]
 }, import {
 "namespace": ["java", "util", "stream", "Collectors"]
 }, import {
 "namespace": ["java", "util", "stream", "Stream"]
 }, record {
 "name": "MapNode",
 "modifiers": ["public"],
 "interface": symbol {
  "type": "Node"
  },
 "children": [method {
  "name": "MapNode",
  "content": " {
        this(Optional.empty(), Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap());
    }",
  "returns": symbol {
   "type": "public"
   }
  }, method {
  "name": "formatLine",
  "content": " {
        return "\n" + " ".repeat(depth) + "\"" + key + "\": " + value;
    }",
  "params": content {
   "params": "int depth, String key, String value"
   },
  "returns": symbol {
   "type": "private static String"
   }
  }, method {
  "name": "formatNodeList",
  "content": " {
        return values.stream()
                .map(node -> node.format(depth + 1))
                .collect(Collectors.joining(", ", "[", "]"));
    }",
  "params": content {
   "params": "int depth, List<Node> values"
   },
  "returns": symbol {
   "type": "private static String"
   }
  }, method {
  "name": "retype",
  "content": " {
        return new MapNode(Optional.of(type), strings, stringLists, nodes, nodeLists);
    }",
  "params": content {
   "params": "String type"
   },
  "returns": symbol {
   "type": "@Override
    public Node"
   }
  }, method {
  "name": "is",
  "content": " {
        return this.type.filter(value -> value.equals(type)).isPresent();
    }",
  "params": content {
   "params": "String type"
   },
  "returns": symbol {
   "type": "@Override
    public boolean"
   }
  }, method {
  "name": "withString",
  "content": " {
        final var copy = new HashMap<>(strings);
        copy.put(propertyKey, propertyValue);
        return new MapNode(type, copy, stringLists, nodes, nodeLists);
    }",
  "params": content {
   "params": "String propertyKey, String propertyValue"
   },
  "returns": symbol {
   "type": "@Override
    public Node"
   }
  }, method {
  "name": "findString",
  "content": " {
        return Optional.ofNullable(strings.get(propertyKey));
    }",
  "params": content {
   "params": "String propertyKey"
   },
  "returns": generic {
   "base": symbol {
    "type": "@Override
    public Optional"
    },
   "children": [symbol {
    "type": "String"
    }]
   }
  }, method {
  "name": "mapNodeList",
  "content": " {
        return findNodeList(propertyKey).map(mapper).map(value -> withNodeList(propertyKey, value));
    }",
  "params": content {
   "params": "String propertyKey, Function<List<Node>, List<Node>> mapper"
   },
  "returns": generic {
   "base": symbol {
    "type": "@Override
    public Optional"
    },
   "children": [symbol {
    "type": "Node"
    }]
   }
  }, method {
  "name": "streamNodeLists",
  "content": " {
        return nodeLists.entrySet().stream().map(pair -> new Tuple<>(pair.getKey(), pair.getValue()));
    }",
  "returns": generic {
   "base": symbol {
    "type": "@Override
    public Stream"
    },
   "children": [generic {
    "base": symbol {
     "type": "Tuple"
     },
    "children": [symbol {
     "type": "String"
     }, generic {
     "base": symbol {
      "type": "List"
      },
     "children": [symbol {
      "type": "Node"
      }]
     }]
    }]
   }
  }, method {
  "name": "withNode",
  "content": " {
        final var copy = new HashMap<>(nodes);
        copy.put(propertyKey, propertyValue);
        return new MapNode(type, strings, stringLists, copy, nodeLists);
    }",
  "params": content {
   "params": "String propertyKey, Node propertyValue"
   },
  "returns": symbol {
   "type": "@Override
    public Node"
   }
  }, method {
  "name": "findNode",
  "content": " {
        return Optional.ofNullable(nodes.get(propertyKey));
    }",
  "params": content {
   "params": "String propertyKey"
   },
  "returns": generic {
   "base": symbol {
    "type": "@Override
    public Optional"
    },
   "children": [symbol {
    "type": "Node"
    }]
   }
  }, method {
  "name": "streamNodes",
  "content": " {
        return nodes.entrySet().stream().map(entry -> new Tuple<>(entry.getKey(), entry.getValue()));
    }",
  "returns": generic {
   "base": symbol {
    "type": "@Override
    public Stream"
    },
   "children": [generic {
    "base": symbol {
     "type": "Tuple"
     },
    "children": [symbol {
     "type": "String"
     }, symbol {
     "type": "Node"
     }]
    }]
   }
  }, method {
  "name": "hasNode",
  "content": " {
        return nodes.containsKey(node);
    }",
  "params": content {
   "params": "String node"
   },
  "returns": symbol {
   "type": "@Override
    public boolean"
   }
  }, method {
  "name": "withStringList",
  "content": " {
        final var copy = new HashMap<>(stringLists);
        copy.put(propertyKey, propertyValues);
        return new MapNode(type, strings, copy, nodes, nodeLists);
    }",
  "params": content {
   "params": "String propertyKey, List<String> propertyValues"
   },
  "returns": symbol {
   "type": "@Override
    public Node"
   }
  }, method {
  "name": "findStringList",
  "content": " {
        return Optional.ofNullable(stringLists.get(propertyKey));
    }",
  "params": content {
   "params": "String propertyKey"
   },
  "returns": generic {
   "base": symbol {
    "type": "@Override
    public Optional"
    },
   "children": [generic {
    "base": symbol {
     "type": "List"
     },
    "children": [symbol {
     "type": "String"
     }]
    }]
   }
  }, method {
  "name": "streamStrings",
  "content": " {
        return strings.entrySet().stream().map(pair -> new Tuple<>(pair.getKey(), pair.getValue()));
    }",
  "returns": generic {
   "base": symbol {
    "type": "@Override
    public Stream"
    },
   "children": [generic {
    "base": symbol {
     "type": "Tuple"
     },
    "children": [symbol {
     "type": "String"
     }, symbol {
     "type": "String"
     }]
    }]
   }
  }, method {
  "name": "findNodeList",
  "content": " {
        return Optional.ofNullable(nodeLists.get(propertyKey));
    }",
  "params": content {
   "params": "String propertyKey"
   },
  "returns": generic {
   "base": symbol {
    "type": "@Override
    public Optional"
    },
   "children": [generic {
    "base": symbol {
     "type": "List"
     },
    "children": [symbol {
     "type": "Node"
     }]
    }]
   }
  }, method {
  "name": "withNodeList",
  "content": " {
        final var copy = new HashMap<>(nodeLists);
        copy.put(propertyKey, values);
        return new MapNode(type, strings, stringLists, nodes, copy);
    }",
  "params": content {
   "params": "String propertyKey, List<Node> values"
   },
  "returns": symbol {
   "type": "@Override
    public Node"
   }
  }, method {
  "name": "toString",
  "content": " {
        return format(0);
    }",
  "returns": symbol {
   "type": "@Override
    public String"
   }
  }, method {
  "name": "format",
  "content": " {
        final var typeString = type.map(value -> value + " ").orElse("");

        final var joinedStrings = formatMap(depth, strings, value -> "\"" + value + "\"");
        final var joinedStringLists = formatMap(depth, stringLists, this::formatStringList);
        final var joinedNodes = formatMap(depth, nodes, value -> value.format(depth + 1));
        final var joinedNodeLists = formatMap(depth, nodeLists, values -> formatNodeList(depth, values));

        final List<String> list = new ArrayList<>();

        if (!joinedStrings.isEmpty()) list.add(joinedStrings);
        if (!joinedStringLists.isEmpty()) list.add(joinedStringLists);

        if (!joinedNodes.isEmpty()) list.add(joinedNodes);
        if (!joinedNodeLists.isEmpty()) list.add(joinedNodeLists);

        final var joined = String.join(",", list);
        return typeString + "{" + joined + "\n" + " ".repeat(depth) + "}";
    }",
  "params": content {
   "params": "int depth"
   },
  "returns": symbol {
   "type": "@Override
    public String"
   }
  }, method {
  "name": "formatStringList",
  "content": " {
        return list.stream()
                .map(inner -> "\"" + inner + "\"")
                .collect(Collectors.joining(", ", "[", "]"));
    }",
  "params": content {
   "params": "List<String> list"
   },
  "returns": symbol {
   "type": "private String"
   }
  }, method {
  "name": "formatMap",
  "content": " {
        return set.entrySet()
                .stream()
                .map(entry -> formatLine(depth, entry.getKey(), format.apply(entry.getValue())))
                .collect(Collectors.joining(","));
    }",
  "params": content {
   "params": "int depth, Map<String, T> set, Function<T, String> format"
   },
  "returns": symbol {
   "type": "private <T> String"
   }
  }, method {
  "name": "streamStringLists",
  "content": " {
        return stringLists.entrySet()
                .stream()
                .map(entry -> new Tuple<>(entry.getKey(), entry.getValue()));
    }",
  "returns": generic {
   "base": symbol {
    "type": "@Override
    public Stream"
    },
   "children": [generic {
    "base": symbol {
     "type": "Tuple"
     },
    "children": [symbol {
     "type": "String"
     }, generic {
     "base": symbol {
      "type": "List"
      },
     "children": [symbol {
      "type": "String"
      }]
     }]
    }]
   }
  }, method {
  "name": "mapStringList",
  "content": " {
        return findStringList(propertyKey).map(mapper).map(list -> withStringList(propertyKey, list));
    }",
  "params": content {
   "params": "String propertyKey, Function<List<String>, List<String>> mapper"
   },
  "returns": generic {
   "base": symbol {
    "type": "@Override
    public Optional"
    },
   "children": [symbol {
    "type": "Node"
    }]
   }
  }, method {
  "name": "merge",
  "content": " {
        final var stringsCopy = new HashMap<>(strings);
        other.streamStrings().forEach(tuple -> stringsCopy.put(tuple.left(), tuple.right()));

        final var stringListCopy = new HashMap<>(stringLists);
        other.streamStringLists().forEach(tuple -> stringListCopy.put(tuple.left(), tuple.right()));

        final var nodesCopy = new HashMap<>(nodes);
        other.streamNodes().forEach(tuple -> nodesCopy.put(tuple.left(), tuple.right()));

        final var nodeListCopy = new HashMap<>(nodeLists);
        other.streamNodeLists().forEach(tuple -> nodeListCopy.put(tuple.left(), tuple.right()));

        return new MapNode(type, stringsCopy, stringListCopy, nodesCopy, nodeListCopy);
    }",
  "params": content {
   "params": "Node other"
   },
  "returns": symbol {
   "type": "@Override
    public Node"
   }
  }],
 "params": [definition {
  "type": "
        Optional<String>",
  "name": "type"
  }, definition {
  "type": "
        Map<String, String>",
  "name": "strings"
  }, definition {
  "type": "

        Map<String, List<String>>",
  "name": "stringLists"
  }, definition {
  "type": " Map<String, Node>",
  "name": "nodes"
  }, definition {
  "type": " Map<String,
        List<Node>>",
  "name": "nodeLists"
  }]
 }]
}