{
"children": [package {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }]
 }, import {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "api"
  }, segment {
  "segment": "Tuple"
  }]
 }, import {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "java"
  }, segment {
  "segment": "NativeListCollector"
  }]
 }, import {
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "HashMap"
  }]
 }, import {
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "List"
  }]
 }, import {
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "stream"
  }, segment {
  "segment": "Stream"
  }]
 }, class {
 "name": "MapNodes ",
 "children": [method {
  "name": "merge0",
  "returns": symbol {
   "namespace": [segment {
    "segment": "MapNode"
    }]
   },
  "children": [declaration {
   "name": "stringsCopy",
   "caller": symbol {
    "content": "HashMap"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "type-arguments": [symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }, symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, invocation {
   "caller": property-access {
    "child": "forEach",
    "parent": invocation {
     "caller": property-access {
      "child": "concat",
      "parent": symbol {
       "content": "Stream"
       }
      },
     "arguments": [invocation {
      "caller": property-access {
       "child": "stream",
       "parent": invocation {
        "caller": property-access {
         "child": "collect",
         "parent": invocation {
          "caller": property-access {
           "child": "streamStrings",
           "parent": symbol {
            "content": "self"
            }
           }
          }
         },
        "arguments": [construction {
         "caller": symbol {
          "content": "NativeListCollector"
          },
         "type-arguments": [generic {
          "base": symbol {
           "namespace": [segment {
            "segment": "Tuple"
            }]
           },
          "children": [symbol {
           "namespace": [segment {
            "segment": "String"
            }]
           }, symbol {
           "namespace": [segment {
            "segment": "String"
            }]
           }]
          }]
         }]
        }
       }
      }, invocation {
      "caller": property-access {
       "child": "stream",
       "parent": invocation {
        "caller": property-access {
         "child": "collect",
         "parent": invocation {
          "caller": property-access {
           "child": "streamStrings",
           "parent": symbol {
            "content": "other"
            }
           }
          }
         },
        "arguments": [construction {
         "caller": symbol {
          "content": "NativeListCollector"
          },
         "type-arguments": [generic {
          "base": symbol {
           "namespace": [segment {
            "segment": "Tuple"
            }]
           },
          "children": [symbol {
           "namespace": [segment {
            "segment": "String"
            }]
           }, symbol {
           "namespace": [segment {
            "segment": "String"
            }]
           }]
          }]
         }]
        }
       }
      }]
     }
    },
   "arguments": [invocation {
    "caller": property-access {
     "child": "put",
     "parent": lambda {
      "before-arrow": "tuple ",
      "after-arrow": " stringsCopy"
      }
     },
    "arguments": [invocation {
     "caller": property-access {
      "child": "left",
      "parent": symbol {
       "content": "tuple"
       }
      }
     }, invocation {
     "caller": property-access {
      "child": "right",
      "parent": symbol {
       "content": "tuple"
       }
      }
     }]
    }]
   }, declaration {
   "name": "stringListCopy",
   "caller": symbol {
    "content": "HashMap"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "type-arguments": [symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }, generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "List"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "String"
      }]
     }]
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, invocation {
   "caller": property-access {
    "child": "forEach",
    "parent": invocation {
     "caller": property-access {
      "child": "concat",
      "parent": symbol {
       "content": "Stream"
       }
      },
     "arguments": [invocation {
      "caller": property-access {
       "child": "stream",
       "parent": invocation {
        "caller": property-access {
         "child": "collect",
         "parent": invocation {
          "caller": property-access {
           "child": "streamStringLists",
           "parent": symbol {
            "content": "self"
            }
           }
          }
         },
        "arguments": [construction {
         "caller": symbol {
          "content": "NativeListCollector"
          },
         "type-arguments": [generic {
          "base": symbol {
           "namespace": [segment {
            "segment": "Tuple"
            }]
           },
          "children": [symbol {
           "namespace": [segment {
            "segment": "String"
            }]
           }, generic {
           "base": symbol {
            "namespace": [segment {
             "segment": "List"
             }]
            },
           "children": [symbol {
            "namespace": [segment {
             "segment": "String"
             }]
            }]
           }]
          }]
         }]
        }
       }
      }, invocation {
      "caller": property-access {
       "child": "stream",
       "parent": invocation {
        "caller": property-access {
         "child": "collect",
         "parent": invocation {
          "caller": property-access {
           "child": "streamStringLists",
           "parent": symbol {
            "content": "other"
            }
           }
          }
         },
        "arguments": [construction {
         "caller": symbol {
          "content": "NativeListCollector"
          },
         "type-arguments": [generic {
          "base": symbol {
           "namespace": [segment {
            "segment": "Tuple"
            }]
           },
          "children": [symbol {
           "namespace": [segment {
            "segment": "String"
            }]
           }, generic {
           "base": symbol {
            "namespace": [segment {
             "segment": "List"
             }]
            },
           "children": [symbol {
            "namespace": [segment {
             "segment": "String"
             }]
            }]
           }]
          }]
         }]
        }
       }
      }]
     }
    },
   "arguments": [invocation {
    "caller": property-access {
     "child": "put",
     "parent": lambda {
      "before-arrow": "tuple ",
      "after-arrow": " stringListCopy"
      }
     },
    "arguments": [invocation {
     "caller": property-access {
      "child": "left",
      "parent": symbol {
       "content": "tuple"
       }
      }
     }, invocation {
     "caller": property-access {
      "child": "right",
      "parent": symbol {
       "content": "tuple"
       }
      }
     }]
    }]
   }, declaration {
   "name": "nodesCopy",
   "caller": symbol {
    "content": "HashMap"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "type-arguments": [symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }, symbol {
    "namespace": [segment {
     "segment": "Node"
     }]
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, invocation {
   "caller": property-access {
    "child": "forEach",
    "parent": invocation {
     "caller": property-access {
      "child": "concat",
      "parent": symbol {
       "content": "Stream"
       }
      },
     "arguments": [invocation {
      "caller": property-access {
       "child": "stream",
       "parent": invocation {
        "caller": property-access {
         "child": "collect",
         "parent": invocation {
          "caller": property-access {
           "child": "streamNodes",
           "parent": symbol {
            "content": "self"
            }
           }
          }
         },
        "arguments": [construction {
         "caller": symbol {
          "content": "NativeListCollector"
          },
         "type-arguments": [generic {
          "base": symbol {
           "namespace": [segment {
            "segment": "Tuple"
            }]
           },
          "children": [symbol {
           "namespace": [segment {
            "segment": "String"
            }]
           }, symbol {
           "namespace": [segment {
            "segment": "Node"
            }]
           }]
          }]
         }]
        }
       }
      }, invocation {
      "caller": property-access {
       "child": "stream",
       "parent": invocation {
        "caller": property-access {
         "child": "collect",
         "parent": invocation {
          "caller": property-access {
           "child": "streamNodes",
           "parent": symbol {
            "content": "other"
            }
           }
          }
         },
        "arguments": [construction {
         "caller": symbol {
          "content": "NativeListCollector"
          },
         "type-arguments": [generic {
          "base": symbol {
           "namespace": [segment {
            "segment": "Tuple"
            }]
           },
          "children": [symbol {
           "namespace": [segment {
            "segment": "String"
            }]
           }, symbol {
           "namespace": [segment {
            "segment": "Node"
            }]
           }]
          }]
         }]
        }
       }
      }]
     }
    },
   "arguments": [invocation {
    "caller": property-access {
     "child": "put",
     "parent": lambda {
      "before-arrow": "tuple ",
      "after-arrow": " nodesCopy"
      }
     },
    "arguments": [invocation {
     "caller": property-access {
      "child": "left",
      "parent": symbol {
       "content": "tuple"
       }
      }
     }, invocation {
     "caller": property-access {
      "child": "right",
      "parent": symbol {
       "content": "tuple"
       }
      }
     }]
    }]
   }, declaration {
   "name": "nodeListCopy",
   "caller": symbol {
    "content": "HashMap"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "type-arguments": [symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }, generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "List"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "Node"
      }]
     }]
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, invocation {
   "caller": property-access {
    "child": "forEach",
    "parent": invocation {
     "caller": property-access {
      "child": "concat",
      "parent": symbol {
       "content": "Stream"
       }
      },
     "arguments": [invocation {
      "caller": property-access {
       "child": "stream",
       "parent": invocation {
        "caller": property-access {
         "child": "collect",
         "parent": invocation {
          "caller": property-access {
           "child": "streamNodeLists",
           "parent": symbol {
            "content": "self"
            }
           }
          }
         },
        "arguments": [construction {
         "caller": symbol {
          "content": "NativeListCollector"
          },
         "type-arguments": [generic {
          "base": symbol {
           "namespace": [segment {
            "segment": "Tuple"
            }]
           },
          "children": [symbol {
           "namespace": [segment {
            "segment": "String"
            }]
           }, generic {
           "base": symbol {
            "namespace": [segment {
             "segment": "List"
             }]
            },
           "children": [symbol {
            "namespace": [segment {
             "segment": "Node"
             }]
            }]
           }]
          }]
         }]
        }
       }
      }, invocation {
      "caller": property-access {
       "child": "stream",
       "parent": invocation {
        "caller": property-access {
         "child": "collect",
         "parent": invocation {
          "caller": property-access {
           "child": "streamNodeLists",
           "parent": symbol {
            "content": "other"
            }
           }
          }
         },
        "arguments": [construction {
         "caller": symbol {
          "content": "NativeListCollector"
          },
         "type-arguments": [generic {
          "base": symbol {
           "namespace": [segment {
            "segment": "Tuple"
            }]
           },
          "children": [symbol {
           "namespace": [segment {
            "segment": "String"
            }]
           }, generic {
           "base": symbol {
            "namespace": [segment {
             "segment": "List"
             }]
            },
           "children": [symbol {
            "namespace": [segment {
             "segment": "Node"
             }]
            }]
           }]
          }]
         }]
        }
       }
      }]
     }
    },
   "arguments": [invocation {
    "caller": property-access {
     "child": "put",
     "parent": lambda {
      "before-arrow": "tuple ",
      "after-arrow": " nodeListCopy"
      }
     },
    "arguments": [invocation {
     "caller": property-access {
      "child": "left",
      "parent": symbol {
       "content": "tuple"
       }
      }
     }, invocation {
     "caller": property-access {
      "child": "right",
      "parent": symbol {
       "content": "tuple"
       }
      }
     }]
    }]
   }, return {
   "value": construction {
    "caller": symbol {
     "content": "MapNode"
     },
    "arguments": [invocation {
     "caller": property-access {
      "child": "findType",
      "parent": symbol {
       "content": "self"
       }
      }
     }, symbol {
     "content": "stringsCopy"
     }, symbol {
     "content": "stringListCopy"
     }, symbol {
     "content": "nodesCopy"
     }, symbol {
     "content": "nodeListCopy"
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "static"
   }],
  "params": [definition {
   "name": "self",
   "returns": symbol {
    "namespace": [segment {
     "segment": "MapNode"
     }]
    }
   }, definition {
   "name": "other",
   "returns": symbol {
    "namespace": [segment {
     "segment": "Node"
     }]
    }
   }]
  }, whitespace {
  }],
 "modifiers": [modifier {
  "modifier-value": "public"
  }]
 }, whitespace {
 }]
}