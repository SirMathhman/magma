{
"children": [import {
 "namespace": ["magma", "api", "Tuple"]
 }, import {
 "namespace": ["java", "util", "*"]
 }, import {
 "namespace": ["java", "util", "function", "Function"]
 }, import {
 "namespace": ["java", "util", "stream", "Collectors"]
 }, import {
 "namespace": ["java", "util", "stream", "Stream"]
 }, function {
 "name": "MapNode",
 "modifiers": ["public"],
 "interface": symbol {
  "type": "Node"
  },
 "children": [method {
  "name": "MapNode",
  "returns": symbol {
   "type": "public"
   },
  "children": [any {
   "content": "this(Optional.empty(), Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap(), Collections.emptyMap());"
   }]
  }, method {
  "name": "formatLine",
  "modifiers": ["private", "static"],
  "params": content {
   "params": "int depth, String key, String value"
   },
  "returns": symbol {
   "type": "String"
   },
  "children": [return {
   "value": any {
    "content": ""\n" + " ".repeat(depth) + "\"" + key + "\": " + value"
    }
   }]
  }, method {
  "name": "formatNodeList",
  "modifiers": ["private", "static"],
  "params": content {
   "params": "int depth, List<Node> values"
   },
  "returns": symbol {
   "type": "String"
   },
  "children": [return {
   "value": any {
    "content": "values.stream()
                .map(node -> node.format(depth + 1))
                .collect(Collectors.joining(", ", "[", "]"))"
    }
   }]
  }, method {
  "name": "retype",
  "modifiers": ["public"],
  "params": content {
   "params": "String type"
   },
  "returns": symbol {
   "type": "Node"
   },
  "annotations": [{
   "annotation": "Override"
   }],
  "children": [return {
   "value": any {
    "content": "new MapNode(Optional.of(type), strings, stringLists, nodes, nodeLists)"
    }
   }]
  }, method {
  "name": "is",
  "modifiers": ["public"],
  "params": content {
   "params": "String type"
   },
  "returns": symbol {
   "type": "boolean"
   },
  "annotations": [{
   "annotation": "Override"
   }],
  "children": [return {
   "value": any {
    "content": "this.type.filter(value -> value.equals(type)).isPresent()"
    }
   }]
  }, method {
  "name": "withString",
  "modifiers": ["public"],
  "params": content {
   "params": "String propertyKey, String propertyValue"
   },
  "returns": symbol {
   "type": "Node"
   },
  "annotations": [{
   "annotation": "Override"
   }],
  "children": [any {
   "content": "final var copy = new HashMap<>(strings);"
   }, any {
   "content": "copy.put(propertyKey, propertyValue);"
   }, return {
   "value": any {
    "content": "new MapNode(type, copy, stringLists, nodes, nodeLists)"
    }
   }]
  }, method {
  "name": "findString",
  "modifiers": ["public"],
  "params": content {
   "params": "String propertyKey"
   },
  "returns": generic {
   "base": symbol {
    "type": "Optional"
    },
   "children": [symbol {
    "type": "String"
    }]
   },
  "annotations": [{
   "annotation": "Override"
   }],
  "children": [return {
   "value": any {
    "content": "Optional.ofNullable(strings.get(propertyKey))"
    }
   }]
  }, method {
  "name": "mapNodeList",
  "modifiers": ["public"],
  "params": content {
   "params": "String propertyKey, Function<List<Node>, List<Node>> mapper"
   },
  "returns": generic {
   "base": symbol {
    "type": "Optional"
    },
   "children": [symbol {
    "type": "Node"
    }]
   },
  "annotations": [{
   "annotation": "Override"
   }],
  "children": [return {
   "value": any {
    "content": "findNodeList(propertyKey).map(mapper).map(value -> withNodeList(propertyKey, value))"
    }
   }]
  }, method {
  "name": "streamNodeLists",
  "modifiers": ["public", "Stream<Tuple<String,"],
  "returns": generic {
   "base": symbol {
    "type": "List"
    },
   "children": [symbol {
    "type": "Node>>"
    }]
   },
  "annotations": [{
   "annotation": "Override"
   }],
  "children": [return {
   "value": any {
    "content": "nodeLists.entrySet().stream().map(pair -> new Tuple<>(pair.getKey(), pair.getValue()))"
    }
   }]
  }, method {
  "name": "withNode",
  "modifiers": ["public"],
  "params": content {
   "params": "String propertyKey, Node propertyValue"
   },
  "returns": symbol {
   "type": "Node"
   },
  "annotations": [{
   "annotation": "Override"
   }],
  "children": [any {
   "content": "final var copy = new HashMap<>(nodes);"
   }, any {
   "content": "copy.put(propertyKey, propertyValue);"
   }, return {
   "value": any {
    "content": "new MapNode(type, strings, stringLists, copy, nodeLists)"
    }
   }]
  }, method {
  "name": "findNode",
  "modifiers": ["public"],
  "params": content {
   "params": "String propertyKey"
   },
  "returns": generic {
   "base": symbol {
    "type": "Optional"
    },
   "children": [symbol {
    "type": "Node"
    }]
   },
  "annotations": [{
   "annotation": "Override"
   }],
  "children": [return {
   "value": any {
    "content": "Optional.ofNullable(nodes.get(propertyKey))"
    }
   }]
  }, method {
  "name": "streamNodes",
  "modifiers": ["public", "Stream<Tuple<String,"],
  "returns": symbol {
   "type": "Node>>"
   },
  "annotations": [{
   "annotation": "Override"
   }],
  "children": [return {
   "value": any {
    "content": "nodes.entrySet().stream().map(entry -> new Tuple<>(entry.getKey(), entry.getValue()))"
    }
   }]
  }, method {
  "name": "hasNode",
  "modifiers": ["public"],
  "params": content {
   "params": "String node"
   },
  "returns": symbol {
   "type": "boolean"
   },
  "annotations": [{
   "annotation": "Override"
   }],
  "children": [return {
   "value": any {
    "content": "nodes.containsKey(node)"
    }
   }]
  }, method {
  "name": "withStringList",
  "modifiers": ["public"],
  "params": content {
   "params": "String propertyKey, List<String> propertyValues"
   },
  "returns": symbol {
   "type": "Node"
   },
  "annotations": [{
   "annotation": "Override"
   }],
  "children": [any {
   "content": "final var copy = new HashMap<>(stringLists);"
   }, any {
   "content": "copy.put(propertyKey, propertyValues);"
   }, return {
   "value": any {
    "content": "new MapNode(type, strings, copy, nodes, nodeLists)"
    }
   }]
  }, method {
  "name": "findStringList",
  "modifiers": ["public"],
  "params": content {
   "params": "String propertyKey"
   },
  "returns": generic {
   "base": symbol {
    "type": "Optional"
    },
   "children": [generic {
    "base": symbol {
     "type": "List"
     },
    "children": [symbol {
     "type": "String"
     }]
    }]
   },
  "annotations": [{
   "annotation": "Override"
   }],
  "children": [return {
   "value": any {
    "content": "Optional.ofNullable(stringLists.get(propertyKey))"
    }
   }]
  }, method {
  "name": "streamStrings",
  "modifiers": ["public", "Stream<Tuple<String,"],
  "returns": symbol {
   "type": "String>>"
   },
  "annotations": [{
   "annotation": "Override"
   }],
  "children": [return {
   "value": any {
    "content": "strings.entrySet().stream().map(pair -> new Tuple<>(pair.getKey(), pair.getValue()))"
    }
   }]
  }, method {
  "name": "findNodeList",
  "modifiers": ["public"],
  "params": content {
   "params": "String propertyKey"
   },
  "returns": generic {
   "base": symbol {
    "type": "Optional"
    },
   "children": [generic {
    "base": symbol {
     "type": "List"
     },
    "children": [symbol {
     "type": "Node"
     }]
    }]
   },
  "annotations": [{
   "annotation": "Override"
   }],
  "children": [return {
   "value": any {
    "content": "Optional.ofNullable(nodeLists.get(propertyKey))"
    }
   }]
  }, method {
  "name": "withNodeList",
  "modifiers": ["public"],
  "params": content {
   "params": "String propertyKey, List<Node> values"
   },
  "returns": symbol {
   "type": "Node"
   },
  "annotations": [{
   "annotation": "Override"
   }],
  "children": [any {
   "content": "final var copy = new HashMap<>(nodeLists);"
   }, any {
   "content": "copy.put(propertyKey, values);"
   }, return {
   "value": any {
    "content": "new MapNode(type, strings, stringLists, nodes, copy)"
    }
   }]
  }, method {
  "name": "toString",
  "modifiers": ["public"],
  "returns": symbol {
   "type": "String"
   },
  "annotations": [{
   "annotation": "Override"
   }],
  "children": [return {
   "value": any {
    "content": "format(0)"
    }
   }]
  }, method {
  "name": "format",
  "modifiers": ["public"],
  "params": content {
   "params": "int depth"
   },
  "returns": symbol {
   "type": "String"
   },
  "annotations": [{
   "annotation": "Override"
   }],
  "children": [any {
   "content": "final var typeString = type.map(value -> value + " ").orElse("");"
   }, any {
   "content": "final var joinedStrings = formatMap(depth, strings, value -> "\"" + value + "\"");"
   }, any {
   "content": "final var joinedStringLists = formatMap(depth, stringLists, this::formatStringList);"
   }, any {
   "content": "final var joinedNodes = formatMap(depth, nodes, value -> value.format(depth + 1));"
   }, any {
   "content": "final var joinedNodeLists = formatMap(depth, nodeLists, values -> formatNodeList(depth, values));"
   }, any {
   "content": "final List<String> list = new ArrayList<>();"
   }, any {
   "content": "if (!joinedStrings.isEmpty()) list.add(joinedStrings);"
   }, any {
   "content": "if (!joinedStringLists.isEmpty()) list.add(joinedStringLists);"
   }, any {
   "content": "if (!joinedNodes.isEmpty()) list.add(joinedNodes);"
   }, any {
   "content": "if (!joinedNodeLists.isEmpty()) list.add(joinedNodeLists);"
   }, any {
   "content": "final var joined = String.join(",", list);"
   }, any {
   "content": "return typeString + "{" + joined + "\n" + " ".repeat(depth) + "}"
   }, any {
   "content": "";"
   }]
  }, method {
  "name": "formatStringList",
  "modifiers": ["private"],
  "params": content {
   "params": "List<String> list"
   },
  "returns": symbol {
   "type": "String"
   },
  "children": [return {
   "value": any {
    "content": "list.stream()
                .map(inner -> "\"" + inner + "\"")
                .collect(Collectors.joining(", ", "[", "]"))"
    }
   }]
  }, method {
  "name": "formatMap",
  "modifiers": ["private", "<T>"],
  "params": content {
   "params": "int depth, Map<String, T> set, Function<T, String> format"
   },
  "returns": symbol {
   "type": "String"
   },
  "children": [return {
   "value": any {
    "content": "set.entrySet()
                .stream()
                .map(entry -> formatLine(depth, entry.getKey(), format.apply(entry.getValue())))
                .collect(Collectors.joining(","))"
    }
   }]
  }, method {
  "name": "streamStringLists",
  "modifiers": ["public", "Stream<Tuple<String,"],
  "returns": generic {
   "base": symbol {
    "type": "List"
    },
   "children": [symbol {
    "type": "String>>"
    }]
   },
  "annotations": [{
   "annotation": "Override"
   }],
  "children": [return {
   "value": any {
    "content": "stringLists.entrySet()
                .stream()
                .map(entry -> new Tuple<>(entry.getKey(), entry.getValue()))"
    }
   }]
  }, method {
  "name": "mapStringList",
  "modifiers": ["public"],
  "params": content {
   "params": "String propertyKey, Function<List<String>, List<String>> mapper"
   },
  "returns": generic {
   "base": symbol {
    "type": "Optional"
    },
   "children": [symbol {
    "type": "Node"
    }]
   },
  "annotations": [{
   "annotation": "Override"
   }],
  "children": [return {
   "value": any {
    "content": "findStringList(propertyKey).map(mapper).map(list -> withStringList(propertyKey, list))"
    }
   }]
  }, method {
  "name": "merge",
  "modifiers": ["public"],
  "params": content {
   "params": "Node other"
   },
  "returns": symbol {
   "type": "Node"
   },
  "annotations": [{
   "annotation": "Override"
   }],
  "children": [any {
   "content": "final var stringsCopy = new HashMap<>(strings);"
   }, any {
   "content": "other.streamStrings().forEach(tuple -> stringsCopy.put(tuple.left(), tuple.right()));"
   }, any {
   "content": "final var stringListCopy = new HashMap<>(stringLists);"
   }, any {
   "content": "other.streamStringLists().forEach(tuple -> stringListCopy.put(tuple.left(), tuple.right()));"
   }, any {
   "content": "final var nodesCopy = new HashMap<>(nodes);"
   }, any {
   "content": "other.streamNodes().forEach(tuple -> nodesCopy.put(tuple.left(), tuple.right()));"
   }, any {
   "content": "final var nodeListCopy = new HashMap<>(nodeLists);"
   }, any {
   "content": "other.streamNodeLists().forEach(tuple -> nodeListCopy.put(tuple.left(), tuple.right()));"
   }, return {
   "value": any {
    "content": "new MapNode(type, stringsCopy, stringListCopy, nodesCopy, nodeListCopy)"
    }
   }]
  }],
 "params": [definition {
  "type": "
        Optional<String>",
  "name": "type"
  }, definition {
  "type": "
        Map<String, String>",
  "name": "strings"
  }, definition {
  "type": "

        Map<String, List<String>>",
  "name": "stringLists"
  }, definition {
  "type": " Map<String, Node>",
  "name": "nodes"
  }, definition {
  "type": " Map<String,
        List<Node>>",
  "name": "nodeLists"
  }]
 }]
}