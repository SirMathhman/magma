{
"children": [import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "api"
  }, segment {
  "segment": "Tuple"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "api"
  }, segment {
  "segment": "stream"
  }, segment {
  "segment": "Stream"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "java"
  }, segment {
  "segment": "JavaList"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "*"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "function"
  }, segment {
  "segment": "Function"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "stream"
  }, segment {
  "segment": "Collectors"
  }]
 }, function {
 "name": "MapNode",
 "interface": symbol {
  "namespace": [segment {
   "segment": "Node"
   }]
  },
 "modifiers": [modifier {
  "modifier-value": "public"
  }],
 "params": [definition {
  "name": "type",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Optional"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }]
   }
  }, definition {
  "name": "strings",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Map"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }, symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }]
   }
  }, definition {
  "name": "stringLists",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Map"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }, generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "List"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "String"
      }]
     }]
    }]
   }
  }, definition {
  "name": "nodes",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Map"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }, symbol {
    "namespace": [segment {
     "segment": "Node"
     }]
    }]
   }
  }, definition {
  "name": "nodeLists",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Map"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }, generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "List"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "Node"
      }]
     }]
    }]
   }
  }],
 "children": [method {
  "name": "MapNode",
  "returns": symbol {
   "namespace": [segment {
    "segment": "public"
    }]
   },
  "children": [invocation {
   "caller": symbol {
    "content": "this"
    },
   "arguments": [invocation {
    "caller": property-access {
     "child": "empty",
     "parent": symbol {
      "content": "Optional"
      }
     }
    }, invocation {
    "caller": property-access {
     "child": "emptyMap",
     "parent": symbol {
      "content": "Collections"
      }
     }
    }, invocation {
    "caller": property-access {
     "child": "emptyMap",
     "parent": symbol {
      "content": "Collections"
      }
     }
    }, invocation {
    "caller": property-access {
     "child": "emptyMap",
     "parent": symbol {
      "content": "Collections"
      }
     }
    }, invocation {
    "caller": property-access {
     "child": "emptyMap",
     "parent": symbol {
      "content": "Collections"
      }
     }
    }]
   }, whitespace {
   }]
  }, method {
  "name": "formatLine",
  "returns": symbol {
   "namespace": [segment {
    "segment": "String"
    }]
   },
  "children": [return {
   "value": addition {
    "left": string {
     "value": "\n"
     },
    "right": addition {
     "left": invocation {
      "caller": property-access {
       "child": "repeat",
       "parent": string {
        "value": " "
        }
       },
      "arguments": [symbol {
       "content": "depth"
       }]
      },
     "right": addition {
      "left": string {
       "value": "\""
       },
      "right": addition {
       "left": symbol {
        "content": "key"
        },
       "right": addition {
        "left": string {
         "value": "\": "
         },
        "right": symbol {
         "content": "value"
         }
        }
       }
      }
     }
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }],
  "params": [definition {
   "name": "depth",
   "returns": symbol {
    "namespace": [segment {
     "segment": "int"
     }]
    }
   }, definition {
   "name": "key",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }, definition {
   "name": "value",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "formatNodeList",
  "returns": symbol {
   "namespace": [segment {
    "segment": "String"
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "collect",
     "parent": invocation {
      "caller": property-access {
       "child": "map",
       "parent": invocation {
        "caller": property-access {
         "child": "stream",
         "parent": symbol {
          "content": "values"
          }
         }
        }
       },
      "arguments": [invocation {
       "caller": property-access {
        "child": "format",
        "parent": lambda {
         "before-arrow": "node ",
         "after-arrow": " node"
         }
        },
       "arguments": [addition {
        "left": symbol {
         "content": "depth"
         },
        "right": number {
         "value": "1"
         }
        }]
       }]
      }
     },
    "arguments": [invocation {
     "caller": property-access {
      "child": "joining",
      "parent": symbol {
       "content": "Collectors"
       }
      },
     "arguments": [string {
      "value": ", "
      }, string {
      "value": "["
      }, string {
      "value": "]"
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }],
  "params": [definition {
   "name": "depth",
   "returns": symbol {
    "namespace": [segment {
     "segment": "int"
     }]
    }
   }, definition {
   "name": "values",
   "returns": generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "List"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "Node"
      }]
     }]
    }
   }]
  }, method {
  "name": "findType",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Optional"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }]
   },
  "children": [return {
   "value": symbol {
    "content": "type"
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }]
  }, method {
  "name": "retype",
  "returns": symbol {
   "namespace": [segment {
    "segment": "Node"
    }]
   },
  "children": [return {
   "value": construction {
    "caller": symbol {
     "content": "MapNode"
     },
    "arguments": [invocation {
     "caller": property-access {
      "child": "of",
      "parent": symbol {
       "content": "Optional"
       }
      },
     "arguments": [symbol {
      "content": "type"
      }]
     }, symbol {
     "content": "strings"
     }, symbol {
     "content": "stringLists"
     }, symbol {
     "content": "nodes"
     }, symbol {
     "content": "nodeLists"
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "type",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "is",
  "returns": symbol {
   "namespace": [segment {
    "segment": "boolean"
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "isPresent",
     "parent": invocation {
      "caller": property-access {
       "child": "filter",
       "parent": property-access {
        "child": "type",
        "parent": symbol {
         "content": "this"
         }
        }
       },
      "arguments": [invocation {
       "caller": property-access {
        "child": "equals",
        "parent": lambda {
         "before-arrow": "value ",
         "after-arrow": " value"
         }
        },
       "arguments": [symbol {
        "content": "type"
        }]
       }]
      }
     }
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "type",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "withString",
  "returns": symbol {
   "namespace": [segment {
    "segment": "Node"
    }]
   },
  "children": [declaration {
   "name": "copy",
   "caller": symbol {
    "content": "HashMap"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [symbol {
    "content": "strings"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, invocation {
   "caller": property-access {
    "child": "put",
    "parent": symbol {
     "content": "copy"
     }
    },
   "arguments": [symbol {
    "content": "propertyKey"
    }, symbol {
    "content": "propertyValue"
    }]
   }, return {
   "value": construction {
    "caller": symbol {
     "content": "MapNode"
     },
    "arguments": [symbol {
     "content": "type"
     }, symbol {
     "content": "copy"
     }, symbol {
     "content": "stringLists"
     }, symbol {
     "content": "nodes"
     }, symbol {
     "content": "nodeLists"
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }, definition {
   "name": "propertyValue",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "findString",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Optional"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "ofNullable",
     "parent": symbol {
      "content": "Optional"
      }
     },
    "arguments": [invocation {
     "caller": property-access {
      "child": "get",
      "parent": symbol {
       "content": "strings"
       }
      },
     "arguments": [symbol {
      "content": "propertyKey"
      }]
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "mapNodeList",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Optional"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "Node"
     }]
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "map",
     "parent": invocation {
      "caller": property-access {
       "child": "map",
       "parent": invocation {
        "caller": symbol {
         "content": "findNodeList"
         },
        "arguments": [symbol {
         "content": "propertyKey"
         }]
        }
       },
      "arguments": [symbol {
       "content": "mapper"
       }]
      }
     },
    "arguments": [invocation {
     "caller": lambda {
      "before-arrow": "value ",
      "after-arrow": " withNodeList"
      },
     "arguments": [symbol {
      "content": "propertyKey"
      }, symbol {
      "content": "value"
      }]
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }, definition {
   "name": "mapper",
   "returns": generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "Function"
      }]
     },
    "children": [generic {
     "base": symbol {
      "namespace": [segment {
       "segment": "List"
       }]
      },
     "children": [symbol {
      "namespace": [segment {
       "segment": "Node"
       }]
      }]
     }, generic {
     "base": symbol {
      "namespace": [segment {
       "segment": "List"
       }]
      },
     "children": [symbol {
      "namespace": [segment {
       "segment": "Node"
       }]
      }]
     }]
    }
   }]
  }, method {
  "name": "withNode",
  "returns": symbol {
   "namespace": [segment {
    "segment": "Node"
    }]
   },
  "children": [declaration {
   "name": "copy",
   "caller": symbol {
    "content": "HashMap"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [symbol {
    "content": "nodes"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, invocation {
   "caller": property-access {
    "child": "put",
    "parent": symbol {
     "content": "copy"
     }
    },
   "arguments": [symbol {
    "content": "propertyKey"
    }, symbol {
    "content": "propertyValue"
    }]
   }, return {
   "value": construction {
    "caller": symbol {
     "content": "MapNode"
     },
    "arguments": [symbol {
     "content": "type"
     }, symbol {
     "content": "strings"
     }, symbol {
     "content": "stringLists"
     }, symbol {
     "content": "copy"
     }, symbol {
     "content": "nodeLists"
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }, definition {
   "name": "propertyValue",
   "returns": symbol {
    "namespace": [segment {
     "segment": "Node"
     }]
    }
   }]
  }, method {
  "name": "findNode",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Optional"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "Node"
     }]
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "ofNullable",
     "parent": symbol {
      "content": "Optional"
      }
     },
    "arguments": [invocation {
     "caller": property-access {
      "child": "get",
      "parent": symbol {
       "content": "nodes"
       }
      },
     "arguments": [symbol {
      "content": "propertyKey"
      }]
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "hasNode",
  "returns": symbol {
   "namespace": [segment {
    "segment": "boolean"
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "containsKey",
     "parent": symbol {
      "content": "nodes"
      }
     },
    "arguments": [symbol {
     "content": "node"
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "node",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "withStringList",
  "returns": symbol {
   "namespace": [segment {
    "segment": "Node"
    }]
   },
  "children": [declaration {
   "name": "copy",
   "caller": symbol {
    "content": "HashMap"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [symbol {
    "content": "stringLists"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, invocation {
   "caller": property-access {
    "child": "put",
    "parent": symbol {
     "content": "copy"
     }
    },
   "arguments": [symbol {
    "content": "propertyKey"
    }, symbol {
    "content": "propertyValues"
    }]
   }, return {
   "value": construction {
    "caller": symbol {
     "content": "MapNode"
     },
    "arguments": [symbol {
     "content": "type"
     }, symbol {
     "content": "strings"
     }, symbol {
     "content": "copy"
     }, symbol {
     "content": "nodes"
     }, symbol {
     "content": "nodeLists"
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }, definition {
   "name": "propertyValues",
   "returns": generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "List"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "String"
      }]
     }]
    }
   }]
  }, method {
  "name": "findStringList",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Optional"
     }]
    },
   "children": [generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "List"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "String"
      }]
     }]
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "ofNullable",
     "parent": symbol {
      "content": "Optional"
      }
     },
    "arguments": [invocation {
     "caller": property-access {
      "child": "get",
      "parent": symbol {
       "content": "stringLists"
       }
      },
     "arguments": [symbol {
      "content": "propertyKey"
      }]
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "findNodeList",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Optional"
     }]
    },
   "children": [generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "List"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "Node"
      }]
     }]
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "ofNullable",
     "parent": symbol {
      "content": "Optional"
      }
     },
    "arguments": [invocation {
     "caller": property-access {
      "child": "get",
      "parent": symbol {
       "content": "nodeLists"
       }
      },
     "arguments": [symbol {
      "content": "propertyKey"
      }]
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "withNodeList",
  "returns": symbol {
   "namespace": [segment {
    "segment": "Node"
    }]
   },
  "children": [declaration {
   "name": "copy",
   "caller": symbol {
    "content": "HashMap"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [symbol {
    "content": "nodeLists"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, invocation {
   "caller": property-access {
    "child": "put",
    "parent": symbol {
     "content": "copy"
     }
    },
   "arguments": [symbol {
    "content": "propertyKey"
    }, symbol {
    "content": "values"
    }]
   }, return {
   "value": construction {
    "caller": symbol {
     "content": "MapNode"
     },
    "arguments": [symbol {
     "content": "type"
     }, symbol {
     "content": "strings"
     }, symbol {
     "content": "stringLists"
     }, symbol {
     "content": "nodes"
     }, symbol {
     "content": "copy"
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }, definition {
   "name": "values",
   "returns": generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "List"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "Node"
      }]
     }]
    }
   }]
  }, method {
  "name": "toString",
  "returns": symbol {
   "namespace": [segment {
    "segment": "String"
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": symbol {
     "content": "format"
     },
    "arguments": [number {
     "value": "0"
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }]
  }, method {
  "name": "format",
  "returns": symbol {
   "namespace": [segment {
    "segment": "String"
    }]
   },
  "children": [invocation {
   "caller": property-access {
    "child": "orElse",
    "parent": lambda {
     "before-arrow": "final var typeString = type.map(value ",
     "after-arrow": " value + " ")"
     }
    },
   "arguments": [string {
    }]
   }, declaration {
   "name": "joinedStrings",
   "caller": symbol {
    "content": "formatMap"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [symbol {
    "content": "depth"
    }, symbol {
    "content": "strings"
    }, addition {
    "left": lambda {
     "before-arrow": " value ",
     "after-arrow": " "\"" "
     },
    "right": addition {
     "left": symbol {
      "content": "value"
      },
     "right": string {
      "value": "\""
      }
     }
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "joinedStringLists",
   "caller": symbol {
    "content": "formatMap"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [symbol {
    "content": "depth"
    }, symbol {
    "content": "stringLists"
    }, method-access {
    "child": "formatStringList",
    "parent": symbol {
     "content": "this"
     }
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "joinedNodes",
   "caller": symbol {
    "content": "formatMap"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [symbol {
    "content": "depth"
    }, symbol {
    "content": "nodes"
    }, invocation {
    "caller": property-access {
     "child": "format",
     "parent": lambda {
      "before-arrow": "value ",
      "after-arrow": " value"
      }
     },
    "arguments": [addition {
     "left": symbol {
      "content": "depth"
      },
     "right": number {
      "value": "1"
      }
     }]
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "joinedNodeLists",
   "caller": symbol {
    "content": "formatMap"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [symbol {
    "content": "depth"
    }, symbol {
    "content": "nodeLists"
    }, invocation {
    "caller": lambda {
     "before-arrow": "values ",
     "after-arrow": " formatNodeList"
     },
    "arguments": [symbol {
     "content": "depth"
     }, symbol {
     "content": "values"
     }]
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, declaration {
   "name": "list",
   "caller": symbol {
    "content": "ArrayList"
    },
   "returns": generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "List"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "String"
      }]
     }]
    },
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, if {
   "content": " (!joinedStrings.isEmpty()) list.add(joinedStrings);"
   }, if {
   "content": " (!joinedStringLists.isEmpty()) list.add(joinedStringLists);"
   }, if {
   "content": " (!joinedNodes.isEmpty()) list.add(joinedNodes);"
   }, if {
   "content": " (!joinedNodeLists.isEmpty()) list.add(joinedNodeLists);"
   }, declaration {
   "name": "joined",
   "caller": property-access {
    "child": "join",
    "parent": symbol {
     "content": "String"
     }
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [string {
    "value": ","
    }, symbol {
    "content": "list"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, return {
   "value": addition {
    "left": symbol {
     "content": "typeString"
     },
    "right": string {
     "value": "{" + joined + "\n" + " ".repeat(depth) + "}"
     }
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "depth",
   "returns": symbol {
    "namespace": [segment {
     "segment": "int"
     }]
    }
   }]
  }, method {
  "name": "formatStringList",
  "returns": symbol {
   "namespace": [segment {
    "segment": "String"
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "collect",
     "parent": invocation {
      "caller": property-access {
       "child": "map",
       "parent": invocation {
        "caller": property-access {
         "child": "stream",
         "parent": symbol {
          "content": "list"
          }
         }
        }
       },
      "arguments": [addition {
       "left": lambda {
        "before-arrow": "inner ",
        "after-arrow": " "\"" "
        },
       "right": addition {
        "left": symbol {
         "content": "inner"
         },
        "right": string {
         "value": "\""
         }
        }
       }]
      }
     },
    "arguments": [invocation {
     "caller": property-access {
      "child": "joining",
      "parent": symbol {
       "content": "Collectors"
       }
      },
     "arguments": [string {
      "value": ", "
      }, string {
      "value": "["
      }, string {
      "value": "]"
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }],
  "params": [definition {
   "name": "list",
   "returns": generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "List"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "String"
      }]
     }]
    }
   }]
  }, method {
  "name": "formatMap",
  "type-params": "T",
  "returns": symbol {
   "namespace": [segment {
    "segment": "String"
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "collect",
     "parent": invocation {
      "caller": property-access {
       "child": "map",
       "parent": invocation {
        "caller": property-access {
         "child": "stream",
         "parent": invocation {
          "caller": property-access {
           "child": "entrySet",
           "parent": symbol {
            "content": "set"
            }
           }
          }
         }
        }
       },
      "arguments": [invocation {
       "caller": lambda {
        "before-arrow": "entry ",
        "after-arrow": " formatLine"
        },
       "arguments": [symbol {
        "content": "depth"
        }, invocation {
        "caller": property-access {
         "child": "getKey",
         "parent": symbol {
          "content": "entry"
          }
         }
        }, invocation {
        "caller": property-access {
         "child": "apply",
         "parent": symbol {
          "content": "format"
          }
         },
        "arguments": [invocation {
         "caller": property-access {
          "child": "getValue",
          "parent": symbol {
           "content": "entry"
           }
          }
         }]
        }]
       }]
      }
     },
    "arguments": [invocation {
     "caller": property-access {
      "child": "joining",
      "parent": symbol {
       "content": "Collectors"
       }
      },
     "arguments": [string {
      "value": ","
      }]
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }],
  "params": [definition {
   "name": "depth",
   "returns": symbol {
    "namespace": [segment {
     "segment": "int"
     }]
    }
   }, definition {
   "name": "set",
   "returns": generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "Map"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "String"
      }]
     }, symbol {
     "namespace": [segment {
      "segment": "T"
      }]
     }]
    }
   }, definition {
   "name": "format",
   "returns": generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "Function"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "T"
      }]
     }, symbol {
     "namespace": [segment {
      "segment": "String"
      }]
     }]
    }
   }]
  }, method {
  "name": "hasNodeList",
  "returns": symbol {
   "namespace": [segment {
    "segment": "boolean"
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "containsKey",
     "parent": symbol {
      "content": "nodeLists"
      }
     },
    "arguments": [symbol {
     "content": "propertyKey"
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "merge",
  "returns": symbol {
   "namespace": [segment {
    "segment": "Node"
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "merge0",
     "parent": symbol {
      "content": "MapNodes"
      }
     },
    "arguments": [symbol {
     "content": "this"
     }, symbol {
     "content": "other"
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "other",
   "returns": symbol {
    "namespace": [segment {
     "segment": "Node"
     }]
    }
   }]
  }, method {
  "name": "streamNodes",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Stream"
     }]
    },
   "children": [generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "Tuple"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "String"
      }]
     }, symbol {
     "namespace": [segment {
      "segment": "Node"
      }]
     }]
    }]
   },
  "children": [return {
   "value": construction {
    "caller": symbol {
     "content": "JavaList"
     },
    "arguments": [lambda {
     "before-arrow": "nodes.entrySet().stream().map(entry ",
     "after-arrow": " new Tuple<>(entry.getKey(), entry.getValue())).toList()).stream("
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }]
  }, method {
  "name": "streamNodeLists",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Stream"
     }]
    },
   "children": [generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "Tuple"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "String"
      }]
     }, generic {
     "base": symbol {
      "namespace": [segment {
       "segment": "List"
       }]
      },
     "children": [symbol {
      "namespace": [segment {
       "segment": "Node"
       }]
      }]
     }]
    }]
   },
  "children": [return {
   "value": construction {
    "caller": symbol {
     "content": "JavaList"
     },
    "arguments": [lambda {
     "before-arrow": "nodeLists.entrySet().stream().map(pair ",
     "after-arrow": " new Tuple<>(pair.getKey(), pair.getValue())).toList()).stream("
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }]
  }, method {
  "name": "streamStrings",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Stream"
     }]
    },
   "children": [generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "Tuple"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "String"
      }]
     }, symbol {
     "namespace": [segment {
      "segment": "String"
      }]
     }]
    }]
   },
  "children": [return {
   "value": construction {
    "caller": symbol {
     "content": "JavaList"
     },
    "arguments": [lambda {
     "before-arrow": "strings.entrySet().stream().map(pair ",
     "after-arrow": " new Tuple<>(pair.getKey(), pair.getValue())).toList()).stream("
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }]
  }, method {
  "name": "streamStringLists",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Stream"
     }]
    },
   "children": [generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "Tuple"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "String"
      }]
     }, generic {
     "base": symbol {
      "namespace": [segment {
       "segment": "List"
       }]
      },
     "children": [symbol {
      "namespace": [segment {
       "segment": "String"
       }]
      }]
     }]
    }]
   },
  "children": [return {
   "value": construction {
    "caller": symbol {
     "content": "JavaList"
     },
    "arguments": [lambda {
     "before-arrow": "stringLists.entrySet()
                .stream()
                .map(entry ",
     "after-arrow": " new Tuple<>(entry.getKey(), entry.getValue())).toList()).stream("
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }]
  }, implements {
  }]
 }, whitespace {
 }]
}