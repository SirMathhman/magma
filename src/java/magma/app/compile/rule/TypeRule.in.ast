{
"children": [package {
 "namespace": ["magma", "app", "compile", "rule"]
 }, import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "app", "compile", "GenerateException"]
 }, import {
 "namespace": ["magma", "app", "compile", "Node"]
 }, import {
 "namespace": ["magma", "app", "compile", "ParseException"]
 }, record {
 "name": "TypeRule",
 "modifiers": ["public"],
 "interface": symbol {
  "type": "Rule"
  },
 "children": [method {
  "name": "parse",
  "modifiers": ["public", "RuleResult<Node,"],
  "params": definition {
   "name": "input",
   "type": symbol {
    "type": "String"
    }
   },
  "returns": symbol {
   "type": "ParseException>"
   },
  "annotations": [{
   "annotation": "Override"
   }],
  "children": [return {
   "value": invocation {
    "caller": access {
     "name": "parse",
     "parent": symbol {
      "content": "rule"
      }
     },
    "arguments": [invocation {
     "caller": access {
      "name": "mapValue",
      "parent": symbol {
       "content": "input)
                "
       }
      },
     "arguments": [access {
      "name": "wrapErr(new ParseException("Failed to assign type ' type + "'input",
      "parent": access {
       "name": "retype(type))
                ",
       "parent": symbol {
        "content": "node -> node"
        }
       }
      }]
     }]
    }
   }]
  }, method {
  "name": "generate",
  "modifiers": ["public", "RuleResult<String,"],
  "params": definition {
   "name": "node",
   "type": symbol {
    "type": "Node"
    }
   },
  "returns": symbol {
   "type": "GenerateException>"
   },
  "annotations": [{
   "annotation": "Override"
   }],
  "children": [symbol {
   "content": "if (!node.is(type))
            return new RuleResult<>(new Err<>(new GenerateException("Expected a type of ' type + "'node)));"
   }, return {
   "value": invocation {
    "caller": access {
     "name": "generate",
     "parent": symbol {
      "content": "rule"
      }
     },
    "arguments": [symbol {
     "content": "node"
     }]
    }
   }]
  }],
 "params": [definition {
  "name": "type",
  "type": symbol {
   "type": "String"
   }
  }, definition {
  "name": "rule",
  "type": symbol {
   "type": "Rule"
   }
  }]
 }]
}