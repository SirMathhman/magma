{
"children": [package {
 "namespace": ["magma", "app", "compile", "rule"]
 }, import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "app", "compile", "GenerateException"]
 }, import {
 "namespace": ["magma", "app", "compile", "Node"]
 }, import {
 "namespace": ["magma", "app", "compile", "ParseException"]
 }, record {
 "name": "TypeRule",
 "interface": symbol {
  "value": "Rule"
  },
 "modifiers": [modifier {
  "content": "public"
  }],
 "params": [definition {
  "name": "type",
  "returns": symbol {
   "value": "String"
   }
  }, definition {
  "name": "rule",
  "returns": symbol {
   "value": "Rule"
   }
  }],
 "children": [method {
  "name": "parse",
  "returns": generic {
   "base": symbol {
    "value": "RuleResult"
    },
   "children": [symbol {
    "value": "Node"
    }, symbol {
    "value": "ParseException"
    }]
   },
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "input",
   "returns": symbol {
    "value": "String"
    }
   }],
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "wrapErr",
     "parent": lambda {
      "after-arrow": " node.retype(type))
                ",
      "before-arrow": "rule.parse(input)
                .mapValue(node "
      }
     },
    "arguments": [construction {
     "caller": symbol {
      "content": "ParseException"
      },
     "arguments": [string {
      "value": "Failed to assign type '" + type + "'"
      }, symbol {
      "content": "input"
      }]
     }]
    }
   }]
  }, method {
  "name": "generate",
  "returns": generic {
   "base": symbol {
    "value": "RuleResult"
    },
   "children": [symbol {
    "value": "String"
    }, symbol {
    "value": "GenerateException"
    }]
   },
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "node",
   "returns": symbol {
    "value": "Node"
    }
   }],
  "children": [if {
   "content": " (!node.is(type))
            return new RuleResult<>(new Err<>(new GenerateException("Expected a type of '" + type + "'", node)));"
   }, return {
   "value": invocation {
    "caller": property-access {
     "child": "generate",
     "parent": symbol {
      "content": "rule"
      }
     },
    "arguments": [symbol {
     "content": "node"
     }]
    }
   }]
  }]
 }]
}