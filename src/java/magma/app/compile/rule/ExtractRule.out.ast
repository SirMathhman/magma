{
"children": [import {
 "after-import": "
",
 "namespace": ["magma.api.result.Err"]
 }, import {
 "after-import": "
",
 "namespace": ["magma.api.result.Ok"]
 }, import {
 "after-import": "
",
 "namespace": ["magma.app.compile.GenerateException"]
 }, import {
 "after-import": "
",
 "namespace": ["magma.app.compile.MapNode"]
 }, import {
 "after-import": "
",
 "namespace": ["magma.app.compile.Node"]
 }, import {
 "after-import": "
",
 "namespace": ["magma.app.compile.ParseException"]
 }, function {
 "name": "ExtractRule",
 "interface": symbol {
  "value": "Rule"
  },
 "modifiers": [modifier {
  "modifier-value": "public"
  }],
 "params": [definition {
  "name": "propertyKey",
  "returns": symbol {
   "value": "String"
   }
  }],
 "children": [method {
  "name": "parse",
  "returns": generic {
   "base": symbol {
    "value": "RuleResult"
    },
   "children": [symbol {
    "value": "Node"
    }, symbol {
    "value": "ParseException"
    }]
   },
  "children": [if {
   "content": " (input.isEmpty()) return new RuleResult<>(new Err<>(new ParseException("Input is empty", input)));"
   }, return {
   "value": construction {
    "caller": symbol {
     "content": "RuleResult"
     },
    "arguments": [construction {
     "caller": symbol {
      "content": "Ok"
      },
     "arguments": [invocation {
      "caller": property-access {
       "child": "withString",
       "parent": construction {
        "caller": symbol {
         "content": "MapNode"
         }
        }
       },
      "arguments": [symbol {
       "content": "propertyKey"
       }, symbol {
       "content": "input"
       }]
      }]
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "input",
   "returns": symbol {
    "value": "String"
    }
   }]
  }, method {
  "name": "generate",
  "returns": generic {
   "base": symbol {
    "value": "RuleResult"
    },
   "children": [symbol {
    "value": "String"
    }, symbol {
    "value": "GenerateException"
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "orElseGet",
     "parent": lambda {
      "before-arrow": "node.findString(propertyKey)
                .<RuleResult<String, GenerateException>>map(s ",
      "after-arrow": " new RuleResult<>(new Ok<>(s)))
                "
      }
     },
    "arguments": [quantity {
     "value": invocation {
      "caller": lambda {
       "before-arrow": ") ",
       "after-arrow": " new RuleResult<>(new Err<>"
       },
      "arguments": [construction {
       "caller": symbol {
        "content": "GenerateException"
        },
       "arguments": [string {
        "value": "String '" + propertyKey + "' not present"
        }, symbol {
        "content": "node"
        }]
       }]
      }
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "node",
   "returns": symbol {
    "value": "Node"
    }
   }]
  }, implements {
  }]
 }, whitespace {
 }]
}