{
"children": [import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "api", "result", "Ok"]
 }, import {
 "namespace": ["magma", "app", "compile", "GenerateException"]
 }, import {
 "namespace": ["magma", "app", "compile", "MapNode"]
 }, import {
 "namespace": ["magma", "app", "compile", "Node"]
 }, import {
 "namespace": ["magma", "app", "compile", "ParseException"]
 }, function {
 "name": "ExtractRule",
 "modifiers": ["public"],
 "interface": symbol {
  "type": "Rule"
  },
 "children": [any {
  "content": "

    @Override
    public RuleResult<Node, ParseException> parse(String input) {
        if (input.isEmpty()) return new RuleResult<>(new Err<>(new ParseException("Input is empty", input)));
        return new RuleResult<>(new Ok<>(new MapNode().withString(propertyKey, input)));
    }"
  }, any {
  "content": "

    @Override
    public RuleResult<String, GenerateException> generate(Node node) {
        return node.findString(propertyKey)
                .<RuleResult<String, GenerateException>>map(s -> new RuleResult<>(new Ok<>(s)))
                .orElseGet(() -> new RuleResult<>(new Err<>(new GenerateException("String '+ propertyKey + "'ot present", node))));

    }"
  }],
 "params": [definition {
  "type": "String",
  "name": "propertyKey"
  }]
 }]
}