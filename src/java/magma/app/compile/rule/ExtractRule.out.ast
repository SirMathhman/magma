{
"children": [import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "api", "result", "Ok"]
 }, import {
 "namespace": ["magma", "app", "compile", "GenerateException"]
 }, import {
 "namespace": ["magma", "app", "compile", "MapNode"]
 }, import {
 "namespace": ["magma", "app", "compile", "Node"]
 }, import {
 "namespace": ["magma", "app", "compile", "ParseException"]
 }, function {
 "name": "ExtractRule",
 "modifiers": ["public"],
 "interface": symbol {
  "type": "Rule"
  },
 "children": [method {
  "name": "parse",
  "modifiers": ["public", "RuleResult<Node,"],
  "params": definition {
   "type": "String",
   "name": "input"
   },
  "returns": symbol {
   "type": "ParseException>"
   },
  "annotations": [{
   "annotation": "Override"
   }],
  "children": [symbol {
   "content": "if (input.isEmpty()) return new RuleResult<>(new Err<>(new ParseException("Input is empty", input)));"
   }, return {
   "value": invocation {
    "caller": symbol {
     "content": "new RuleResult<>"
     },
    "arguments": [access {
     "name": "withString(propertyKey",
     "parent": invocation {
      "caller": symbol {
       "content": "new Ok<>"
       },
      "arguments": [symbol {
       "content": "new MapNode("
       }]
      }
     }, symbol {
     "content": " input))"
     }]
    }
   }]
  }, method {
  "name": "generate",
  "modifiers": ["public", "RuleResult<String,"],
  "params": definition {
   "type": "Node",
   "name": "node"
   },
  "returns": symbol {
   "type": "GenerateException>"
   },
  "annotations": [{
   "annotation": "Override"
   }],
  "children": [return {
   "value": invocation {
    "caller": access {
     "name": "findString",
     "parent": symbol {
      "content": "node"
      }
     },
    "arguments": [invocation {
     "caller": access {
      "name": "<RuleResult<String, GenerateException>>map",
      "parent": symbol {
       "content": "propertyKey)
                "
       }
      },
     "arguments": [invocation {
      "caller": symbol {
       "content": "s -> new RuleResult<>"
       },
      "arguments": [invocation {
       "caller": symbol {
        "content": "new Ok<>"
        },
       "arguments": [access {
        "name": "orElseGet(() -> new RuleResult<>(new Err<>(new GenerateException("String ' propertyKey + "'t present", node",
        "parent": symbol {
         "content": "s)))
                "
         }
        }]
       }]
      }]
     }]
    }
   }]
  }],
 "params": [definition {
  "type": "String",
  "name": "propertyKey"
  }]
 }]
}