{
"children": [import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "api", "result", "Ok"]
 }, import {
 "namespace": ["magma", "app", "compile", "GenerateException"]
 }, import {
 "namespace": ["magma", "app", "compile", "MapNode"]
 }, import {
 "namespace": ["magma", "app", "compile", "Node"]
 }, import {
 "namespace": ["magma", "app", "compile", "ParseException"]
 }, function {
 "name": "ExtractRule",
 "modifiers": ["public"],
 "interface": symbol {
  "type": "Rule"
  },
 "children": [method {
  "name": "parse",
  "modifiers": ["public", "RuleResult<Node,"],
  "params": content {
   "params": "String input"
   },
  "returns": symbol {
   "type": "ParseException>"
   },
  "annotations": [{
   "annotation": "Override"
   }],
  "children": [any {
   "content": "if (input.isEmpty()) return new RuleResult<>(new Err<>(new ParseException("Input is empty", input)));"
   }, return {
   "value": any {
    "content": "new RuleResult<>(new Ok<>(new MapNode().withString(propertyKey, input)))"
    }
   }]
  }, method {
  "name": "generate",
  "modifiers": ["public", "RuleResult<String,"],
  "params": content {
   "params": "Node node"
   },
  "returns": symbol {
   "type": "GenerateException>"
   },
  "annotations": [{
   "annotation": "Override"
   }],
  "children": [return {
   "value": any {
    "content": "node.findString(propertyKey)
                .<RuleResult<String, GenerateException>>map(s -> new RuleResult<>(new Ok<>(s)))
                .orElseGet(() -> new RuleResult<>(new Err<>(new GenerateException("String ' propertyKey + "'t present", node))))"
    }
   }]
  }],
 "params": [definition {
  "type": "String",
  "name": "propertyKey"
  }]
 }]
}