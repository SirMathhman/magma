{
"children": [import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "app", "compile", "GenerateException"]
 }, import {
 "namespace": ["magma", "app", "compile", "MapNode"]
 }, import {
 "namespace": ["magma", "app", "compile", "Node"]
 }, import {
 "namespace": ["magma", "app", "compile", "ParseException"]
 }, function {
 "name": "NodeRule",
 "modifiers": ["public"],
 "interface": symbol {
  "type": "Rule"
  },
 "children": [method {
  "name": "parse",
  "params": content {
   "params": "String input"
   },
  "returns": generic {
   "base": symbol {
    "type": "@Override
    public RuleResult"
    },
   "children": [symbol {
    "type": "Node"
    }, symbol {
    "type": "ParseException"
    }]
   },
  "children": [return {
   "value": any {
    "content": "propertyRule.parse(input).mapValue(node -> new MapNode().withNode(propertyKey, node))"
    }
   }]
  }, method {
  "name": "generate",
  "params": content {
   "params": "Node node"
   },
  "returns": generic {
   "base": symbol {
    "type": "@Override
    public RuleResult"
    },
   "children": [symbol {
    "type": "String"
    }, symbol {
    "type": "GenerateException"
    }]
   },
  "children": [any {
   "content": "final var optional = node.findNode(propertyKey);"
   }, any {
   "content": "if (optional.isEmpty())
            return new RuleResult<>(new Err<>(new GenerateException("Node ' propertyKey + "'es not exist.", node)));"
   }, any {
   "content": "final var node1 = optional.get();"
   }, return {
   "value": any {
    "content": "propertyRule.generate(node1)"
    }
   }]
  }],
 "params": [definition {
  "type": "String",
  "name": "propertyKey"
  }, definition {
  "type": " Rule",
  "name": "propertyRule"
  }]
 }]
}