{
"children": [import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "app", "compile", "GenerateException"]
 }, import {
 "namespace": ["magma", "app", "compile", "MapNode"]
 }, import {
 "namespace": ["magma", "app", "compile", "Node"]
 }, import {
 "namespace": ["magma", "app", "compile", "ParseException"]
 }, function {
 "name": "NodeRule",
 "interface": symbol {
  "value": "Rule"
  },
 "modifiers": [modifier {
  "content": "public"
  }],
 "params": [definition {
  "name": "propertyKey",
  "content": "String"
  }, definition {
  "name": "propertyRule",
  "content": "Rule"
  }],
 "children": [method {
  "name": "parse",
  "content": "RuleResult<Node, ParseException>",
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "input",
   "content": "String"
   }],
  "children": [return {
   "value": invocation {
    "caller": access {
     "name": "parse",
     "parent": symbol {
      "content": "propertyRule"
      }
     },
    "arguments": [invocation {
     "caller": access {
      "name": "mapValue",
      "parent": symbol {
       "content": "input)"
       }
      },
     "arguments": [access {
      "name": "withNode(propertyKey, node",
      "parent": invocation {
       "caller": symbol {
        "content": "node -> new MapNode"
        },
       "arguments": []
       }
      }]
     }]
    }
   }]
  }, method {
  "name": "generate",
  "content": "RuleResult<String, GenerateException>",
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "node",
   "content": "Node"
   }],
  "children": [symbol {
   "content": "final var optional = node.findNode(propertyKey);"
   }, symbol {
   "content": "if (optional.isEmpty())
            return new RuleResult<>(new Err<>(new GenerateException("Node ' propertyKey + "'es not exist.", node)));"
   }, symbol {
   "content": "final var node1 = optional.get();"
   }, return {
   "value": invocation {
    "caller": access {
     "name": "generate",
     "parent": symbol {
      "content": "propertyRule"
      }
     },
    "arguments": [symbol {
     "content": "node1"
     }]
    }
   }]
  }]
 }]
}