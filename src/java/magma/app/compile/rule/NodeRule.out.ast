{
"children": [import {
 "after-import": "
",
 "namespace": ["magma.api.result.Err"]
 }, import {
 "after-import": "
",
 "namespace": ["magma.app.compile.GenerateException"]
 }, import {
 "after-import": "
",
 "namespace": ["magma.app.compile.MapNode"]
 }, import {
 "after-import": "
",
 "namespace": ["magma.app.compile.Node"]
 }, import {
 "after-import": "
",
 "namespace": ["magma.app.compile.ParseException"]
 }, function {
 "name": "NodeRule",
 "interface": symbol {
  "value": "Rule"
  },
 "modifiers": [modifier {
  "modifier-value": "export"
  }],
 "params": [definition {
  "name": "propertyKey",
  "returns": symbol {
   "value": "String"
   }
  }, definition {
  "name": "propertyRule",
  "returns": symbol {
   "value": "Rule"
   }
  }],
 "children": [method {
  "name": "parse",
  "returns": generic {
   "base": symbol {
    "value": "RuleResult"
    },
   "children": [symbol {
    "value": "Node"
    }, symbol {
    "value": "ParseException"
    }]
   },
  "children": [return {
   "value": lambda {
    "before-arrow": "propertyRule.parse(input).mapValue(node ",
    "after-arrow": " new MapNode().withNode(propertyKey, node))"
    }
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "input",
   "returns": symbol {
    "value": "String"
    }
   }]
  }, method {
  "name": "generate",
  "returns": generic {
   "base": symbol {
    "value": "RuleResult"
    },
   "children": [symbol {
    "value": "String"
    }, symbol {
    "value": "GenerateException"
    }]
   },
  "children": [declaration {
   "name": "optional",
   "caller": property-access {
    "child": "findNode",
    "parent": symbol {
     "content": "node"
     }
    },
   "returns": symbol {
    "value": "var"
    },
   "arguments": [symbol {
    "content": "propertyKey"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, if {
   "content": " (optional.isEmpty())
            return new RuleResult<>(new Err<>(new GenerateException("Node '" + propertyKey + "' does not exist.", node)));"
   }, declaration {
   "name": "node1",
   "caller": property-access {
    "child": "get",
    "parent": symbol {
     "content": "optional"
     }
    },
   "returns": symbol {
    "value": "var"
    },
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, return {
   "value": invocation {
    "caller": property-access {
     "child": "generate",
     "parent": symbol {
      "content": "propertyRule"
      }
     },
    "arguments": [symbol {
     "content": "node1"
     }]
    }
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "node",
   "returns": symbol {
    "value": "Node"
    }
   }]
  }, implements {
  }]
 }]
}