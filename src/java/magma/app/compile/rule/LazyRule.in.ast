{
"children": [package {
 "namespace": ["magma.app.compile.rule"]
 }, import {
 "namespace": ["magma.api.result.Err"]
 }, import {
 "namespace": ["magma.app.compile.GenerateException"]
 }, import {
 "namespace": ["magma.app.compile.Node"]
 }, import {
 "namespace": ["magma.app.compile.ParseException"]
 }, import {
 "namespace": ["java.util.Optional"]
 }, class {
 "name": "LazyRule implements Rule ",
 "children": [declaration {
  "name": "childRule",
  "caller": property-access {
   "child": "empty",
   "parent": symbol {
    "content": "Optional"
    }
   },
  "returns": generic {
   "base": symbol {
    "value": "Optional"
    },
   "children": [symbol {
    "value": "Rule"
    }]
   },
  "modifiers": [modifier {
   "modifier-value": "private"
   }]
  }, method {
  "name": "setChildRule",
  "returns": symbol {
   "value": "void"
   },
  "children": [assignment {
   "child": "childRule",
   "parent": symbol {
    "content": "this"
    },
   "caller": property-access {
    "child": "of",
    "parent": symbol {
     "content": "Optional"
     }
    },
   "arguments": [symbol {
    "content": "childRule"
    }]
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "childRule",
   "returns": symbol {
    "value": "Rule"
    }
   }]
  }, method {
  "name": "parse",
  "returns": generic {
   "base": symbol {
    "value": "RuleResult"
    },
   "children": [symbol {
    "value": "Node"
    }, symbol {
    "value": "ParseException"
    }]
   },
  "children": [if {
   "content": " (childRule.isEmpty()) return new RuleResult<>(new Err<>(new ParseException("Child rule is not set", input)));"
   }, return {
   "value": invocation {
    "caller": property-access {
     "child": "parse",
     "parent": invocation {
      "caller": property-access {
       "child": "orElseThrow",
       "parent": symbol {
        "content": "childRule"
        }
       }
      }
     },
    "arguments": [symbol {
     "content": "input"
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "input",
   "returns": symbol {
    "value": "String"
    }
   }]
  }, method {
  "name": "generate",
  "returns": generic {
   "base": symbol {
    "value": "RuleResult"
    },
   "children": [symbol {
    "value": "String"
    }, symbol {
    "value": "GenerateException"
    }]
   },
  "children": [if {
   "content": " (childRule.isEmpty())
            return new RuleResult<>(new Err<>(new GenerateException("Child rule is not set", node)));"
   }, return {
   "value": invocation {
    "caller": property-access {
     "child": "generate",
     "parent": invocation {
      "caller": property-access {
       "child": "orElseThrow",
       "parent": symbol {
        "content": "childRule"
        }
       }
      }
     },
    "arguments": [symbol {
     "content": "node"
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "node",
   "returns": symbol {
    "value": "Node"
    }
   }]
  }, whitespace {
  }],
 "modifiers": [modifier {
  "modifier-value": "public"
  }]
 }, whitespace {
 }]
}