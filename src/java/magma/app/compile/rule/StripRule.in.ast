{
"children": [package {
 "namespace": ["magma", "app", "compile", "rule"]
 }, import {
 "namespace": ["magma", "app", "compile", "GenerateException"]
 }, import {
 "namespace": ["magma", "app", "compile", "Node"]
 }, import {
 "namespace": ["magma", "app", "compile", "ParseException"]
 }, record {
 "name": "StripRule",
 "params-and-body": "Rule childRule, String leftPaddingKey, String rightPaddingKey) implements Rule {
    @Override
    public RuleResult<Node, ParseException> parse(String input) {
        return childRule.parse(input.strip());
    }

    @Override
    public RuleResult<String, GenerateException> generate(Node node) {
        final var leftPadding = node.findString(leftPaddingKey).orElse("");
        final var rightPadding = node.findString(rightPaddingKey).orElse("");
        return childRule.generate(node).mapValue(inner -> leftPadding + inner + rightPadding);
    }
}",
 "modifiers": ["public"]
 }]
}