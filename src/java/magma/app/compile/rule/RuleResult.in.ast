{
"children": [package {
 "namespace": ["magma", "app", "compile", "rule"]
 }, import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "api", "result", "Result"]
 }, import {
 "namespace": ["java", "util", "Collections"]
 }, import {
 "namespace": ["java", "util", "List"]
 }, import {
 "namespace": ["java", "util", "function", "Function"]
 }, import {
 "namespace": ["static java", "util", "Collections", "singletonList"]
 }, record {
 "name": "RuleResult",
 "body": " {
    public RuleResult(Result<T, E> result) {
        this(result, Collections.emptyList());
    }

    @Deprecated
    public Result<T, E> unwrap() {
        return result;
    }

    public boolean isValid() {
        return result.isOk();
    }

    public RuleResult<T, E> mapValue(Function<T, T> mapper) {
        return new RuleResult<>(result.mapValue(mapper), children);
    }

    public RuleResult<T, E> wrapErr(E error) {
        if (!isError()) return this;

        var list = singletonList(this);
        return new RuleResult<>(new Err<>(error), list);
    }

    public boolean isError() {
        return result.isErr();
    }
}",
 "modifiers": ["public"],
 "type-params": [symbol {
  "type": "T,"
  }, symbol {
  "type": "E"
  }],
 "params": [definition {
  "type": "Result<T, E>",
  "name": "result,"
  }, definition {
  "type": " List<RuleResult<T, E>>",
  "name": "children"
  }]
 }]
}