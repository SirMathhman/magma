{
"children": [package {
 "namespace": ["magma", "app", "compile", "rule"]
 }, import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "api", "result", "Result"]
 }, import {
 "namespace": ["java", "util", "Collections"]
 }, import {
 "namespace": ["java", "util", "Comparator"]
 }, import {
 "namespace": ["java", "util", "List"]
 }, import {
 "namespace": ["java", "util", "function", "Function"]
 }, import {
 "namespace": ["static java", "util", "Collections", "singletonList"]
 }, record {
 "name": "RuleResult",
 "modifiers": ["public"],
 "children": [method {
  "name": "RuleResult",
  "content": " {
        this(result, Collections.emptyList());
    }",
  "params": content {
   "params": "Result<T, E> result"
   },
  "returns": symbol {
   "type": "public"
   }
  }, method {
  "name": "unwrap",
  "content": " {
        return result;
    }",
  "returns": generic {
   "base": symbol {
    "type": "@Deprecated
    public Result"
    },
   "children": [symbol {
    "type": "T"
    }, symbol {
    "type": "E"
    }]
   }
  }, method {
  "name": "isValid",
  "content": " {
        return result.isOk();
    }",
  "returns": symbol {
   "type": "public boolean"
   }
  }, method {
  "name": "mapValue",
  "content": " {
        return new RuleResult<>(result.mapValue(mapper), children);
    }",
  "params": content {
   "params": "Function<T, T> mapper"
   },
  "returns": generic {
   "base": symbol {
    "type": "public RuleResult"
    },
   "children": [symbol {
    "type": "T"
    }, symbol {
    "type": "E"
    }]
   }
  }, method {
  "name": "wrapErr",
  "content": " {
        if (!isError()) return this;

        var list = singletonList(this);
        return new RuleResult<>(new Err<>(error), list);
    }",
  "params": content {
   "params": "E error"
   },
  "returns": generic {
   "base": symbol {
    "type": "public RuleResult"
    },
   "children": [symbol {
    "type": "T"
    }, symbol {
    "type": "E"
    }]
   }
  }, method {
  "name": "isError",
  "content": " {
        return result.isErr();
    }",
  "returns": symbol {
   "type": "public boolean"
   }
  }, method {
  "name": "depth",
  "content": " {
        return 1 + children.stream()
                .map(RuleResult::depth)
                .max(Integer::compare)
                .orElse(0);
    }",
  "returns": symbol {
   "type": "public int"
   }
  }, method {
  "name": "sortedChildren",
  "content": " {
        return children.stream()
                .sorted(Comparator.comparingInt(RuleResult::depth))
                .toList();
    }",
  "returns": generic {
   "base": symbol {
    "type": "public List"
    },
   "children": [generic {
    "base": symbol {
     "type": "RuleResult"
     },
    "children": [symbol {
     "type": "T"
     }, symbol {
     "type": "E"
     }]
    }]
   }
  }],
 "type-params": [symbol {
  "type": "T"
  }, symbol {
  "type": "E"
  }],
 "params": [definition {
  "type": "Result<T, E>",
  "name": "result"
  }, definition {
  "type": " List<RuleResult<T, E>>",
  "name": "children"
  }]
 }]
}