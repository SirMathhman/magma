{
"children": [package {
 "namespace": ["magma", "app", "compile", "rule"]
 }, import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "api", "result", "Result"]
 }, import {
 "namespace": ["java", "util", "Collections"]
 }, import {
 "namespace": ["java", "util", "Comparator"]
 }, import {
 "namespace": ["java", "util", "List"]
 }, import {
 "namespace": ["java", "util", "function", "Function"]
 }, import {
 "namespace": ["static java", "util", "Collections", "singletonList"]
 }, record {
 "name": "RuleResult",
 "modifiers": ["public"],
 "children": [method {
  "name": "RuleResult",
  "params": content {
   "params": "Result<T, E> result"
   },
  "returns": symbol {
   "type": "public"
   },
  "children": [any {
   "content": "this(result, Collections.emptyList());"
   }]
  }, method {
  "name": "unwrap",
  "modifiers": ["public", "Result<T,"],
  "returns": symbol {
   "type": "E>"
   },
  "annotations": [{
   "annotation": "Deprecated"
   }],
  "children": [return {
   "value": any {
    "content": "result"
    }
   }]
  }, method {
  "name": "isValid",
  "modifiers": ["public"],
  "returns": symbol {
   "type": "boolean"
   },
  "children": [return {
   "value": any {
    "content": "result.isOk()"
    }
   }]
  }, method {
  "name": "mapValue",
  "modifiers": ["public", "RuleResult<T,"],
  "params": content {
   "params": "Function<T, T> mapper"
   },
  "returns": symbol {
   "type": "E>"
   },
  "children": [return {
   "value": any {
    "content": "new RuleResult<>(result.mapValue(mapper), children)"
    }
   }]
  }, method {
  "name": "wrapErr",
  "modifiers": ["public", "RuleResult<T,"],
  "params": content {
   "params": "E error"
   },
  "returns": symbol {
   "type": "E>"
   },
  "children": [any {
   "content": "if (!isError()) return this;"
   }, any {
   "content": "var list = singletonList(this);"
   }, return {
   "value": any {
    "content": "new RuleResult<>(new Err<>(error), list)"
    }
   }]
  }, method {
  "name": "isError",
  "modifiers": ["public"],
  "returns": symbol {
   "type": "boolean"
   },
  "children": [return {
   "value": any {
    "content": "result.isErr()"
    }
   }]
  }, method {
  "name": "depth",
  "modifiers": ["public"],
  "returns": symbol {
   "type": "int"
   },
  "children": [return {
   "value": any {
    "content": "1 + children.stream()
                .map(RuleResult::depth)
                .max(Integer::compare)
                .orElse(0)"
    }
   }]
  }, method {
  "name": "sortedChildren",
  "modifiers": ["public", "List<RuleResult<T,"],
  "returns": symbol {
   "type": "E>>"
   },
  "children": [return {
   "value": any {
    "content": "children.stream()
                .sorted(Comparator.comparingInt(RuleResult::depth))
                .toList()"
    }
   }]
  }],
 "type-params": [symbol {
  "type": "T"
  }, symbol {
  "type": "E"
  }],
 "params": [definition {
  "type": "Result<T, E>",
  "name": "result"
  }, definition {
  "type": " List<RuleResult<T, E>>",
  "name": "children"
  }]
 }]
}