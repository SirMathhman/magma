{
"children": [import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "api"
  }, segment {
  "segment": "result"
  }, segment {
  "segment": "Err"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "GenerateException"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "Node"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "ParseException"
  }]
 }, function {
 "name": "TypeRule",
 "interface": symbol {
  "namespace": [segment {
   "segment": "Rule"
   }]
  },
 "modifiers": [modifier {
  "modifier-value": "export"
  }, modifier {
  "modifier-value": "class"
  }],
 "params": [definition {
  "name": "type",
  "returns": symbol {
   "namespace": [segment {
    "segment": "String"
    }]
   }
  }, definition {
  "name": "rule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "Rule"
    }]
   }
  }],
 "children": [method {
  "name": "parse",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "RuleResult"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "Node"
     }]
    }, symbol {
    "namespace": [segment {
     "segment": "ParseException"
     }]
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "wrapErr",
     "parent": invocation {
      "caller": property-access {
       "child": "mapValue",
       "parent": invocation {
        "caller": property-access {
         "child": "parse",
         "parent": symbol {
          "content": "rule"
          }
         },
        "arguments": [symbol {
         "content": "input"
         }]
        }
       },
      "arguments": [invocation {
       "caller": property-access {
        "child": "retype",
        "parent": lambda {
         "before-arrow": "node ",
         "after-arrow": " node"
         }
        },
       "arguments": [symbol {
        "content": "type"
        }]
       }]
      }
     },
    "arguments": [construction {
     "caller": symbol {
      "content": "ParseException"
      },
     "arguments": [string {
      "value": "Failed to assign type '" + type + "'"
      }, symbol {
      "content": "input"
      }]
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "input",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "generate",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "RuleResult"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }, symbol {
    "namespace": [segment {
     "segment": "GenerateException"
     }]
    }]
   },
  "children": [if {
   "content": " (!node.is(type))
            return new RuleResult<>(new Err<>(new GenerateException("Expected a type of '" + type + "'", node)));"
   }, return {
   "value": invocation {
    "caller": property-access {
     "child": "generate",
     "parent": symbol {
      "content": "rule"
      }
     },
    "arguments": [symbol {
     "content": "node"
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "node",
   "returns": symbol {
    "namespace": [segment {
     "segment": "Node"
     }]
    }
   }]
  }, implements {
  }]
 }, whitespace {
 }]
}