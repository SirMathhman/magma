{
"children": [import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "app", "compile", "GenerateException"]
 }, import {
 "namespace": ["magma", "app", "compile", "Node"]
 }, import {
 "namespace": ["magma", "app", "compile", "ParseException"]
 }, function {
 "name": "TypeRule",
 "modifiers": ["public"],
 "interface": symbol {
  "type": "Rule"
  },
 "children": [method {
  "name": "parse",
  "content": " {
        return rule.parse(input)
                .mapValue(node -> node.retype(type))
                .wrapErr(new ParseException("Failed to assign type '+ type + "' input));
    }",
  "params": content {
   "params": "String input"
   },
  "returns": generic {
   "base": symbol {
    "type": "@Override
    public RuleResult"
    },
   "children": [symbol {
    "type": "Node"
    }, symbol {
    "type": "ParseException"
    }]
   }
  }, method {
  "name": "generate",
  "content": " {
        if (!node.is(type))
            return new RuleResult<>(new Err<>(new GenerateException("Expected a type of '+ type + "' node)));
        return rule.generate(node);
    }",
  "params": content {
   "params": "Node node"
   },
  "returns": generic {
   "base": symbol {
    "type": "@Override
    public RuleResult"
    },
   "children": [symbol {
    "type": "String"
    }, symbol {
    "type": "GenerateException"
    }]
   }
  }],
 "params": [definition {
  "type": "String",
  "name": "type"
  }, definition {
  "type": " Rule",
  "name": "rule"
  }]
 }]
}