{
"children": [import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "app", "compile", "GenerateException"]
 }, import {
 "namespace": ["magma", "app", "compile", "Node"]
 }, import {
 "namespace": ["magma", "app", "compile", "ParseException"]
 }, function {
 "modifiers": "public ",
 "name": "TypeRule",
 "params-and-body": "String type, Rule rule) implements Rule {
    @Override
    public RuleResult<Node, ParseException> parse(String input) {
        return rule.parse(input)
                .mapValue(node -> node.retype(type))
                .wrapErr(new ParseException("Failed to assign type '" + type + "'", input));
    }

    @Override
    public RuleResult<String, GenerateException> generate(Node node) {
        if (!node.is(type))
            return new RuleResult<>(new Err<>(new GenerateException("Expected a type of '" + type + "'", node)));
        return rule.generate(node);
    }
}"
 }]
}