{
"children": [package {
 "namespace": ["magma", "app", "compile", "rule"]
 }, import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "app", "compile", "GenerateException"]
 }, import {
 "namespace": ["magma", "app", "compile", "Node"]
 }, import {
 "namespace": ["magma", "app", "compile", "ParseException"]
 }, record {
 "name": "PrefixRule",
 "interface": symbol {
  "value": "Rule"
  },
 "modifiers": [modifier {
  "content": "public"
  }],
 "params": [definition {
  "name": "prefix",
  "content": "String"
  }, definition {
  "name": "childRule",
  "content": "Rule"
  }],
 "children": [method {
  "name": "parse",
  "content": "RuleResult<Node, ParseException>",
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "input",
   "content": "String"
   }],
  "children": [symbol {
   "content": "if (!input.startsWith(prefix))
            return new RuleResult<>(new Err<>(new ParseException("Prefix ' prefix + "'t present", input)));"
   }, return {
   "value": invocation {
    "caller": access {
     "name": "parse",
     "parent": symbol {
      "content": "childRule"
      }
     },
    "arguments": [invocation {
     "caller": access {
      "name": "substring",
      "parent": symbol {
       "content": "input"
       }
      },
     "arguments": [invocation {
      "caller": access {
       "name": "length",
       "parent": symbol {
        "content": "prefix"
        }
       },
      "arguments": []
      }]
     }]
    }
   }]
  }, method {
  "name": "generate",
  "content": "RuleResult<String, GenerateException>",
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "node",
   "content": "Node"
   }],
  "children": [return {
   "value": invocation {
    "caller": access {
     "name": "generate",
     "parent": symbol {
      "content": "childRule"
      }
     },
    "arguments": [access {
     "name": "mapValue(value -> prefix + value",
     "parent": symbol {
      "content": "node)"
      }
     }]
    }
   }]
  }]
 }]
}