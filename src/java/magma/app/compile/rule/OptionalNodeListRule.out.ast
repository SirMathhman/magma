{
"children": [import {
 "after-import": "
",
 "namespace": ["magma.app.compile.GenerateException"]
 }, import {
 "after-import": "
",
 "namespace": ["magma.app.compile.Node"]
 }, import {
 "after-import": "
",
 "namespace": ["magma.app.compile.ParseException"]
 }, import {
 "after-import": "
",
 "namespace": ["java.util.List"]
 }, function {
 "name": "OptionalNodeListRule implements Rule ",
 "body": "
    private final String propertyKey;
    private final Rule ifPresent;
    private final Rule ifEmpty;
    private final OrRule maybe;

    public OptionalNodeListRule(String propertyKey, Rule ifEmpty, Rule ifPresent) {
        this.propertyKey = propertyKey;
        this.ifPresent = ifPresent;
        this.ifEmpty = ifEmpty;
        maybe = new OrRule(List.of(ifPresent, ifEmpty));
    }

    @Override
    public RuleResult<Node, ParseException> parse(String input) {
        return maybe.parse(input);
    }

    @Override
    public RuleResult<String, GenerateException> generate(Node node) {
        if (node.hasNodeList(propertyKey)) {
            return ifPresent.generate(node);
        } else {
            return ifEmpty.generate(node);
        }
    }
}",
 "modifiers": [modifier {
  "modifier-value": "public"
  }, modifier {
  "modifier-value": "final"
  }]
 }]
}