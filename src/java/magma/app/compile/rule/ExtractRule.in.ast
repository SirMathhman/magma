{
"children": [package {
 "namespace": ["magma", "app", "compile", "rule"]
 }, import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "api", "result", "Ok"]
 }, import {
 "namespace": ["magma", "app", "compile", "GenerateException"]
 }, import {
 "namespace": ["magma", "app", "compile", "MapNode"]
 }, import {
 "namespace": ["magma", "app", "compile", "Node"]
 }, import {
 "namespace": ["magma", "app", "compile", "ParseException"]
 }, record {
 "name": "ExtractRule",
 "modifiers": ["public"],
 "interface": symbol {
  "type": "Rule"
  },
 "children": [method {
  "name": "parse",
  "content": " {
        if (input.isEmpty()) return new RuleResult<>(new Err<>(new ParseException("Input is empty", input)));
        return new RuleResult<>(new Ok<>(new MapNode().withString(propertyKey, input)));
    }",
  "params": content {
   "params": "String input"
   },
  "returns": generic {
   "base": symbol {
    "type": "@Override
    public RuleResult"
    },
   "children": [symbol {
    "type": "Node"
    }, symbol {
    "type": "ParseException"
    }]
   }
  }, method {
  "name": "generate",
  "content": " {
        return node.findString(propertyKey)
                .<RuleResult<String, GenerateException>>map(s -> new RuleResult<>(new Ok<>(s)))
                .orElseGet(() -> new RuleResult<>(new Err<>(new GenerateException("String '+ propertyKey + "'ot present", node))));

    }",
  "params": content {
   "params": "Node node"
   },
  "returns": generic {
   "base": symbol {
    "type": "@Override
    public RuleResult"
    },
   "children": [symbol {
    "type": "String"
    }, symbol {
    "type": "GenerateException"
    }]
   }
  }],
 "params": [definition {
  "type": "String",
  "name": "propertyKey"
  }]
 }]
}