{
"children": [package {
 "namespace": "magma.app.compile.rule"
 }, import {
 "namespace": "magma.api.result.Err"
 }, import {
 "namespace": "magma.api.result.Ok"
 }, import {
 "namespace": "magma.app.compile.GenerateException"
 }, import {
 "namespace": "magma.app.compile.MapNode"
 }, import {
 "namespace": "magma.app.compile.Node"
 }, import {
 "namespace": "magma.app.compile.ParseException"
 }, record {
 "modifiers": "public ",
 "name": "ExtractRule",
 "params-and-body": "String propertyKey) implements Rule {

    @Override
    public RuleResult<Node, ParseException> parse(String input) {
        if (input.isEmpty()) return new RuleResult<>(new Err<>(new ParseException("Input is empty", input)));
        return new RuleResult<>(new Ok<>(new MapNode().withString(propertyKey, input)));
    }

    @Override
    public RuleResult<String, GenerateException> generate(Node node) {
        return node.findString(propertyKey)
                .<RuleResult<String, GenerateException>>map(s -> new RuleResult<>(new Ok<>(s)))
                .orElseGet(() -> new RuleResult<>(new Err<>(new GenerateException("String '" + propertyKey + "' not present", node))));

    }
}"
 }]
}