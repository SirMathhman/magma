{
"children": [import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "app", "compile", "GenerateException"]
 }, import {
 "namespace": ["magma", "app", "compile", "Node"]
 }, import {
 "namespace": ["magma", "app", "compile", "ParseException"]
 }, import {
 "namespace": ["java", "util", "ArrayList"]
 }, import {
 "namespace": ["java", "util", "List"]
 }, function {
 "name": "OrRule",
 "interface": symbol {
  "value": "Rule"
  },
 "modifiers": [modifier {
  "content": "public"
  }],
 "params": [definition {
  "name": "rules",
  "returns": generic {
   "base": symbol {
    "value": "List"
    },
   "children": [symbol {
    "value": "Rule"
    }]
   }
  }],
 "children": [method {
  "name": "parse",
  "returns": generic {
   "base": symbol {
    "value": "RuleResult"
    },
   "children": [symbol {
    "value": "Node"
    }, symbol {
    "value": "ParseException"
    }]
   },
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "input",
   "returns": symbol {
    "value": "String"
    }
   }],
  "children": [symbol {
   "content": "var list = new ArrayList<RuleResult<Node, ParseException>>();"
   }, symbol {
   "content": "for (Rule rule : rules) {
            final var parsed = rule.parse(input);
            if (parsed.isValid()) return parsed;
            list.add(parsed);
        }"
   }, symbol {
   "content": "return new RuleResult<>(new Err<>(new ParseException("No valid rule in disjunction", input)), list);"
   }]
  }, method {
  "name": "generate",
  "returns": generic {
   "base": symbol {
    "value": "RuleResult"
    },
   "children": [symbol {
    "value": "String"
    }, symbol {
    "value": "GenerateException"
    }]
   },
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "node",
   "returns": symbol {
    "value": "Node"
    }
   }],
  "children": [symbol {
   "content": "var list = new ArrayList<RuleResult<String, GenerateException>>();"
   }, symbol {
   "content": "for (Rule rule : rules) {
            final var generated = rule.generate(node);
            if (generated.isValid()) return generated;
            list.add(generated);
        }"
   }, symbol {
   "content": "return new RuleResult<>(new Err<>(new GenerateException("No valid rule in disjunction", node)), list);"
   }]
  }]
 }]
}