{
"children": [import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "GenerateException"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "Node"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "ParseException"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "List"
  }]
 }, function {
 "name": "OptionalNodeRule implements Rule ",
 "children": [definition {
  "name": "propertyKey",
  "returns": symbol {
   "namespace": [segment {
    "segment": "String"
    }]
   },
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "final"
   }]
  }, definition {
  "name": "ifPresent",
  "returns": symbol {
   "namespace": [segment {
    "segment": "Rule"
    }]
   },
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "final"
   }]
  }, definition {
  "name": "ifEmpty",
  "returns": symbol {
   "namespace": [segment {
    "segment": "Rule"
    }]
   },
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "final"
   }]
  }, definition {
  "name": "maybe",
  "returns": symbol {
   "namespace": [segment {
    "segment": "OrRule"
    }]
   },
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "final"
   }]
  }, method {
  "name": "OptionalNodeRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "public"
    }]
   },
  "children": [assignment {
   "content": "propertyKey",
   "child": "propertyKey",
   "parent": symbol {
    "content": "this"
    }
   }, assignment {
   "content": "ifPresent",
   "child": "ifPresent",
   "parent": symbol {
    "content": "this"
    }
   }, assignment {
   "content": "ifEmpty",
   "child": "ifEmpty",
   "parent": symbol {
    "content": "this"
    }
   }, assignment {
   "content": "maybe",
   "caller": symbol {
    "content": "OrRule"
    },
   "arguments": [invocation {
    "caller": property-access {
     "child": "of",
     "parent": symbol {
      "content": "List"
      }
     },
    "arguments": [symbol {
     "content": "ifPresent"
     }, symbol {
     "content": "ifEmpty"
     }]
    }]
   }, whitespace {
   }],
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }, definition {
   "name": "ifEmpty",
   "returns": symbol {
    "namespace": [segment {
     "segment": "Rule"
     }]
    }
   }, definition {
   "name": "ifPresent",
   "returns": symbol {
    "namespace": [segment {
     "segment": "Rule"
     }]
    }
   }]
  }, method {
  "name": "parse",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "RuleResult"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "Node"
     }]
    }, symbol {
    "namespace": [segment {
     "segment": "ParseException"
     }]
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "parse",
     "parent": symbol {
      "content": "maybe"
      }
     },
    "arguments": [symbol {
     "content": "input"
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "input",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "generate",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "RuleResult"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }, symbol {
    "namespace": [segment {
     "segment": "GenerateException"
     }]
    }]
   },
  "children": [if {
   "content": " (node.hasNode(propertyKey)) {
            return ifPresent.generate(node);
        }"
   }, else {
   "children": [return {
    "value": invocation {
     "caller": property-access {
      "child": "generate",
      "parent": symbol {
       "content": "ifEmpty"
       }
      },
     "arguments": [symbol {
      "content": "node"
      }]
     }
    }, whitespace {
    }]
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "node",
   "returns": symbol {
    "namespace": [segment {
     "segment": "Node"
     }]
    }
   }]
  }, whitespace {
  }],
 "modifiers": [modifier {
  "modifier-value": "public"
  }, modifier {
  "modifier-value": "final"
  }]
 }, whitespace {
 }]
}