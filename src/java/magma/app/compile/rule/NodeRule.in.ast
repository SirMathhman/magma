{
"children": [package {
 "namespace": ["magma", "app", "compile", "rule"]
 }, import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "app", "compile", "GenerateException"]
 }, import {
 "namespace": ["magma", "app", "compile", "MapNode"]
 }, import {
 "namespace": ["magma", "app", "compile", "Node"]
 }, import {
 "namespace": ["magma", "app", "compile", "ParseException"]
 }, record {
 "name": "NodeRule",
 "body": " implements Rule {
    @Override
    public RuleResult<Node, ParseException> parse(String input) {
        return propertyRule.parse(input).mapValue(node -> new MapNode().withNode(propertyKey, node));
    }

    @Override
    public RuleResult<String, GenerateException> generate(Node node) {
        final var optional = node.findNode(propertyKey);
        if (optional.isEmpty())
            return new RuleResult<>(new Err<>(new GenerateException("Node '" + propertyKey + "' does not exist.", node)));

        final var node1 = optional.get();
        return propertyRule.generate(node1);
    }
}",
 "modifiers": ["public"],
 "params": [definition {
  "type": "String",
  "name": "propertyKey,"
  }, definition {
  "type": " Rule",
  "name": "propertyRule"
  }]
 }]
}