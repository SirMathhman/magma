{
"children": [import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "api", "result", "Result"]
 }, import {
 "namespace": ["java", "util", "Collections"]
 }, import {
 "namespace": ["java", "util", "Comparator"]
 }, import {
 "namespace": ["java", "util", "List"]
 }, import {
 "namespace": ["java", "util", "function", "Function"]
 }, import {
 "namespace": ["static java", "util", "Collections", "singletonList"]
 }, function {
 "name": "RuleResult",
 "type-params": [symbol {
  "value": "T"
  }, symbol {
  "value": "E"
  }],
 "modifiers": [modifier {
  "content": "public"
  }],
 "params": [definition {
  "name": "result",
  "before-name": "Result<T, E>"
  }, definition {
  "name": "children",
  "before-name": " List<RuleResult<T, E>>"
  }],
 "children": [method {
  "name": "RuleResult",
  "before-name": "public",
  "children": [symbol {
   "content": "this(result, Collections.emptyList());"
   }],
  "params": [definition {
   "name": "result",
   "before-name": "Result<T, E>"
   }]
  }, method {
  "name": "unwrap",
  "before-name": "@Deprecated
    public Result<T, E>",
  "children": [return {
   "value": symbol {
    "content": "result"
    }
   }],
  "params": []
  }, method {
  "name": "isValid",
  "before-name": "public boolean",
  "children": [return {
   "value": invocation {
    "caller": access {
     "name": "isOk",
     "parent": symbol {
      "content": "result"
      }
     },
    "arguments": []
    }
   }],
  "params": []
  }, method {
  "name": "mapValue",
  "before-name": "public RuleResult<T, E>",
  "children": [return {
   "value": invocation {
    "caller": symbol {
     "content": "new RuleResult<>"
     },
    "arguments": [invocation {
     "caller": access {
      "name": "mapValue",
      "parent": symbol {
       "content": "result"
       }
      },
     "arguments": [symbol {
      "content": "mapper"
      }]
     }, symbol {
     "content": " children"
     }]
    }
   }],
  "params": [definition {
   "name": "mapper",
   "before-name": "Function<T, T>"
   }]
  }, method {
  "name": "wrapErr",
  "before-name": "public RuleResult<T, E>",
  "children": [symbol {
   "content": "if (!isError()) return this;"
   }, symbol {
   "content": "var list = singletonList(this);"
   }, return {
   "value": invocation {
    "caller": symbol {
     "content": "new RuleResult<>"
     },
    "arguments": [invocation {
     "caller": symbol {
      "content": "new Err<>"
      },
     "arguments": [symbol {
      "content": "error"
      }]
     }, symbol {
     "content": " list"
     }]
    }
   }],
  "params": [definition {
   "name": "error",
   "before-name": "E"
   }]
  }, method {
  "name": "isError",
  "before-name": "public boolean",
  "children": [return {
   "value": invocation {
    "caller": access {
     "name": "isErr",
     "parent": symbol {
      "content": "result"
      }
     },
    "arguments": []
    }
   }],
  "params": []
  }, method {
  "name": "depth",
  "before-name": "public int",
  "children": [return {
   "value": invocation {
    "caller": access {
     "name": "stream",
     "parent": symbol {
      "content": "1 + children"
      }
     },
    "arguments": [access {
     "name": "orElse(0",
     "parent": access {
      "name": "max(Integer::compare)
                ",
      "parent": access {
       "name": "map(RuleResult::depth)
                ",
       "parent": symbol {
        "content": ")
                "
        }
       }
      }
     }]
    }
   }],
  "params": []
  }, method {
  "name": "sortedChildren",
  "before-name": "public List<RuleResult<T, E>>",
  "children": [return {
   "value": invocation {
    "caller": access {
     "name": "stream",
     "parent": symbol {
      "content": "children"
      }
     },
    "arguments": [access {
     "name": "toList(",
     "parent": access {
      "name": "comparingInt(RuleResult::depth))
                ",
      "parent": access {
       "name": "sorted(Comparator",
       "parent": symbol {
        "content": ")
                "
        }
       }
      }
     }]
    }
   }],
  "params": []
  }]
 }]
}