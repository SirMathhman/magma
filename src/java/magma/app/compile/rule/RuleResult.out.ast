{
"children": [import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "api"
  }, segment {
  "segment": "result"
  }, segment {
  "segment": "Err"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "api"
  }, segment {
  "segment": "result"
  }, segment {
  "segment": "Result"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "Collections"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "Comparator"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "List"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "function"
  }, segment {
  "segment": "Function"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "Collections"
  }, segment {
  "segment": "singletonList"
  }]
 }, function {
 "name": "RuleResult",
 "type-params": [symbol {
  "namespace": [segment {
   "segment": "T"
   }]
  }, symbol {
  "namespace": [segment {
   "segment": "E"
   }]
  }],
 "modifiers": [modifier {
  "modifier-value": "public"
  }, modifier {
  "modifier-value": "class"
  }],
 "params": [definition {
  "name": "result",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Result"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "T"
     }]
    }, symbol {
    "namespace": [segment {
     "segment": "E"
     }]
    }]
   }
  }, definition {
  "name": "children",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "List"
     }]
    },
   "children": [generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "RuleResult"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "T"
      }]
     }, symbol {
     "namespace": [segment {
      "segment": "E"
      }]
     }]
    }]
   }
  }],
 "children": [method {
  "name": "RuleResult",
  "returns": symbol {
   "namespace": [segment {
    "segment": "public"
    }]
   },
  "children": [invocation {
   "caller": symbol {
    "content": "this"
    },
   "arguments": [symbol {
    "content": "result"
    }, invocation {
    "caller": property-access {
     "child": "emptyList",
     "parent": symbol {
      "content": "Collections"
      }
     }
    }]
   }, whitespace {
   }],
  "params": [definition {
   "name": "result",
   "returns": generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "Result"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "T"
      }]
     }, symbol {
     "namespace": [segment {
      "segment": "E"
      }]
     }]
    }
   }]
  }, method {
  "name": "unwrap",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Result"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "T"
     }]
    }, symbol {
    "namespace": [segment {
     "segment": "E"
     }]
    }]
   },
  "children": [return {
   "value": symbol {
    "content": "result"
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Deprecated"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }]
  }, method {
  "name": "isValid",
  "returns": symbol {
   "namespace": [segment {
    "segment": "boolean"
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "isOk",
     "parent": symbol {
      "content": "result"
      }
     }
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }]
  }, method {
  "name": "mapValue",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "RuleResult"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "T"
     }]
    }, symbol {
    "namespace": [segment {
     "segment": "E"
     }]
    }]
   },
  "children": [return {
   "value": construction {
    "caller": symbol {
     "content": "RuleResult"
     },
    "arguments": [invocation {
     "caller": property-access {
      "child": "mapValue",
      "parent": symbol {
       "content": "result"
       }
      },
     "arguments": [symbol {
      "content": "mapper"
      }]
     }, symbol {
     "content": "children"
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "mapper",
   "returns": generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "Function"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "T"
      }]
     }, symbol {
     "namespace": [segment {
      "segment": "T"
      }]
     }]
    }
   }]
  }, method {
  "name": "wrapErr",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "RuleResult"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "T"
     }]
    }, symbol {
    "namespace": [segment {
     "segment": "E"
     }]
    }]
   },
  "children": [if {
   "content": " (!isError()) return this;"
   }, declaration {
   "name": "list",
   "caller": symbol {
    "content": "singletonList"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "arguments": [symbol {
    "content": "this"
    }]
   }, return {
   "value": construction {
    "caller": symbol {
     "content": "RuleResult"
     },
    "arguments": [construction {
     "caller": symbol {
      "content": "Err"
      },
     "arguments": [symbol {
      "content": "error"
      }]
     }, symbol {
     "content": "list"
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "error",
   "returns": symbol {
    "namespace": [segment {
     "segment": "E"
     }]
    }
   }]
  }, method {
  "name": "isError",
  "returns": symbol {
   "namespace": [segment {
    "segment": "boolean"
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "isErr",
     "parent": symbol {
      "content": "result"
      }
     }
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }]
  }, method {
  "name": "depth",
  "returns": symbol {
   "namespace": [segment {
    "segment": "int"
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": addition {
     "left": number {
      "value": "1"
      },
     "right": property-access {
      "child": "orElse",
      "parent": invocation {
       "caller": property-access {
        "child": "max",
        "parent": invocation {
         "caller": property-access {
          "child": "map",
          "parent": invocation {
           "caller": property-access {
            "child": "stream",
            "parent": symbol {
             "content": "children"
             }
            }
           }
          },
         "arguments": [method-access {
          "child": "depth",
          "parent": symbol {
           "content": "RuleResult"
           }
          }]
         }
        },
       "arguments": [method-access {
        "child": "compare",
        "parent": symbol {
         "content": "Integer"
         }
        }]
       }
      }
     },
    "arguments": [number {
     "value": "0"
     }]
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }]
  }, method {
  "name": "sortedChildren",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "List"
     }]
    },
   "children": [generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "RuleResult"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "T"
      }]
     }, symbol {
     "namespace": [segment {
      "segment": "E"
      }]
     }]
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "toList",
     "parent": invocation {
      "caller": property-access {
       "child": "sorted",
       "parent": invocation {
        "caller": property-access {
         "child": "stream",
         "parent": symbol {
          "content": "children"
          }
         }
        }
       },
      "arguments": [invocation {
       "caller": property-access {
        "child": "comparingInt",
        "parent": symbol {
         "content": "Comparator"
         }
        },
       "arguments": [method-access {
        "child": "depth",
        "parent": symbol {
         "content": "RuleResult"
         }
        }]
       }]
      }
     }
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }]
  }, implements {
  }]
 }, whitespace {
 }]
}