{
"children": [import {
 "namespace": ["magma", "app", "compile", "GenerateException"]
 }, import {
 "namespace": ["magma", "app", "compile", "Node"]
 }, import {
 "namespace": ["magma", "app", "compile", "ParseException"]
 }, function {
 "name": "StripRule",
 "body": " implements Rule {
    @Override
    public RuleResult<Node, ParseException> parse(String input) {
        return childRule.parse(input.strip());
    }

    @Override
    public RuleResult<String, GenerateException> generate(Node node) {
        final var leftPadding = node.findString(leftPaddingKey).orElse("");
        final var rightPadding = node.findString(rightPaddingKey).orElse("");
        return childRule.generate(node).mapValue(inner -> leftPadding + inner + rightPadding);
    }
}",
 "modifiers": ["public"],
 "params": [definition {
  "type": "Rule",
  "name": "childRule,"
  }, definition {
  "type": " String",
  "name": "leftPaddingKey,"
  }, definition {
  "type": " String",
  "name": "rightPaddingKey"
  }]
 }]
}