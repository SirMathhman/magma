{
"children": [import {
 "namespace": ["magma", "app", "compile", "GenerateException"]
 }, import {
 "namespace": ["magma", "app", "compile", "Node"]
 }, import {
 "namespace": ["magma", "app", "compile", "ParseException"]
 }, function {
 "name": "StripRule",
 "interface": symbol {
  "type": "Rule"
  },
 "modifiers": [modifier {
  "content": "public"
  }],
 "params": [definition {
  "name": "childRule",
  "type": symbol {
   "type": "Rule"
   }
  }, definition {
  "name": "leftPaddingKey",
  "type": symbol {
   "type": "String"
   }
  }, definition {
  "name": "rightPaddingKey",
  "type": symbol {
   "type": "String"
   }
  }],
 "children": [method {
  "modifiers": "@Override
    public RuleResult<Node, ParseException>",
  "name": "parse",
  "params": definition {
   "name": "input",
   "type": symbol {
    "type": "String"
    }
   },
  "children": [return {
   "value": invocation {
    "caller": access {
     "name": "parse",
     "parent": symbol {
      "content": "childRule"
      }
     },
    "arguments": [invocation {
     "caller": access {
      "name": "strip",
      "parent": symbol {
       "content": "input"
       }
      },
     "arguments": []
     }]
    }
   }]
  }, method {
  "modifiers": "@Override
    public RuleResult<String, GenerateException>",
  "name": "generate",
  "params": definition {
   "name": "node",
   "type": symbol {
    "type": "Node"
    }
   },
  "children": [symbol {
   "content": "final var leftPadding = node.findString(leftPaddingKey).orElse("");"
   }, symbol {
   "content": "final var rightPadding = node.findString(rightPaddingKey).orElse("");"
   }, return {
   "value": invocation {
    "caller": access {
     "name": "generate",
     "parent": symbol {
      "content": "childRule"
      }
     },
    "arguments": [access {
     "name": "mapValue(inner -> leftPadding + inner + rightPadding",
     "parent": symbol {
      "content": "node)"
      }
     }]
    }
   }]
  }]
 }]
}