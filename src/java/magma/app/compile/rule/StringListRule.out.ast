{
"children": [import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "api", "result", "Ok"]
 }, import {
 "namespace": ["magma", "app", "compile", "GenerateException"]
 }, import {
 "namespace": ["magma", "app", "compile", "MapNode"]
 }, import {
 "namespace": ["magma", "app", "compile", "Node"]
 }, import {
 "namespace": ["magma", "app", "compile", "ParseException"]
 }, import {
 "namespace": ["java", "util", "Arrays"]
 }, function {
 "name": "StringListRule",
 "interface": symbol {
  "value": "Rule"
  },
 "modifiers": [modifier {
  "content": "public"
  }],
 "params": [definition {
  "name": "propertyKey",
  "before-name": "String"
  }, definition {
  "name": "delimiter",
  "before-name": " String"
  }],
 "children": [method {
  "name": "parse",
  "before-name": "@Override
    public RuleResult<Node, ParseException>",
  "children": [symbol {
   "content": "final var args = Arrays.stream(input.split(delimiter))
                .filter(value -> !value.isEmpty())
                .toList();"
   }, symbol {
   "content": "if (args.isEmpty()) return new RuleResult<>(new Err<>(new ParseException("No items present", input)));"
   }, return {
   "value": invocation {
    "caller": symbol {
     "content": "new RuleResult<>"
     },
    "arguments": [access {
     "name": "withStringList(propertyKey",
     "parent": invocation {
      "caller": symbol {
       "content": "new Ok<>"
       },
      "arguments": [symbol {
       "content": "new MapNode("
       }]
      }
     }, symbol {
     "content": " args))"
     }]
    }
   }],
  "params": [definition {
   "name": "input",
   "before-name": "String"
   }]
  }, method {
  "name": "generate",
  "before-name": "@Override
    public RuleResult<String, GenerateException>",
  "children": [symbol {
   "content": "final var list = node.findStringList(propertyKey);"
   }, symbol {
   "content": "if (list.isEmpty())
            return new RuleResult<>(new Err<>(new GenerateException("String list ' propertyKey + "'t present", node)));"
   }, symbol {
   "content": "final var joined = String.join(delimiter, list.get());"
   }, return {
   "value": invocation {
    "caller": symbol {
     "content": "new RuleResult<>"
     },
    "arguments": [invocation {
     "caller": symbol {
      "content": "new Ok<>"
      },
     "arguments": [symbol {
      "content": "joined"
      }]
     }]
    }
   }],
  "params": [definition {
   "name": "node",
   "before-name": "Node"
   }]
  }]
 }]
}