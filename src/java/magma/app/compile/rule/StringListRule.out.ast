{
"children": [import {
 "after-import": "
",
 "namespace": ["magma.api.result.Err"]
 }, import {
 "after-import": "
",
 "namespace": ["magma.api.result.Ok"]
 }, import {
 "after-import": "
",
 "namespace": ["magma.app.compile.GenerateException"]
 }, import {
 "after-import": "
",
 "namespace": ["magma.app.compile.MapNode"]
 }, import {
 "after-import": "
",
 "namespace": ["magma.app.compile.Node"]
 }, import {
 "after-import": "
",
 "namespace": ["magma.app.compile.ParseException"]
 }, import {
 "after-import": "
",
 "namespace": ["java.util.ArrayList"]
 }, import {
 "after-import": "
",
 "namespace": ["java.util.List"]
 }, function {
 "name": "StringListRule",
 "interface": symbol {
  "value": "Rule"
  },
 "modifiers": [modifier {
  "modifier-value": "export"
  }],
 "params": [definition {
  "name": "propertyKey",
  "returns": symbol {
   "value": "String"
   }
  }, definition {
  "name": "delimiter",
  "returns": symbol {
   "value": "String"
   }
  }],
 "children": [method {
  "name": "parse",
  "returns": generic {
   "base": symbol {
    "value": "RuleResult"
    },
   "children": [symbol {
    "value": "Node"
    }, symbol {
    "value": "ParseException"
    }]
   },
  "children": [invocation {
   "caller": property-access {
    "child": "toList",
    "parent": lambda {
     "before-arrow": "final var args = split(input)
                .stream()
                .filter(value ",
     "after-arrow": " !value.isEmpty())
                "
     }
    }
   }, if {
   "content": " (args.isEmpty()) return new RuleResult<>(new Err<>(new ParseException("No items present", input)));"
   }, return {
   "value": construction {
    "caller": symbol {
     "content": "RuleResult"
     },
    "arguments": [construction {
     "caller": symbol {
      "content": "Ok"
      },
     "arguments": [invocation {
      "caller": property-access {
       "child": "withStringList",
       "parent": construction {
        "caller": symbol {
         "content": "MapNode"
         }
        }
       },
      "arguments": [symbol {
       "content": "propertyKey"
       }, symbol {
       "content": "args"
       }]
      }]
     }]
    }
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "input",
   "returns": symbol {
    "value": "String"
    }
   }]
  }, method {
  "name": "split",
  "returns": generic {
   "base": symbol {
    "value": "List"
    },
   "children": [symbol {
    "value": "String"
    }]
   },
  "children": [declaration {
   "name": "remaining",
   "content": "input",
   "returns": symbol {
    "value": "String"
    }
   }, declaration {
   "name": "parts",
   "caller": symbol {
    "content": "ArrayList"
    },
   "returns": generic {
    "base": symbol {
     "value": "List"
     },
    "children": [symbol {
     "value": "String"
     }]
    }
   }, while {
   "content": " (true) {
            var index = remaining.indexOf(delimiter);
            if (index == -1) break;

            parts.add(remaining.substring(0, index));
            remaining = remaining.substring(index + delimiter.length());
        }"
   }, invocation {
   "caller": property-access {
    "child": "add",
    "parent": symbol {
     "content": "parts"
     }
    },
   "arguments": [symbol {
    "content": "remaining"
    }]
   }, return {
   "value": symbol {
    "content": "parts"
    }
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }],
  "params": [definition {
   "name": "input",
   "returns": symbol {
    "value": "String"
    }
   }]
  }, method {
  "name": "generate",
  "returns": generic {
   "base": symbol {
    "value": "RuleResult"
    },
   "children": [symbol {
    "value": "String"
    }, symbol {
    "value": "GenerateException"
    }]
   },
  "children": [declaration {
   "name": "list",
   "caller": property-access {
    "child": "findStringList",
    "parent": symbol {
     "content": "node"
     }
    },
   "returns": symbol {
    "value": "var"
    },
   "arguments": [symbol {
    "content": "propertyKey"
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, if {
   "content": " (list.isEmpty())
            return new RuleResult<>(new Err<>(new GenerateException("String list '" + propertyKey + "' not present", node)));"
   }, declaration {
   "name": "joined",
   "caller": property-access {
    "child": "join",
    "parent": symbol {
     "content": "String"
     }
    },
   "returns": symbol {
    "value": "var"
    },
   "arguments": [symbol {
    "content": "delimiter"
    }, invocation {
    "caller": property-access {
     "child": "get",
     "parent": symbol {
      "content": "list"
      }
     }
    }],
   "modifiers": [modifier {
    "modifier-value": "final"
    }]
   }, return {
   "value": construction {
    "caller": symbol {
     "content": "RuleResult"
     },
    "arguments": [construction {
     "caller": symbol {
      "content": "Ok"
      },
     "arguments": [symbol {
      "content": "joined"
      }]
     }]
    }
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "node",
   "returns": symbol {
    "value": "Node"
    }
   }]
  }]
 }]
}