{
"children": [package {
 "namespace": ["magma", "app", "compile", "rule"]
 }, import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "api", "result", "Ok"]
 }, import {
 "namespace": ["magma", "app", "compile", "GenerateException"]
 }, import {
 "namespace": ["magma", "app", "compile", "MapNode"]
 }, import {
 "namespace": ["magma", "app", "compile", "Node"]
 }, import {
 "namespace": ["magma", "app", "compile", "ParseException"]
 }, import {
 "namespace": ["java", "util", "Arrays"]
 }, record {
 "name": "StringListRule",
 "modifiers": ["public"],
 "interface": symbol {
  "type": "Rule"
  },
 "children": [method {
  "name": "parse",
  "modifiers": ["@Override
", "public", "RuleResult<Node,"],
  "params": content {
   "params": "String input"
   },
  "returns": symbol {
   "type": "ParseException>"
   },
  "children": [any {
   "content": "final var args = Arrays.stream(input.split(delimiter))
                .filter(value -> !value.isEmpty())
                .toList();"
   }, any {
   "content": "if (args.isEmpty()) return new RuleResult<>(new Err<>(new ParseException("No items present", input)));"
   }, return {
   "value": any {
    "content": "new RuleResult<>(new Ok<>(new MapNode().withStringList(propertyKey, args)))"
    }
   }]
  }, method {
  "name": "generate",
  "modifiers": ["@Override
", "public", "RuleResult<String,"],
  "params": content {
   "params": "Node node"
   },
  "returns": symbol {
   "type": "GenerateException>"
   },
  "children": [any {
   "content": "final var list = node.findStringList(propertyKey);"
   }, any {
   "content": "if (list.isEmpty())
            return new RuleResult<>(new Err<>(new GenerateException("String list ' propertyKey + "'t present", node)));"
   }, any {
   "content": "final var joined = String.join(delimiter, list.get());"
   }, return {
   "value": any {
    "content": "new RuleResult<>(new Ok<>(joined))"
    }
   }]
  }],
 "params": [definition {
  "type": "String",
  "name": "propertyKey"
  }, definition {
  "type": " String",
  "name": "delimiter"
  }]
 }]
}