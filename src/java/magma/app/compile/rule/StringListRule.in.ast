{
"children": [package {
 "namespace": ["magma", "app", "compile", "rule"]
 }, import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "api", "result", "Ok"]
 }, import {
 "namespace": ["magma", "app", "compile", "GenerateException"]
 }, import {
 "namespace": ["magma", "app", "compile", "MapNode"]
 }, import {
 "namespace": ["magma", "app", "compile", "Node"]
 }, import {
 "namespace": ["magma", "app", "compile", "ParseException"]
 }, import {
 "namespace": ["java", "util", "Arrays"]
 }, record {
 "name": "StringListRule",
 "body": "
    @Override
    public RuleResult<Node, ParseException> parse(String input) {
        final var args = input.split(delimiter);
        if (args.length == 0) return new RuleResult<>(new Err<>(new ParseException("No items present", input)));

        return new RuleResult<>(new Ok<>(new MapNode().withStringList(propertyKey, Arrays.asList(args))));
    }

    @Override
    public RuleResult<String, GenerateException> generate(Node node) {
        final var list = node.findStringList(propertyKey);
        if (list.isEmpty())
            return new RuleResult<>(new Err<>(new GenerateException("String list '" + propertyKey + "' not present", node)));

        final var joined = String.join(delimiter, list.get());
        return new RuleResult<>(new Ok<>(joined));
    }
",
 "modifiers": ["public"],
 "interface": symbol {
  "type": "Rule"
  },
 "params": [definition {
  "type": "String",
  "name": "propertyKey"
  }, definition {
  "type": " String",
  "name": "delimiter"
  }]
 }]
}