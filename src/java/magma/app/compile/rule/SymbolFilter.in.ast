{
"children": [package {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "rule"
  }]
 }, class {
 "name": "SymbolFilter implements Filter ",
 "children": [method {
  "name": "isValid",
  "returns": symbol {
   "namespace": [segment {
    "segment": "boolean"
    }]
   },
  "children": [return {
   "value": equals {
    "left": or {
     "left": invocation {
      "caller": property-access {
       "child": "isLetter",
       "parent": symbol {
        "content": "Character"
        }
       },
      "arguments": [symbol {
       "content": "c"
       }]
      },
     "right": symbol {
      "content": "c"
      }
     },
    "right": equals {
     "left": or {
      "left": char {
       "value": "_"
       },
      "right": symbol {
       "content": "c"
       }
      },
     "right": or {
      "left": char {
       "value": "*"
       },
      "right": quantity {
       "value": invocation {
        "caller": not-equals {
         "left": symbol {
          "content": "index"
          },
         "right": and {
          "left": number {
           "value": "0"
           },
          "right": property-access {
           "child": "isDigit",
           "parent": symbol {
            "content": "Character"
            }
           }
          }
         },
        "arguments": [symbol {
         "content": "c"
         }]
        }
       }
      }
     }
    }
   }, whitespace {
   }],
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "static"
   }],
  "params": [definition {
   "name": "c",
   "returns": symbol {
    "namespace": [segment {
     "segment": "char"
     }]
    }
   }, definition {
   "name": "index",
   "returns": symbol {
    "namespace": [segment {
     "segment": "int"
     }]
    }
   }]
  }, method {
  "name": "filter",
  "returns": symbol {
   "namespace": [segment {
    "segment": "boolean"
    }]
   },
  "children": [declaration {
   "name": "i",
   "value": "0",
   "returns": symbol {
    "namespace": [segment {
     "segment": "int"
     }]
    }
   }, while {
   "content": " (i < input.length()) {
            final var c = input.charAt(i);
            if (!isValid(c, i)) return false;

            i++;
        }"
   }, return {
   "value": symbol {
    "content": "true"
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "input",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, whitespace {
  }],
 "modifiers": [modifier {
  "modifier-value": "public"
  }]
 }, whitespace {
 }]
}