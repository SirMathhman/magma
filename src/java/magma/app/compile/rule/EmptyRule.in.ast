{
"children": [package {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "rule"
  }]
 }, import {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "api"
  }, segment {
  "segment": "result"
  }, segment {
  "segment": "Err"
  }]
 }, import {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "api"
  }, segment {
  "segment": "result"
  }, segment {
  "segment": "Ok"
  }]
 }, import {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "GenerateException"
  }]
 }, import {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "MapNode"
  }]
 }, import {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "Node"
  }]
 }, import {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "ParseException"
  }]
 }, class {
 "name": "EmptyRule implements Rule ",
 "children": [method {
  "name": "parse",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "RuleResult"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "Node"
     }]
    }, symbol {
    "namespace": [segment {
     "segment": "ParseException"
     }]
    }]
   },
  "children": [return {
   "value": ternary {
    "condition": invocation {
     "caller": property-access {
      "child": "isEmpty",
      "parent": symbol {
       "content": "input"
       }
      }
     },
    "ifFalse": construction {
     "caller": symbol {
      "content": "RuleResult"
      },
     "arguments": [construction {
      "caller": symbol {
       "content": "Err"
       },
      "arguments": [construction {
       "caller": symbol {
        "content": "ParseException"
        },
       "arguments": [string {
        "value": "Input is not empty"
        }, symbol {
        "content": "input"
        }]
       }]
      }]
     },
    "ifTrue": construction {
     "caller": symbol {
      "content": "RuleResult"
      },
     "arguments": [construction {
      "caller": symbol {
       "content": "Ok"
       },
      "arguments": [construction {
       "caller": symbol {
        "content": "MapNode"
        }
       }]
      }]
     }
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "input",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "generate",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "RuleResult"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }, symbol {
    "namespace": [segment {
     "segment": "GenerateException"
     }]
    }]
   },
  "children": [return {
   "value": construction {
    "caller": symbol {
     "content": "RuleResult"
     },
    "arguments": [construction {
     "caller": symbol {
      "content": "Ok"
      },
     "arguments": [string {
      }]
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "node",
   "returns": symbol {
    "namespace": [segment {
     "segment": "Node"
     }]
    }
   }]
  }, whitespace {
  }],
 "modifiers": [modifier {
  "modifier-value": "public"
  }]
 }, whitespace {
 }]
}