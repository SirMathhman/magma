{
"children": [package {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "rule"
  }]
 }, import {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "api"
  }, segment {
  "segment": "result"
  }, segment {
  "segment": "Err"
  }]
 }, import {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "GenerateException"
  }]
 }, import {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "Node"
  }]
 }, import {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }, segment {
  "segment": "compile"
  }, segment {
  "segment": "ParseException"
  }]
 }, class {
 "name": "FilterRule implements Rule ",
 "children": [definition {
  "name": "childRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "Rule"
    }]
   },
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "final"
   }]
  }, definition {
  "name": "filter",
  "returns": symbol {
   "namespace": [segment {
    "segment": "Filter"
    }]
   },
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "final"
   }]
  }, method {
  "name": "FilterRule",
  "returns": symbol {
   "namespace": [segment {
    "segment": "public"
    }]
   },
  "children": [assignment {
   "content": "childRule",
   "child": "childRule",
   "parent": symbol {
    "content": "this"
    }
   }, assignment {
   "content": "filter",
   "child": "filter",
   "parent": symbol {
    "content": "this"
    }
   }, whitespace {
   }],
  "params": [definition {
   "name": "filter",
   "returns": symbol {
    "namespace": [segment {
     "segment": "Filter"
     }]
    }
   }, definition {
   "name": "childRule",
   "returns": symbol {
    "namespace": [segment {
     "segment": "Rule"
     }]
    }
   }]
  }, method {
  "name": "parse",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "RuleResult"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "Node"
     }]
    }, symbol {
    "namespace": [segment {
     "segment": "ParseException"
     }]
    }]
   },
  "children": [if {
   "content": " (filter.filter(input)) return childRule.parse(input);"
   }, return {
   "value": construction {
    "caller": symbol {
     "content": "RuleResult"
     },
    "arguments": [construction {
     "caller": symbol {
      "content": "Err"
      },
     "arguments": [construction {
      "caller": symbol {
       "content": "ParseException"
       },
      "arguments": [string {
       "value": "Value did not pass filter '" + filter + "'"
       }, symbol {
       "content": "input"
       }]
      }]
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "input",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "generate",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "RuleResult"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }, symbol {
    "namespace": [segment {
     "segment": "GenerateException"
     }]
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "generate",
     "parent": symbol {
      "content": "childRule"
      }
     },
    "arguments": [symbol {
     "content": "node"
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "node",
   "returns": symbol {
    "namespace": [segment {
     "segment": "Node"
     }]
    }
   }]
  }, whitespace {
  }],
 "modifiers": [modifier {
  "modifier-value": "public"
  }, modifier {
  "modifier-value": "final"
  }]
 }, whitespace {
 }]
}