{
"children": [package {
 "namespace": ["magma", "app", "compile", "rule"]
 }, import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "app", "compile", "GenerateException"]
 }, import {
 "namespace": ["magma", "app", "compile", "Node"]
 }, import {
 "namespace": ["magma", "app", "compile", "ParseException"]
 }, class {
 "name": "FilterRule implements Rule ",
 "body": "
    private final Rule childRule;
    private final Filter filter;

    public FilterRule(Filter filter, Rule childRule) {
        this.childRule = childRule;
        this.filter = filter;
    }

    @Override
    public RuleResult<Node, ParseException> parse(String input) {
        return filter.filter(input) ? childRule.parse(input) : new RuleResult<>(new Err<>(new ParseException("Invalid value", input)));
    }

    @Override
    public RuleResult<String, GenerateException> generate(Node node) {
        return childRule.generate(node);
    }
}",
 "before-keyword": "public final "
 }]
}