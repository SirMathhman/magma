{
"children": [import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "app", "compile", "GenerateException"]
 }, import {
 "namespace": ["magma", "app", "compile", "Node"]
 }, import {
 "namespace": ["magma", "app", "compile", "ParseException"]
 }, function {
 "name": "PrefixRule",
 "modifiers": ["public"],
 "interface": symbol {
  "type": "Rule"
  },
 "children": [any {
  "content": "
    @Override
    public RuleResult<Node, ParseException> parse(String input) {
        if (!input.startsWith(prefix))
            return new RuleResult<>(new Err<>(new ParseException("Prefix '+ prefix + "'ot present", input)));

        return childRule.parse(input.substring(prefix.length()));
    }"
  }, any {
  "content": "

    @Override
    public RuleResult<String, GenerateException> generate(Node node) {
        return childRule.generate(node).mapValue(value -> prefix + value);
    }"
  }],
 "params": [definition {
  "type": "String",
  "name": "prefix"
  }, definition {
  "type": " Rule",
  "name": "childRule"
  }]
 }]
}