{
"children": [import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "app", "compile", "GenerateException"]
 }, import {
 "namespace": ["magma", "app", "compile", "Node"]
 }, import {
 "namespace": ["magma", "app", "compile", "ParseException"]
 }, function {
 "name": "PrefixRule",
 "interface": symbol {
  "value": "Rule"
  },
 "modifiers": [modifier {
  "content": "public"
  }],
 "params": [definition {
  "name": "prefix",
  "returns": symbol {
   "value": "String"
   }
  }, definition {
  "name": "childRule",
  "returns": symbol {
   "value": "Rule"
   }
  }],
 "children": [method {
  "name": "parse",
  "returns": generic {
   "base": symbol {
    "value": "RuleResult"
    },
   "children": [symbol {
    "value": "Node"
    }, symbol {
    "value": "ParseException"
    }]
   },
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "input",
   "returns": symbol {
    "value": "String"
    }
   }],
  "children": [symbol {
   "content": "if (!input.startsWith(prefix))
            return new RuleResult<>(new Err<>(new ParseException("Prefix ' prefix + "'t present", input)));"
   }, return {
   "value": invocation {
    "caller": access {
     "child": "parse",
     "parent": symbol {
      "content": "childRule"
      }
     },
    "arguments": [invocation {
     "caller": access {
      "child": "substring",
      "parent": symbol {
       "content": "input"
       }
      },
     "arguments": [symbol {
      "content": "prefix.length()"
      }]
     }]
    }
   }]
  }, method {
  "name": "generate",
  "returns": generic {
   "base": symbol {
    "value": "RuleResult"
    },
   "children": [symbol {
    "value": "String"
    }, symbol {
    "value": "GenerateException"
    }]
   },
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "node",
   "returns": symbol {
    "value": "Node"
    }
   }],
  "children": [return {
   "value": invocation {
    "caller": access {
     "child": "generate",
     "parent": symbol {
      "content": "childRule"
      }
     },
    "arguments": [symbol {
     "content": "node).mapValue(value -> prefix + value"
     }]
    }
   }]
  }]
 }]
}