{
"children": [package {
 "namespace": ["magma", "app", "compile", "rule"]
 }, import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "app", "compile", "GenerateException"]
 }, import {
 "namespace": ["magma", "app", "compile", "Node"]
 }, import {
 "namespace": ["magma", "app", "compile", "ParseException"]
 }, import {
 "namespace": ["java", "util", "ArrayList"]
 }, import {
 "namespace": ["java", "util", "List"]
 }, record {
 "name": "OrRule",
 "interface": symbol {
  "value": "Rule"
  },
 "children": [method {
  "name": "parse",
  "returns": generic {
   "base": symbol {
    "value": "RuleResult"
    },
   "children": [symbol {
    "value": "Node"
    }, symbol {
    "value": "ParseException"
    }]
   },
  "children": [declaration {
   "name": "list",
   "caller": symbol {
    "content": "ArrayList"
    },
   "returns": symbol {
    "value": "var"
    },
   "type-arguments": [generic {
    "base": symbol {
     "value": "RuleResult"
     },
    "children": [symbol {
     "value": "Node"
     }, symbol {
     "value": "ParseException"
     }]
    }]
   }, declaration {
   "name": "i",
   "value": "0",
   "returns": symbol {
    "value": "int"
    }
   }, while {
   "content": " (i < rules.size()) {
            Rule rule = rules.get(i);
            final var parsed = rule.parse(input);
            if (parsed.isValid()) return parsed;
            list.add(parsed);
            i++;
        }"
   }, return {
   "value": construction {
    "caller": symbol {
     "content": "RuleResult"
     },
    "arguments": [construction {
     "caller": symbol {
      "content": "Err"
      },
     "arguments": [construction {
      "caller": symbol {
       "content": "ParseException"
       },
      "arguments": [string {
       "value": "No valid rule in disjunction"
       }, symbol {
       "content": "input"
       }]
      }]
     }, symbol {
     "content": "list"
     }]
    }
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "input",
   "returns": symbol {
    "value": "String"
    }
   }]
  }, method {
  "name": "generate",
  "returns": generic {
   "base": symbol {
    "value": "RuleResult"
    },
   "children": [symbol {
    "value": "String"
    }, symbol {
    "value": "GenerateException"
    }]
   },
  "children": [declaration {
   "name": "list",
   "caller": symbol {
    "content": "ArrayList"
    },
   "returns": symbol {
    "value": "var"
    },
   "type-arguments": [generic {
    "base": symbol {
     "value": "RuleResult"
     },
    "children": [symbol {
     "value": "String"
     }, symbol {
     "value": "GenerateException"
     }]
    }]
   }, declaration {
   "name": "i",
   "value": "0",
   "returns": symbol {
    "value": "int"
    }
   }, while {
   "content": " (i < rules.size()) {
            Rule rule = rules.get(i);
            final var generated = rule.generate(node);
            if (generated.isValid()) return generated;
            list.add(generated);
            i++;
        }"
   }, return {
   "value": construction {
    "caller": symbol {
     "content": "RuleResult"
     },
    "arguments": [construction {
     "caller": symbol {
      "content": "Err"
      },
     "arguments": [construction {
      "caller": symbol {
       "content": "GenerateException"
       },
      "arguments": [string {
       "value": "No valid rule in disjunction"
       }, symbol {
       "content": "node"
       }]
      }]
     }, symbol {
     "content": "list"
     }]
    }
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [definition {
   "name": "node",
   "returns": symbol {
    "value": "Node"
    }
   }]
  }],
 "modifiers": [modifier {
  "content": "public"
  }],
 "params": [definition {
  "name": "rules",
  "returns": generic {
   "base": symbol {
    "value": "List"
    },
   "children": [symbol {
    "value": "Rule"
    }]
   }
  }]
 }]
}