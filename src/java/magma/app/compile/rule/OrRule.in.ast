{
"children": [package {
 "namespace": ["magma", "app", "compile", "rule"]
 }, import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "app", "compile", "GenerateException"]
 }, import {
 "namespace": ["magma", "app", "compile", "Node"]
 }, import {
 "namespace": ["magma", "app", "compile", "ParseException"]
 }, import {
 "namespace": ["java", "util", "ArrayList"]
 }, import {
 "namespace": ["java", "util", "List"]
 }, record {
 "name": "OrRule",
 "interface": symbol {
  "type": "Rule"
  },
 "modifiers": [modifier {
  "content": "public"
  }],
 "params": [definition {
  "name": "rules",
  "type": generic {
   "base": symbol {
    "type": "List"
    },
   "children": [symbol {
    "type": "Rule"
    }]
   }
  }],
 "children": [method {
  "name": "parse",
  "params": definition {
   "name": "input",
   "type": symbol {
    "type": "String"
    }
   },
  "returns": generic {
   "base": symbol {
    "type": "@Override
    public RuleResult"
    },
   "children": [symbol {
    "type": "Node"
    }, symbol {
    "type": "ParseException"
    }]
   },
  "children": [symbol {
   "content": "var list = new ArrayList<RuleResult<Node, ParseException>>();"
   }, symbol {
   "content": "for (Rule rule : rules) {
            final var parsed = rule.parse(input);
            if (parsed.isValid()) return parsed;
            list.add(parsed);
        }"
   }, return {
   "value": invocation {
    "caller": symbol {
     "content": "new RuleResult<>"
     },
    "arguments": [symbol {
     "content": "new Err<>(new ParseException("No valid rule in disjunction""
     }, symbol {
     "content": " input))"
     }, symbol {
     "content": " list"
     }]
    }
   }]
  }, method {
  "name": "generate",
  "params": definition {
   "name": "node",
   "type": symbol {
    "type": "Node"
    }
   },
  "returns": generic {
   "base": symbol {
    "type": "@Override
    public RuleResult"
    },
   "children": [symbol {
    "type": "String"
    }, symbol {
    "type": "GenerateException"
    }]
   },
  "children": [symbol {
   "content": "var list = new ArrayList<RuleResult<String, GenerateException>>();"
   }, symbol {
   "content": "for (Rule rule : rules) {
            final var generated = rule.generate(node);
            if (generated.isValid()) return generated;
            list.add(generated);
        }"
   }, return {
   "value": invocation {
    "caller": symbol {
     "content": "new RuleResult<>"
     },
    "arguments": [symbol {
     "content": "new Err<>(new GenerateException("No valid rule in disjunction""
     }, symbol {
     "content": " node))"
     }, symbol {
     "content": " list"
     }]
    }
   }]
  }]
 }]
}