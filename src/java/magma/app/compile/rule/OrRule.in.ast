{
"children": [package {
 "namespace": ["magma", "app", "compile", "rule"]
 }, import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "app", "compile", "GenerateException"]
 }, import {
 "namespace": ["magma", "app", "compile", "Node"]
 }, import {
 "namespace": ["magma", "app", "compile", "ParseException"]
 }, import {
 "namespace": ["java", "util", "ArrayList"]
 }, import {
 "namespace": ["java", "util", "List"]
 }, record {
 "name": "OrRule",
 "modifiers": ["public"],
 "interface": symbol {
  "type": "Rule"
  },
 "children": [method {
  "name": "parse",
  "modifiers": ["@Override
", "public", "RuleResult<Node,"],
  "params": content {
   "params": "String input"
   },
  "returns": symbol {
   "type": "ParseException>"
   },
  "children": [any {
   "content": "var list = new ArrayList<RuleResult<Node, ParseException>>();"
   }, any {
   "content": "for (Rule rule : rules) {
            final var parsed = rule.parse(input);
            if (parsed.isValid()) return parsed;
            list.add(parsed);
        }"
   }, return {
   "value": any {
    "content": "new RuleResult<>(new Err<>(new ParseException("No valid rule in disjunction", input)), list)"
    }
   }]
  }, method {
  "name": "generate",
  "modifiers": ["@Override
", "public", "RuleResult<String,"],
  "params": content {
   "params": "Node node"
   },
  "returns": symbol {
   "type": "GenerateException>"
   },
  "children": [any {
   "content": "var list = new ArrayList<RuleResult<String, GenerateException>>();"
   }, any {
   "content": "for (Rule rule : rules) {
            final var generated = rule.generate(node);
            if (generated.isValid()) return generated;
            list.add(generated);
        }"
   }, return {
   "value": any {
    "content": "new RuleResult<>(new Err<>(new GenerateException("No valid rule in disjunction", node)), list)"
    }
   }]
  }],
 "params": [definition {
  "type": "List<Rule>",
  "name": "rules"
  }]
 }]
}