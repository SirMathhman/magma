{
"children": [import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "api"
  }, segment {
  "segment": "Tuple"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "api"
  }, segment {
  "segment": "stream"
  }, segment {
  "segment": "Stream"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "List"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "Optional"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "function"
  }, segment {
  "segment": "Function"
  }]
 }, trait {
 "name": "Node",
 "modifiers": [modifier {
  "modifier-value": "public"
  }],
 "content": [method {
  "name": "retype",
  "returns": symbol {
   "namespace": [segment {
    "segment": "Node"
    }]
   },
  "params": [definition {
   "name": "type",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "is",
  "returns": symbol {
   "namespace": [segment {
    "segment": "boolean"
    }]
   },
  "params": [definition {
   "name": "type",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "withString",
  "returns": symbol {
   "namespace": [segment {
    "segment": "Node"
    }]
   },
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }, definition {
   "name": "propertyValue",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "findString",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Optional"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }]
   },
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "mapNodeList",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Optional"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "Node"
     }]
    }]
   },
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }, definition {
   "name": "mapper",
   "returns": generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "Function"
      }]
     },
    "children": [generic {
     "base": symbol {
      "namespace": [segment {
       "segment": "List"
       }]
      },
     "children": [symbol {
      "namespace": [segment {
       "segment": "Node"
       }]
      }]
     }, generic {
     "base": symbol {
      "namespace": [segment {
       "segment": "List"
       }]
      },
     "children": [symbol {
      "namespace": [segment {
       "segment": "Node"
       }]
      }]
     }]
    }
   }]
  }, method {
  "name": "findNodeList",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Optional"
     }]
    },
   "children": [generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "List"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "Node"
      }]
     }]
    }]
   },
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "withNodeList",
  "returns": symbol {
   "namespace": [segment {
    "segment": "Node"
    }]
   },
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }, definition {
   "name": "values",
   "returns": generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "List"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "Node"
      }]
     }]
    }
   }]
  }, method {
  "name": "format",
  "returns": symbol {
   "namespace": [segment {
    "segment": "String"
    }]
   },
  "params": [definition {
   "name": "depth",
   "returns": symbol {
    "namespace": [segment {
     "segment": "int"
     }]
    }
   }]
  }, method {
  "name": "merge",
  "returns": symbol {
   "namespace": [segment {
    "segment": "Node"
    }]
   },
  "params": [definition {
   "name": "other",
   "returns": symbol {
    "namespace": [segment {
     "segment": "Node"
     }]
    }
   }]
  }, method {
  "name": "streamStrings",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Stream"
     }]
    },
   "children": [generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "Tuple"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "String"
      }]
     }, symbol {
     "namespace": [segment {
      "segment": "String"
      }]
     }]
    }]
   }
  }, method {
  "name": "streamNodeLists",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Stream"
     }]
    },
   "children": [generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "Tuple"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "String"
      }]
     }, generic {
     "base": symbol {
      "namespace": [segment {
       "segment": "List"
       }]
      },
     "children": [symbol {
      "namespace": [segment {
       "segment": "Node"
       }]
      }]
     }]
    }]
   }
  }, method {
  "name": "withNode",
  "returns": symbol {
   "namespace": [segment {
    "segment": "Node"
    }]
   },
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }, definition {
   "name": "propertyValue",
   "returns": symbol {
    "namespace": [segment {
     "segment": "Node"
     }]
    }
   }]
  }, method {
  "name": "findNode",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Optional"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "Node"
     }]
    }]
   },
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "streamNodes",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Stream"
     }]
    },
   "children": [generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "Tuple"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "String"
      }]
     }, symbol {
     "namespace": [segment {
      "segment": "Node"
      }]
     }]
    }]
   }
  }, method {
  "name": "hasNode",
  "returns": symbol {
   "namespace": [segment {
    "segment": "boolean"
    }]
   },
  "params": [definition {
   "name": "node",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "withStringList",
  "returns": symbol {
   "namespace": [segment {
    "segment": "Node"
    }]
   },
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }, definition {
   "name": "propertyValues",
   "returns": generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "List"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "String"
      }]
     }]
    }
   }]
  }, method {
  "name": "findStringList",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Optional"
     }]
    },
   "children": [generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "List"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "String"
      }]
     }]
    }]
   },
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "streamStringLists",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Stream"
     }]
    },
   "children": [generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "Tuple"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "String"
      }]
     }, generic {
     "base": symbol {
      "namespace": [segment {
       "segment": "List"
       }]
      },
     "children": [symbol {
      "namespace": [segment {
       "segment": "String"
       }]
      }]
     }]
    }]
   }
  }, method {
  "name": "hasNodeList",
  "returns": symbol {
   "namespace": [segment {
    "segment": "boolean"
    }]
   },
  "params": [definition {
   "name": "propertyKey",
   "returns": symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }
   }]
  }, method {
  "name": "findType",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Optional"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "String"
     }]
    }]
   }
  }, whitespace {
  }]
 }, whitespace {
 }]
}