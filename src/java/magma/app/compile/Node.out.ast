{
"children": [import {
 "namespace": ["magma", "api", "Tuple"]
 }, import {
 "namespace": ["java", "util", "List"]
 }, import {
 "namespace": ["java", "util", "Optional"]
 }, import {
 "namespace": ["java", "util", "function", "Function"]
 }, import {
 "namespace": ["java", "util", "stream", "Stream"]
 }, trait {
 "name": "Node",
 "modifiers": [modifier {
  "content": "public"
  }],
 "content": [method {
  "modifiers": "Node",
  "name": "retype",
  "params": definition {
   "name": "type",
   "type": symbol {
    "type": "String"
    }
   }
  }, method {
  "modifiers": "boolean",
  "name": "is",
  "params": definition {
   "name": "type",
   "type": symbol {
    "type": "String"
    }
   }
  }, method {
  "modifiers": "Node",
  "name": "withString",
  "params": definition {
   "name": "propertyValue",
   "type": symbol {
    "type": "String propertyKey, String"
    }
   }
  }, method {
  "modifiers": "Optional<String>",
  "name": "findString",
  "params": definition {
   "name": "propertyKey",
   "type": symbol {
    "type": "String"
    }
   }
  }, method {
  "modifiers": "Optional<Node>",
  "name": "mapNodeList",
  "params": definition {
   "name": "mapper",
   "type": generic {
    "base": symbol {
     "type": "String propertyKey, Function"
     },
    "children": [generic {
     "base": symbol {
      "type": "List"
      },
     "children": [symbol {
      "type": "Node"
      }]
     }, generic {
     "base": symbol {
      "type": "List"
      },
     "children": [symbol {
      "type": "Node"
      }]
     }]
    }
   }
  }, method {
  "modifiers": "Optional<List<Node>>",
  "name": "findNodeList",
  "params": definition {
   "name": "propertyKey",
   "type": symbol {
    "type": "String"
    }
   }
  }, method {
  "modifiers": "Node",
  "name": "withNodeList",
  "params": definition {
   "name": "values",
   "type": generic {
    "base": symbol {
     "type": "String propertyKey, List"
     },
    "children": [symbol {
     "type": "Node"
     }]
    }
   }
  }, method {
  "modifiers": "String",
  "name": "format",
  "params": definition {
   "name": "depth",
   "type": symbol {
    "type": "int"
    }
   }
  }, method {
  "modifiers": "Node",
  "name": "merge",
  "params": definition {
   "name": "other",
   "type": symbol {
    "type": "Node"
    }
   }
  }, method {
  "modifiers": "Stream<Tuple<String, String>>",
  "name": "streamStrings"
  }, method {
  "modifiers": "Stream<Tuple<String, List<Node>>>",
  "name": "streamNodeLists"
  }, method {
  "modifiers": "Node",
  "name": "withNode",
  "params": definition {
   "name": "propertyValue",
   "type": symbol {
    "type": "String propertyKey, Node"
    }
   }
  }, method {
  "modifiers": "Optional<Node>",
  "name": "findNode",
  "params": definition {
   "name": "propertyKey",
   "type": symbol {
    "type": "String"
    }
   }
  }, method {
  "modifiers": "Stream<Tuple<String, Node>>",
  "name": "streamNodes"
  }, method {
  "modifiers": "boolean",
  "name": "hasNode",
  "params": definition {
   "name": "node",
   "type": symbol {
    "type": "String"
    }
   }
  }, method {
  "modifiers": "Node",
  "name": "withStringList",
  "params": definition {
   "name": "propertyValues",
   "type": generic {
    "base": symbol {
     "type": "String propertyKey, List"
     },
    "children": [symbol {
     "type": "String"
     }]
    }
   }
  }, method {
  "modifiers": "Optional<List<String>>",
  "name": "findStringList",
  "params": definition {
   "name": "propertyKey",
   "type": symbol {
    "type": "String"
    }
   }
  }, method {
  "modifiers": "Stream<Tuple<String, List<String>>>",
  "name": "streamStringLists"
  }, method {
  "modifiers": "Optional<Node>",
  "name": "mapStringList",
  "params": definition {
   "name": "mapper",
   "type": generic {
    "base": symbol {
     "type": "String propertyKey, Function"
     },
    "children": [generic {
     "base": symbol {
      "type": "List"
      },
     "children": [symbol {
      "type": "String"
      }]
     }, generic {
     "base": symbol {
      "type": "List"
      },
     "children": [symbol {
      "type": "String"
      }]
     }]
    }
   }
  }]
 }]
}