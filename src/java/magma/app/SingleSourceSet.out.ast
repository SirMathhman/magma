{
"children": [import {
 "namespace": ["magma", "api", "result", "Ok"]
 }, import {
 "namespace": ["magma", "api", "result", "Result"]
 }, import {
 "namespace": ["java", "io", "IOException"]
 }, import {
 "namespace": ["java", "nio", "file", "Files"]
 }, import {
 "namespace": ["java", "nio", "file", "Path"]
 }, import {
 "namespace": ["java", "util", "HashSet"]
 }, import {
 "namespace": ["java", "util", "Set"]
 }, function {
 "name": "SingleSourceSet",
 "interface": symbol {
  "value": "SourceSet"
  },
 "modifiers": [modifier {
  "content": "public"
  }],
 "params": [definition {
  "name": "source",
  "content": "Path"
  }],
 "children": [method {
  "name": "collect",
  "content": "Result<Set<Path>, IOException>",
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }],
  "params": [],
  "children": [symbol {
   "content": "var sources = new HashSet<Path>();"
   }, symbol {
   "content": "if(Files.exists(this.source())) sources.add(this.source());"
   }, return {
   "value": invocation {
    "caller": symbol {
     "content": "new Ok<>"
     },
    "arguments": [symbol {
     "content": "sources"
     }]
    }
   }]
  }]
 }]
}