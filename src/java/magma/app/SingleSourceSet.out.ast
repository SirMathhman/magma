{
"children": [import {
 "namespace": ["magma", "api", "result", "Ok"]
 }, import {
 "namespace": ["magma", "api", "result", "Result"]
 }, import {
 "namespace": ["java", "io", "IOException"]
 }, import {
 "namespace": ["java", "nio", "file", "Files"]
 }, import {
 "namespace": ["java", "nio", "file", "Path"]
 }, import {
 "namespace": ["java", "util", "HashSet"]
 }, import {
 "namespace": ["java", "util", "Set"]
 }, function {
 "name": "SingleSourceSet",
 "interface": symbol {
  "value": "SourceSet"
  },
 "modifiers": [modifier {
  "content": "public"
  }],
 "params": [definition {
  "name": "source",
  "returns": symbol {
   "value": "Path"
   }
  }],
 "children": [method {
  "name": "collect",
  "returns": generic {
   "base": symbol {
    "value": "Result"
    },
   "children": [generic {
    "base": symbol {
     "value": "Set"
     },
    "children": [symbol {
     "value": "Path"
     }]
    }, symbol {
    "value": "IOException"
    }]
   },
  "modifiers": [modifier {
   "content": "public"
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "children": [declaration {
   "name": "sources",
   "returns": symbol {
    "value": "var"
    },
   "caller": symbol {
    "content": "HashSet"
    },
   "type-arguments": [symbol {
    "value": "Path"
    }]
   }, if {
   "content": "(Files.exists(this.source())) sources.add(this.source());"
   }, return {
   "value": construction {
    "caller": symbol {
     "content": "Ok"
     },
    "arguments": [symbol {
     "content": "sources"
     }]
    }
   }]
  }]
 }]
}