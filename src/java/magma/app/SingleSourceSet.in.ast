{
"children": [package {
 "namespace": ["magma", "app"]
 }, import {
 "namespace": ["magma", "api", "result", "Ok"]
 }, import {
 "namespace": ["magma", "api", "result", "Result"]
 }, import {
 "namespace": ["java", "io", "IOException"]
 }, import {
 "namespace": ["java", "nio", "file", "Files"]
 }, import {
 "namespace": ["java", "nio", "file", "Path"]
 }, import {
 "namespace": ["java", "util", "HashSet"]
 }, import {
 "namespace": ["java", "util", "Set"]
 }, record {
 "name": "SingleSourceSet",
 "interface": symbol {
  "value": "SourceSet"
  },
 "modifiers": [modifier {
  "content": "public"
  }],
 "params": [definition {
  "name": "source",
  "type": symbol {
   "value": "Path"
   }
  }],
 "children": [method {
  "name": "collect",
  "type-params": "@Override
    public",
  "returns": generic {
   "base": symbol {
    "value": "Result"
    },
   "children": [generic {
    "base": symbol {
     "value": "Set"
     },
    "children": [symbol {
     "value": "Path"
     }]
    }, symbol {
    "value": "IOException"
    }]
   },
  "children": [symbol {
   "content": "var sources = new HashSet<Path>();"
   }, symbol {
   "content": "if(Files.exists(this.source())) sources.add(this.source());"
   }, return {
   "value": invocation {
    "caller": symbol {
     "content": "new Ok<>"
     },
    "arguments": [symbol {
     "content": "sources"
     }]
    }
   }],
  "params": []
  }]
 }]
}