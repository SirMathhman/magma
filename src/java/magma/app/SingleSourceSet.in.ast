{
"children": [package {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "app"
  }]
 }, import {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "api"
  }, segment {
  "segment": "result"
  }, segment {
  "segment": "Ok"
  }]
 }, import {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "api"
  }, segment {
  "segment": "result"
  }, segment {
  "segment": "Result"
  }]
 }, import {
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "io"
  }, segment {
  "segment": "IOException"
  }]
 }, import {
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "nio"
  }, segment {
  "segment": "file"
  }, segment {
  "segment": "Files"
  }]
 }, import {
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "nio"
  }, segment {
  "segment": "file"
  }, segment {
  "segment": "Path"
  }]
 }, import {
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "HashSet"
  }]
 }, import {
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "Set"
  }]
 }, record {
 "name": "SingleSourceSet",
 "interface": symbol {
  "namespace": [segment {
   "segment": "SourceSet"
   }]
  },
 "children": [method {
  "name": "collect",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Result"
     }]
    },
   "children": [generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "Set"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "Path"
      }]
     }]
    }, symbol {
    "namespace": [segment {
     "segment": "IOException"
     }]
    }]
   },
  "children": [declaration {
   "name": "sources",
   "caller": symbol {
    "content": "HashSet"
    },
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    },
   "type-arguments": [symbol {
    "namespace": [segment {
     "segment": "Path"
     }]
    }]
   }, if {
   "content": "(Files.exists(this.source())) sources.add(this.source());"
   }, return {
   "value": construction {
    "caller": symbol {
     "content": "Ok"
     },
    "arguments": [symbol {
     "content": "sources"
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }]
  }],
 "modifiers": [modifier {
  "modifier-value": "public"
  }],
 "params": [definition {
  "name": "source",
  "returns": symbol {
   "namespace": [segment {
    "segment": "Path"
    }]
   }
  }]
 }]
}