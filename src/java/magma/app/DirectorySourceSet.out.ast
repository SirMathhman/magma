{
"children": [import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "api", "result", "Ok"]
 }, import {
 "namespace": ["magma", "api", "result", "Result"]
 }, import {
 "namespace": ["java", "io", "IOException"]
 }, import {
 "namespace": ["java", "nio", "file", "Files"]
 }, import {
 "namespace": ["java", "nio", "file", "Path"]
 }, import {
 "namespace": ["java", "util", "Set"]
 }, import {
 "namespace": ["java", "util", "stream", "Collectors"]
 }, function {
 "name": "DirectorySourceSet",
 "modifiers": ["public"],
 "interface": symbol {
  "type": "SourceSet"
  },
 "children": [method {
  "name": "collect0",
  "content": " throws IOException {
        try (var stream = Files.walk(root)) {
            return stream
                    .filter(path -> path.toString().endsWith(".java"))
                    .collect(Collectors.toSet());
        }
    }",
  "returns": generic {
   "base": symbol {
    "type": "private Set"
    },
   "children": [symbol {
    "type": "Path"
    }]
   }
  }, method {
  "name": "collect",
  "content": " {
        try {
            return new Ok<>(collect0());
        } catch (IOException e) {
            return new Err<>(e);
        }
    }",
  "returns": generic {
   "base": symbol {
    "type": "@Override
    public Result"
    },
   "children": [generic {
    "base": symbol {
     "type": "Set"
     },
    "children": [symbol {
     "type": "Path"
     }]
    }, symbol {
    "type": "IOException"
    }]
   }
  }],
 "params": [definition {
  "type": "Path",
  "name": "root"
  }]
 }]
}