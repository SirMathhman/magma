{
"children": [import {
 "namespace": ["magma", "api", "result", "Err"]
 }, import {
 "namespace": ["magma", "api", "result", "Ok"]
 }, import {
 "namespace": ["magma", "api", "result", "Result"]
 }, import {
 "namespace": ["java", "io", "IOException"]
 }, import {
 "namespace": ["java", "nio", "file", "Files"]
 }, import {
 "namespace": ["java", "nio", "file", "Path"]
 }, import {
 "namespace": ["java", "util", "Set"]
 }, import {
 "namespace": ["java", "util", "stream", "Collectors"]
 }, function {
 "modifiers": "public ",
 "name": "DirectorySourceSet",
 "params-and-body": "Path root) implements SourceSet {
    private Set<Path> collect0() throws IOException {
        try (var stream = Files.walk(root)) {
            return stream
                    .filter(path -> path.toString().endsWith(".java"))
                    .collect(Collectors.toSet());
        }
    }

    @Override
    public Result<Set<Path>, IOException> collect() {
        try {
            return new Ok<>(collect0());
        } catch (IOException e) {
            return new Err<>(e);
        }
    }
}"
 }]
}