{
"children": [import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "api"
  }, segment {
  "segment": "result"
  }, segment {
  "segment": "Err"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "api"
  }, segment {
  "segment": "result"
  }, segment {
  "segment": "Ok"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "api"
  }, segment {
  "segment": "result"
  }, segment {
  "segment": "Result"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "io"
  }, segment {
  "segment": "IOException"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "nio"
  }, segment {
  "segment": "file"
  }, segment {
  "segment": "Files"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "nio"
  }, segment {
  "segment": "file"
  }, segment {
  "segment": "Path"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "Set"
  }]
 }, import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "stream"
  }, segment {
  "segment": "Collectors"
  }]
 }, function {
 "name": "DirectorySourceSet",
 "interface": symbol {
  "namespace": [segment {
   "segment": "SourceSet"
   }]
  },
 "modifiers": [modifier {
  "modifier-value": "export"
  }, modifier {
  "modifier-value": "class"
  }],
 "params": [definition {
  "name": "root",
  "returns": symbol {
   "namespace": [segment {
    "segment": "Path"
    }]
   }
  }],
 "children": [method {
  "name": "collect",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Result"
     }]
    },
   "children": [generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "Set"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "Path"
      }]
     }]
    }, symbol {
    "namespace": [segment {
     "segment": "IOException"
     }]
    }]
   },
  "children": [try {
   "children": [declaration {
    "name": "stream",
    "caller": property-access {
     "child": "walk",
     "parent": symbol {
      "content": "Files"
      }
     },
    "returns": symbol {
     "namespace": [segment {
      "segment": "var"
      }]
     },
    "arguments": [symbol {
     "content": "root"
     }]
    }, return {
    "value": construction {
     "caller": symbol {
      "content": "Ok"
      },
     "arguments": [invocation {
      "caller": property-access {
       "child": "collect",
       "parent": invocation {
        "caller": property-access {
         "child": "filter",
         "parent": symbol {
          "content": "stream"
          }
         },
        "arguments": [invocation {
         "caller": property-access {
          "child": "endsWith",
          "parent": invocation {
           "caller": property-access {
            "child": "toString",
            "parent": lambda {
             "before-arrow": "path ",
             "after-arrow": " path"
             }
            }
           }
          },
         "arguments": [string {
          "value": ".java"
          }]
         }]
        }
       },
      "arguments": [invocation {
       "caller": property-access {
        "child": "toSet",
        "parent": symbol {
         "content": "Collectors"
         }
        }
       }]
      }]
     }
    }, whitespace {
    }]
   }, catch {
   "content": " (IOException e) {
            return new Err<>(e);
        }"
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }]
  }, implements {
  }]
 }, whitespace {
 }]
}