{
"children": [import {
 "after-import": "
",
 "namespace": ["magma.api.result.Err"]
 }, import {
 "after-import": "
",
 "namespace": ["magma.api.result.Ok"]
 }, import {
 "after-import": "
",
 "namespace": ["magma.api.result.Result"]
 }, import {
 "after-import": "
",
 "namespace": ["java.io.IOException"]
 }, import {
 "after-import": "
",
 "namespace": ["java.nio.file.Files"]
 }, import {
 "after-import": "
",
 "namespace": ["java.nio.file.Path"]
 }, import {
 "after-import": "
",
 "namespace": ["java.util.Set"]
 }, import {
 "after-import": "
",
 "namespace": ["java.util.stream.Collectors"]
 }, function {
 "name": "DirectorySourceSet",
 "interface": symbol {
  "value": "SourceSet"
  },
 "children": [method {
  "name": "collect",
  "returns": generic {
   "base": symbol {
    "value": "Result"
    },
   "children": [generic {
    "base": symbol {
     "value": "Set"
     },
    "children": [symbol {
     "value": "Path"
     }]
    }, symbol {
    "value": "IOException"
    }]
   },
  "children": [try {
   "children": [declaration {
    "name": "stream",
    "caller": property-access {
     "child": "walk",
     "parent": symbol {
      "content": "Files"
      }
     },
    "returns": symbol {
     "value": "var"
     },
    "arguments": [symbol {
     "content": "root"
     }]
    }, return {
    "value": lambda {
     "before-arrow": "new Ok<>(stream
                    .filter(path ",
     "after-arrow": " path.toString().endsWith(".java"))
                    .collect(Collectors.toSet()))"
     }
    }]
   }, catch {
   "content": " (IOException e) {
            return new Err<>(e);
        }"
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "content": "public"
   }]
  }],
 "modifiers": [modifier {
  "content": "public"
  }],
 "params": [definition {
  "name": "root",
  "returns": symbol {
   "value": "Path"
   }
  }]
 }]
}