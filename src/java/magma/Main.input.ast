group {
	"children": [package {
		"namespace": ["magma"]
	}, import {
		"namespace": ["magma", "api", "JavaFiles"]
	}, import {
		"namespace": ["magma", "api", "Tuple"]
	}, import {
		"namespace": ["magma", "api", "result", "Err"]
	}, import {
		"namespace": ["magma", "api", "result", "Ok"]
	}, import {
		"namespace": ["magma", "api", "result", "Result"]
	}, import {
		"namespace": ["magma", "compile", "Node"]
	}, import {
		"namespace": ["magma", "compile", "error", "ApplicationError"]
	}, import {
		"namespace": ["magma", "compile", "error", "JavaError"]
	}, import {
		"namespace": ["magma", "compile", "lang", "CLang"]
	}, import {
		"namespace": ["magma", "compile", "lang", "JavaLang"]
	}, import {
		"namespace": ["java", "nio", "file", "Path"]
	}, import {
		"namespace": ["java", "nio", "file", "Paths"]
	}, import {
		"namespace": ["java", "util", "ArrayList"]
	}, import {
		"namespace": ["java", "util", "Collections"]
	}, import {
		"namespace": ["java", "util", "List"]
	}, import {
		"namespace": ["java", "util", "Optional"]
	}, import {
		"namespace": ["java", "util", "function", "BiFunction"]
	}, import {
		"namespace": ["java", "util", "stream", "Collectors"]
	}, class {
		"name": "Main", 
		"modifiers": ["public"], 
		"value": block {
			"value": group {
				"children": [method {
					"name": "main", 
					"modifiers": ["public", "static"], 
					"type": symbol {
						"symbol-value": "void"
					}, 
					"value": block {
						"value": group {
							"children": [initialization {
								"definition": definition {
									"name": "source", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "Path"
									}
								}, 
								"value": invocation {
									"caller": access {
										"property": "get", 
										"object": symbol {
											"symbol-value": "Paths"
										}
									}, 
									"arguments": [string {
										"string-value": "."
									}, string {
										"string-value": "src"
									}, string {
										"string-value": "java"
									}, string {
										"string-value": "magma"
									}, string {
										"string-value": "Main.java"
									}]
								}
							}, invocation {
								"caller": {
									"value": "JavaFiles.readString(source)\n                .mapErr(JavaError::new)\n                .mapErr(ApplicationError::new)\n                .match(input -> runWithInput(source, input), Optional::of)\n                .ifPresent"
								}, 
								"arguments": [{
									"value": "error -> System.err.println(error.display())"
								}]
							}]
						}
					}, 
					"params": [definition {
						"name": "args", 
						"type": array {
							"child": symbol {
								"symbol-value": "String"
							}
						}
					}]
				}, method {
					"name": "runWithInput", 
					"modifiers": ["private", "static"], 
					"type": generic {
						"parent": "Optional", 
						"children": [symbol {
							"symbol-value": "ApplicationError"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [invocation {
								"caller": {
									"value": "return JavaLang.createJavaRootRule()\n                .parse(input)\n                .mapErr(ApplicationError::new)\n                .flatMapValue(parsed -> {\n                    return JavaFiles.writeString(source.resolveSibling("Main.input.ast"), parsed.toString())\n                            .map(JavaError::new)\n                            .map(ApplicationError::new)\n                            .<Result<Node, ApplicationError>>map(Err::new)\n                            .orElseGet(() -> new Ok<>(parsed));\n                })\n                .mapValue(node -> pass(new State(), node, Tuple::new, Main::modify).right())\n                .mapValue(node -> pass(new State(), node, Main::formatBefore, Main::formatAfter).right())\n                .flatMapValue(parsed -> CLang.createCRootRule().generate(parsed).mapErr(ApplicationError::new))\n                .mapValue(generated -> writeGenerated(generated, source.resolveSibling("Main.c"))).match"
								}, 
								"arguments": [{
									"value": "value -> value, Optional::of"
								}]
							}]
						}
					}, 
					"params": [definition {
						"name": "source", 
						"type": symbol {
							"symbol-value": "Path"
						}
					}, definition {
						"name": "input", 
						"type": symbol {
							"symbol-value": "String"
						}
					}]
				}, method {
					"name": "formatBefore", 
					"modifiers": ["private", "static"], 
					"type": generic {
						"parent": "Tuple", 
						"children": [symbol {
							"symbol-value": "State"
						}, symbol {
							"symbol-value": "Node"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [if {
								"condition": invocation {
									"caller": access {
										"property": "is", 
										"object": symbol {
											"symbol-value": "node"
										}
									}, 
									"arguments": [string {
										"string-value": "block"
									}]
								}, 
								"value": block {
									"value": group {
										"children": [invocation {
											"caller": {
												"value": "return new Tuple<>"
											}, 
											"arguments": [{
												"value": "state.enter()"
											}, {
												"value": "node"
											}]
										}]
									}
								}
							}, invocation {
								"caller": {
									"value": "return new Tuple<>"
								}, 
								"arguments": [{
									"value": "state"
								}, {
									"value": "node"
								}]
							}]
						}
					}, 
					"params": [definition {
						"name": "state", 
						"type": symbol {
							"symbol-value": "State"
						}
					}, definition {
						"name": "node", 
						"type": symbol {
							"symbol-value": "Node"
						}
					}]
				}, method {
					"name": "formatAfter", 
					"modifiers": ["private", "static"], 
					"type": generic {
						"parent": "Tuple", 
						"children": [symbol {
							"symbol-value": "State"
						}, symbol {
							"symbol-value": "Node"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [if {
								"condition": invocation {
									"caller": access {
										"property": "is", 
										"object": symbol {
											"symbol-value": "node"
										}
									}, 
									"arguments": [string {
										"string-value": "group"
									}]
								}, 
								"value": block {
									"value": group {
										"children": [initialization {
											"definition": definition {
												"name": "oldChildren", 
												"modifiers": ["final"], 
												"type": symbol {
													"symbol-value": "var"
												}
											}, 
											"value": invocation {
												"caller": access {
													"property": "findNodeList", 
													"object": symbol {
														"symbol-value": "node"
													}
												}, 
												"arguments": [string {
													"string-value": "children"
												}]
											}
										}, invocation {
											"caller": {
												"value": "final var newChildren = new ArrayList<Node>"
											}, 
											"arguments": []
										}, initialization {
											"definition": definition {
												"name": "orElse", 
												"type": generic {
													"parent": "List", 
													"children": [symbol {
														"symbol-value": "Node"
													}]
												}
											}, 
											"value": invocation {
												"caller": access {
													"property": "orElse", 
													"object": symbol {
														"symbol-value": "oldChildren"
													}
												}, 
												"arguments": [invocation {
													"caller": access {
														"property": "emptyList", 
														"object": symbol {
															"symbol-value": "Collections"
														}
													}, 
													"arguments": []
												}]
											}
										}, initialization {
											"definition": definition {
												"name": "i", 
												"type": symbol {
													"symbol-value": "int"
												}
											}, 
											"value": number {
												"number-value": "0"
											}
										}, while {
											"condition": invocation {
												"caller": access {
													"property": "size", 
													"object": less-than {
														"left": symbol {
															"symbol-value": "i"
														}, 
														"right": symbol {
															"symbol-value": "orElse"
														}
													}
												}, 
												"arguments": []
											}, 
											"value": block {
												"value": group {
													"children": [initialization {
														"definition": definition {
															"name": "child", 
															"type": symbol {
																"symbol-value": "Node"
															}
														}, 
														"value": invocation {
															"caller": access {
																"property": "get", 
																"object": symbol {
																	"symbol-value": "orElse"
																}
															}, 
															"arguments": [symbol {
																"symbol-value": "i"
															}]
														}
													}, initialization {
														"definition": definition {
															"name": "withString", 
															"modifiers": ["final"], 
															"type": symbol {
																"symbol-value": "var"
															}
														}, 
														"value": invocation {
															"caller": symbol {
																"symbol-value": "getNode"
															}, 
															"arguments": [symbol {
																"symbol-value": "state"
															}, symbol {
																"symbol-value": "i"
															}, symbol {
																"symbol-value": "child"
															}]
														}
													}, invocation {
														"caller": {
															"value": "newChildren.add"
														}, 
														"arguments": [{
															"value": "withString"
														}]
													}, assignment {
														"destination": "i ", 
														"source": " i + 1"
													}]
												}
											}
										}, invocation {
											"caller": {
												"value": "return new Tuple<>"
											}, 
											"arguments": [{
												"value": "state"
											}, {
												"value": "node\n                    .withNodeList("children""
											}, {
												"value": "newChildren)\n                    .withString("after-children""
											}, {
												"value": ""\n" + "\t".repeat(Math.max(state.depth() - 1"
											}, {
												"value": "0)))"
											}]
										}]
									}
								}
							}, else {
								"value": if {
									"condition": invocation {
										"caller": access {
											"property": "is", 
											"object": symbol {
												"symbol-value": "node"
											}
										}, 
										"arguments": [string {
											"string-value": "block"
										}]
									}, 
									"value": block {
										"value": group {
											"children": [invocation {
												"caller": {
													"value": "return new Tuple<>"
												}, 
												"arguments": [{
													"value": "state.exit()"
												}, {
													"value": "node"
												}]
											}]
										}
									}
								}
							}, else {
								"value": block {
									"value": group {
										"children": [invocation {
											"caller": {
												"value": "return new Tuple<>"
											}, 
											"arguments": [{
												"value": "state"
											}, {
												"value": "node"
											}]
										}]
									}
								}
							}]
						}
					}, 
					"params": [definition {
						"name": "state", 
						"type": symbol {
							"symbol-value": "State"
						}
					}, definition {
						"name": "node", 
						"type": symbol {
							"symbol-value": "Node"
						}
					}]
				}, method {
					"name": "getNode", 
					"modifiers": ["private", "static"], 
					"type": symbol {
						"symbol-value": "Node"
					}, 
					"value": block {
						"value": group {
							"children": [assignment {
								"destination": "if (state.depth() ", 
								"source": "= 0 && i == 0) return child"
							}, initialization {
								"definition": definition {
									"name": "indent", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "var"
									}
								}, 
								"value": invocation {
									"caller": access {
										"property": "repeat", 
										"object": string {
											"string-value": "\n" + "\t"
										}
									}, 
									"arguments": [invocation {
										"caller": access {
											"property": "depth", 
											"object": symbol {
												"symbol-value": "state"
											}
										}, 
										"arguments": []
									}]
								}
							}, invocation {
								"caller": {
									"value": "return child.withString"
								}, 
								"arguments": [{
									"value": ""before-child""
								}, {
									"value": "indent"
								}]
							}]
						}
					}, 
					"params": [definition {
						"name": "state", 
						"type": symbol {
							"symbol-value": "State"
						}
					}, definition {
						"name": "i", 
						"type": symbol {
							"symbol-value": "int"
						}
					}, definition {
						"name": "child", 
						"type": symbol {
							"symbol-value": "Node"
						}
					}]
				}, method {
					"name": "pass", 
					"modifiers": ["private", "static"], 
					"type": generic {
						"parent": "Tuple", 
						"children": [symbol {
							"symbol-value": "State"
						}, symbol {
							"symbol-value": "Node"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [initialization {
								"definition": definition {
									"name": "withBefore", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "var"
									}
								}, 
								"value": invocation {
									"caller": access {
										"property": "apply", 
										"object": symbol {
											"symbol-value": "beforePass"
										}
									}, 
									"arguments": [symbol {
										"symbol-value": "state"
									}, symbol {
										"symbol-value": "node"
									}]
								}
							}, invocation {
								"caller": {
									"value": "final var withNodeLists = withBefore.right()\n                .streamNodeLists()\n                .reduce"
								}, 
								"arguments": [{
									"value": "withBefore"
								}, {
									"value": "(node1"
								}, {
									"value": "tuple) -> passNodeLists(node1, tuple, beforePass, afterPass), (_, next) -> next"
								}]
							}, invocation {
								"caller": {
									"value": "final var withNodes = withNodeLists.right()\n                .streamNodes()\n                .reduce"
								}, 
								"arguments": [{
									"value": "withNodeLists"
								}, {
									"value": "(node1"
								}, {
									"value": "tuple) -> passNode(node1, tuple, beforePass, afterPass), (_, next) -> next"
								}]
							}, invocation {
								"caller": {
									"value": "return afterPass.apply"
								}, 
								"arguments": [{
									"value": "withNodes.left()"
								}, {
									"value": "withNodes.right()"
								}]
							}]
						}
					}, 
					"params": [definition {
						"name": "state", 
						"type": symbol {
							"symbol-value": "State"
						}
					}, definition {
						"name": "node", 
						"type": symbol {
							"symbol-value": "Node"
						}
					}, definition {
						"name": "beforePass", 
						"type": generic {
							"parent": "BiFunction", 
							"children": [symbol {
								"symbol-value": "State"
							}, symbol {
								"symbol-value": "Node"
							}, generic {
								"parent": "Tuple", 
								"children": [symbol {
									"symbol-value": "State"
								}, symbol {
									"symbol-value": "Node"
								}]
							}]
						}
					}, definition {
						"name": "afterPass", 
						"type": generic {
							"parent": "BiFunction", 
							"children": [symbol {
								"symbol-value": "State"
							}, symbol {
								"symbol-value": "Node"
							}, generic {
								"parent": "Tuple", 
								"children": [symbol {
									"symbol-value": "State"
								}, symbol {
									"symbol-value": "Node"
								}]
							}]
						}
					}]
				}, method {
					"name": "passNode", 
					"modifiers": ["private", "static"], 
					"type": generic {
						"parent": "Tuple", 
						"children": [symbol {
							"symbol-value": "State"
						}, symbol {
							"symbol-value": "Node"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [initialization {
								"definition": definition {
									"name": "oldState", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "var"
									}
								}, 
								"value": invocation {
									"caller": access {
										"property": "left", 
										"object": symbol {
											"symbol-value": "current"
										}
									}, 
									"arguments": []
								}
							}, initialization {
								"definition": definition {
									"name": "oldNode", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "var"
									}
								}, 
								"value": invocation {
									"caller": access {
										"property": "right", 
										"object": symbol {
											"symbol-value": "current"
										}
									}, 
									"arguments": []
								}
							}, initialization {
								"definition": definition {
									"name": "key", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "var"
									}
								}, 
								"value": invocation {
									"caller": access {
										"property": "left", 
										"object": symbol {
											"symbol-value": "entry"
										}
									}, 
									"arguments": []
								}
							}, initialization {
								"definition": definition {
									"name": "value", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "var"
									}
								}, 
								"value": invocation {
									"caller": access {
										"property": "right", 
										"object": symbol {
											"symbol-value": "entry"
										}
									}, 
									"arguments": []
								}
							}, invocation {
								"caller": {
									"value": "return pass(oldState, value, beforePass, afterPass).mapRight"
								}, 
								"arguments": [{
									"value": "right -> oldNode.withNode(key, right)"
								}]
							}]
						}
					}, 
					"params": [definition {
						"name": "current", 
						"type": generic {
							"parent": "Tuple", 
							"children": [symbol {
								"symbol-value": "State"
							}, symbol {
								"symbol-value": "Node"
							}]
						}
					}, definition {
						"name": "entry", 
						"type": generic {
							"parent": "Tuple", 
							"children": [symbol {
								"symbol-value": "String"
							}, symbol {
								"symbol-value": "Node"
							}]
						}
					}, definition {
						"name": "beforePass", 
						"type": generic {
							"parent": "BiFunction", 
							"children": [symbol {
								"symbol-value": "State"
							}, symbol {
								"symbol-value": "Node"
							}, generic {
								"parent": "Tuple", 
								"children": [symbol {
									"symbol-value": "State"
								}, symbol {
									"symbol-value": "Node"
								}]
							}]
						}
					}, definition {
						"name": "afterPass", 
						"type": generic {
							"parent": "BiFunction", 
							"children": [symbol {
								"symbol-value": "State"
							}, symbol {
								"symbol-value": "Node"
							}, generic {
								"parent": "Tuple", 
								"children": [symbol {
									"symbol-value": "State"
								}, symbol {
									"symbol-value": "Node"
								}]
							}]
						}
					}]
				}, method {
					"name": "passNodeLists", 
					"modifiers": ["private", "static"], 
					"type": generic {
						"parent": "Tuple", 
						"children": [symbol {
							"symbol-value": "State"
						}, symbol {
							"symbol-value": "Node"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [initialization {
								"definition": definition {
									"name": "oldState", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "var"
									}
								}, 
								"value": invocation {
									"caller": access {
										"property": "left", 
										"object": symbol {
											"symbol-value": "current"
										}
									}, 
									"arguments": []
								}
							}, initialization {
								"definition": definition {
									"name": "oldChildren", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "var"
									}
								}, 
								"value": invocation {
									"caller": access {
										"property": "right", 
										"object": symbol {
											"symbol-value": "current"
										}
									}, 
									"arguments": []
								}
							}, initialization {
								"definition": definition {
									"name": "key", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "var"
									}
								}, 
								"value": invocation {
									"caller": access {
										"property": "left", 
										"object": symbol {
											"symbol-value": "entry"
										}
									}, 
									"arguments": []
								}
							}, initialization {
								"definition": definition {
									"name": "values", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "var"
									}
								}, 
								"value": invocation {
									"caller": access {
										"property": "right", 
										"object": symbol {
											"symbol-value": "entry"
										}
									}, 
									"arguments": []
								}
							}, initialization {
								"definition": definition {
									"name": "currentState", 
									"type": symbol {
										"symbol-value": "var"
									}
								}, 
								"value": symbol {
									"symbol-value": "oldState"
								}
							}, invocation {
								"caller": {
									"value": "var currentChildren = new ArrayList<Node>"
								}, 
								"arguments": []
							}, initialization {
								"definition": definition {
									"name": "i", 
									"type": symbol {
										"symbol-value": "int"
									}
								}, 
								"value": number {
									"number-value": "0"
								}
							}, while {
								"condition": invocation {
									"caller": access {
										"property": "size", 
										"object": less-than {
											"left": symbol {
												"symbol-value": "i"
											}, 
											"right": symbol {
												"symbol-value": "values"
											}
										}
									}, 
									"arguments": []
								}, 
								"value": block {
									"value": group {
										"children": [initialization {
											"definition": definition {
												"name": "value", 
												"type": symbol {
													"symbol-value": "Node"
												}
											}, 
											"value": invocation {
												"caller": access {
													"property": "get", 
													"object": symbol {
														"symbol-value": "values"
													}
												}, 
												"arguments": [symbol {
													"symbol-value": "i"
												}]
											}
										}, initialization {
											"definition": definition {
												"name": "passed", 
												"modifiers": ["final"], 
												"type": symbol {
													"symbol-value": "var"
												}
											}, 
											"value": invocation {
												"caller": symbol {
													"symbol-value": "pass"
												}, 
												"arguments": [symbol {
													"symbol-value": "currentState"
												}, symbol {
													"symbol-value": "value"
												}, symbol {
													"symbol-value": "beforePass"
												}, symbol {
													"symbol-value": "afterPass"
												}]
											}
										}, invocation {
											"caller": {
												"value": "currentState = passed.left"
											}, 
											"arguments": []
										}, invocation {
											"caller": {
												"value": "currentChildren.add"
											}, 
											"arguments": [{
												"value": "passed.right()"
											}]
										}, assignment {
											"destination": "i ", 
											"source": " i + 1"
										}]
									}
								}
							}, initialization {
								"definition": definition {
									"name": "newNode", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "var"
									}
								}, 
								"value": invocation {
									"caller": access {
										"property": "withNodeList", 
										"object": symbol {
											"symbol-value": "oldChildren"
										}
									}, 
									"arguments": [symbol {
										"symbol-value": "key"
									}, symbol {
										"symbol-value": "currentChildren"
									}]
								}
							}, invocation {
								"caller": {
									"value": "return new Tuple<>"
								}, 
								"arguments": [{
									"value": "oldState"
								}, {
									"value": "newNode"
								}]
							}]
						}
					}, 
					"params": [definition {
						"name": "current", 
						"type": generic {
							"parent": "Tuple", 
							"children": [symbol {
								"symbol-value": "State"
							}, symbol {
								"symbol-value": "Node"
							}]
						}
					}, definition {
						"name": "entry", 
						"type": generic {
							"parent": "Tuple", 
							"children": [symbol {
								"symbol-value": "String"
							}, generic {
								"parent": "List", 
								"children": [symbol {
									"symbol-value": "Node"
								}]
							}]
						}
					}, definition {
						"name": "beforePass", 
						"type": generic {
							"parent": "BiFunction", 
							"children": [symbol {
								"symbol-value": "State"
							}, symbol {
								"symbol-value": "Node"
							}, generic {
								"parent": "Tuple", 
								"children": [symbol {
									"symbol-value": "State"
								}, symbol {
									"symbol-value": "Node"
								}]
							}]
						}
					}, definition {
						"name": "afterPass", 
						"type": generic {
							"parent": "BiFunction", 
							"children": [symbol {
								"symbol-value": "State"
							}, symbol {
								"symbol-value": "Node"
							}, generic {
								"parent": "Tuple", 
								"children": [symbol {
									"symbol-value": "State"
								}, symbol {
									"symbol-value": "Node"
								}]
							}]
						}
					}]
				}, method {
					"name": "modify", 
					"modifiers": ["private", "static"], 
					"type": generic {
						"parent": "Tuple", 
						"children": [symbol {
							"symbol-value": "State"
						}, symbol {
							"symbol-value": "Node"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [initialization {
								"definition": definition {
									"name": "result", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "var"
									}
								}, 
								"value": invocation {
									"caller": symbol {
										"symbol-value": "modifyStateless"
									}, 
									"arguments": [symbol {
										"symbol-value": "node"
									}]
								}
							}, invocation {
								"caller": {
									"value": "return new Tuple<>"
								}, 
								"arguments": [{
									"value": "state"
								}, {
									"value": "result"
								}]
							}]
						}
					}, 
					"params": [definition {
						"name": "state", 
						"type": symbol {
							"symbol-value": "State"
						}
					}, definition {
						"name": "node", 
						"type": symbol {
							"symbol-value": "Node"
						}
					}]
				}, method {
					"name": "modifyStateless", 
					"modifiers": ["private", "static"], 
					"type": symbol {
						"symbol-value": "Node"
					}, 
					"value": block {
						"value": group {
							"children": [if {
								"condition": invocation {
									"caller": access {
										"property": "is", 
										"object": symbol {
											"symbol-value": "node"
										}
									}, 
									"arguments": [string {
										"string-value": "group"
									}]
								}, 
								"value": block {
									"value": group {
										"children": [invocation {
											"caller": {
												"value": "final var oldChildren = node.findNodeList("children").orElse"
											}, 
											"arguments": [{
												"value": "new ArrayList<>()"
											}]
										}, invocation {
											"caller": {
												"value": "final var newChildren = oldChildren.stream()\n                    .filter(oldChild -> !oldChild.is("package"))\n                    .collect"
											}, 
											"arguments": [{
												"value": "Collectors.toCollection(ArrayList::new)"
											}]
										}, invocation {
											"caller": {
												"value": "return node.withNodeList"
											}, 
											"arguments": [{
												"value": ""children""
											}, {
												"value": "newChildren"
											}]
										}]
									}
								}
							}, else {
								"value": if {
									"condition": invocation {
										"caller": access {
											"property": "is", 
											"object": symbol {
												"symbol-value": "node"
											}
										}, 
										"arguments": [string {
											"string-value": "class"
										}]
									}, 
									"value": block {
										"value": group {
											"children": [invocation {
												"caller": {
													"value": "return node.retype"
												}, 
												"arguments": [{
													"value": ""struct""
												}]
											}]
										}
									}
								}
							}, else {
								"value": if {
									"condition": invocation {
										"caller": access {
											"property": "is", 
											"object": symbol {
												"symbol-value": "node"
											}
										}, 
										"arguments": [string {
											"string-value": "import"
										}]
									}, 
									"value": block {
										"value": group {
											"children": [invocation {
												"caller": {
													"value": "return node.retype"
												}, 
												"arguments": [{
													"value": ""include""
												}]
											}]
										}
									}
								}
							}, else {
								"value": if {
									"condition": invocation {
										"caller": access {
											"property": "is", 
											"object": symbol {
												"symbol-value": "node"
											}
										}, 
										"arguments": [string {
											"string-value": "method"
										}]
									}, 
									"value": block {
										"value": group {
											"children": [invocation {
												"caller": {
													"value": "return node.retype"
												}, 
												"arguments": [{
													"value": ""function""
												}]
											}]
										}
									}
								}
							}, else {
								"value": block {
									"value": group {
										"children": [return {
											"value": "node"
										}]
									}
								}
							}]
						}
					}, 
					"params": [definition {
						"name": "node", 
						"type": symbol {
							"symbol-value": "Node"
						}
					}]
				}, method {
					"name": "writeGenerated", 
					"modifiers": ["private", "static"], 
					"type": generic {
						"parent": "Optional", 
						"children": [symbol {
							"symbol-value": "ApplicationError"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [invocation {
								"caller": {
									"value": "return JavaFiles.writeString(target, generated)\n                .map(JavaError::new)\n                .map"
								}, 
								"arguments": [{
									"value": "ApplicationError::new"
								}]
							}]
						}
					}, 
					"params": [definition {
						"name": "generated", 
						"type": symbol {
							"symbol-value": "String"
						}
					}, definition {
						"name": "target", 
						"type": symbol {
							"symbol-value": "Path"
						}
					}]
				}]
			}
		}
	}, whitespace {
	}]
}