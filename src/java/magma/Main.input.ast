group {
	"children": [package {
		"namespace": ["magma"]
	}, import {
		"namespace": ["magma", "api", "JavaFiles"]
	}, import {
		"namespace": ["magma", "api", "Tuple"]
	}, import {
		"namespace": ["magma", "api", "result", "Err"]
	}, import {
		"namespace": ["magma", "api", "result", "Ok"]
	}, import {
		"namespace": ["magma", "api", "result", "Result"]
	}, import {
		"namespace": ["magma", "compile", "Node"]
	}, import {
		"namespace": ["magma", "compile", "error", "ApplicationError"]
	}, import {
		"namespace": ["magma", "compile", "error", "JavaError"]
	}, import {
		"namespace": ["magma", "compile", "lang", "CLang"]
	}, import {
		"namespace": ["magma", "compile", "lang", "JavaLang"]
	}, import {
		"namespace": ["java", "nio", "file", "Path"]
	}, import {
		"namespace": ["java", "nio", "file", "Paths"]
	}, import {
		"namespace": ["java", "util", "ArrayList"]
	}, import {
		"namespace": ["java", "util", "Collections"]
	}, import {
		"namespace": ["java", "util", "List"]
	}, import {
		"namespace": ["java", "util", "Optional"]
	}, import {
		"namespace": ["java", "util", "function", "BiFunction"]
	}, import {
		"namespace": ["java", "util", "stream", "Collectors"]
	}, class {
		"name": "Main", 
		"modifiers": ["public"], 
		"value": block {
			"value": group {
				"children": [method {
					"name": "main", 
					"modifiers": ["public", "static"], 
					"type": symbol {
						"symbol-value": "void"
					}, 
					"value": block {
						"value": group {
							"children": [initialization {
								"definition": definition {
									"name": "source", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "Path"
									}
								}, 
								"value": invocation {
									"caller": data-access {
										"property": "get", 
										"object": symbol {
											"symbol-value": "Paths"
										}
									}, 
									"arguments": [string {
										"string-value": "."
									}, string {
										"string-value": "src"
									}, string {
										"string-value": "java"
									}, string {
										"string-value": "magma"
									}, string {
										"string-value": "Main.java"
									}]
								}
							}, invocation {
								"caller": data-access {
									"property": "ifPresent", 
									"object": invocation {
										"caller": data-access {
											"property": "match", 
											"object": invocation {
												"caller": data-access {
													"property": "mapErr", 
													"object": invocation {
														"caller": data-access {
															"property": "mapErr", 
															"object": invocation {
																"caller": data-access {
																	"property": "readString", 
																	"object": symbol {
																		"symbol-value": "JavaFiles"
																	}
																}, 
																"arguments": [symbol {
																	"symbol-value": "source"
																}]
															}
														}, 
														"arguments": [function-access {
															"property": "new", 
															"object": symbol {
																"symbol-value": "JavaError"
															}
														}]
													}
												}, 
												"arguments": [function-access {
													"property": "new", 
													"object": symbol {
														"symbol-value": "ApplicationError"
													}
												}]
											}
										}, 
										"arguments": [invocation {
											"caller": lambda {
												"symbol-value": "input", 
												"value": symbol {
													"symbol-value": "runWithInput"
												}
											}, 
											"arguments": [symbol {
												"symbol-value": "source"
											}, symbol {
												"symbol-value": "input"
											}]
										}, function-access {
											"property": "of", 
											"object": symbol {
												"symbol-value": "Optional"
											}
										}]
									}
								}, 
								"arguments": [invocation {
									"caller": data-access {
										"property": "println", 
										"object": data-access {
											"property": "err", 
											"object": lambda {
												"symbol-value": "error", 
												"value": symbol {
													"symbol-value": "System"
												}
											}
										}
									}, 
									"arguments": [invocation {
										"caller": data-access {
											"property": "display", 
											"object": symbol {
												"symbol-value": "error"
											}
										}, 
										"arguments": []
									}]
								}]
							}]
						}
					}, 
					"params": [definition {
						"name": "args", 
						"type": array {
							"child": symbol {
								"symbol-value": "String"
							}
						}
					}]
				}, method {
					"name": "runWithInput", 
					"modifiers": ["private", "static"], 
					"type": generic {
						"parent": "Optional", 
						"children": [symbol {
							"symbol-value": "ApplicationError"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [return {
								"value": invocation {
									"caller": data-access {
										"property": "match", 
										"object": invocation {
											"caller": data-access {
												"property": "mapValue", 
												"object": invocation {
													"caller": data-access {
														"property": "flatMapValue", 
														"object": invocation {
															"caller": data-access {
																"property": "mapValue", 
																"object": invocation {
																	"caller": data-access {
																		"property": "mapValue", 
																		"object": invocation {
																			"caller": data-access {
																				"property": "flatMapValue", 
																				"object": invocation {
																					"caller": data-access {
																						"property": "mapErr", 
																						"object": invocation {
																							"caller": data-access {
																								"property": "parse", 
																								"object": invocation {
																									"caller": data-access {
																										"property": "createJavaRootRule", 
																										"object": symbol {
																											"symbol-value": "JavaLang"
																										}
																									}, 
																									"arguments": []
																								}
																							}, 
																							"arguments": [symbol {
																								"symbol-value": "input"
																							}]
																						}
																					}, 
																					"arguments": [function-access {
																						"property": "new", 
																						"object": symbol {
																							"symbol-value": "ApplicationError"
																						}
																					}]
																				}
																			}, 
																			"arguments": [invocation {
																				"caller": lambda {
																					"symbol-value": "parsed", 
																					"value": symbol {
																						"symbol-value": "writeInputAST"
																					}
																				}, 
																				"arguments": [symbol {
																					"symbol-value": "source"
																				}, symbol {
																					"symbol-value": "parsed"
																				}]
																			}]
																		}
																	}, 
																	"arguments": [invocation {
																		"caller": data-access {
																			"property": "right", 
																			"object": invocation {
																				"caller": lambda {
																					"symbol-value": "node", 
																					"value": symbol {
																						"symbol-value": "pass"
																					}
																				}, 
																				"arguments": [construction {
																					"caller": symbol {
																						"symbol-value": "State"
																					}, 
																					"arguments": []
																				}, symbol {
																					"symbol-value": "node"
																				}, function-access {
																					"property": "new", 
																					"object": symbol {
																						"symbol-value": "Tuple"
																					}
																				}, function-access {
																					"property": "modify", 
																					"object": symbol {
																						"symbol-value": "Main"
																					}
																				}]
																			}
																		}, 
																		"arguments": []
																	}]
																}
															}, 
															"arguments": [invocation {
																"caller": data-access {
																	"property": "right", 
																	"object": invocation {
																		"caller": lambda {
																			"symbol-value": "node", 
																			"value": symbol {
																				"symbol-value": "pass"
																			}
																		}, 
																		"arguments": [construction {
																			"caller": symbol {
																				"symbol-value": "State"
																			}, 
																			"arguments": []
																		}, symbol {
																			"symbol-value": "node"
																		}, function-access {
																			"property": "formatBefore", 
																			"object": symbol {
																				"symbol-value": "Main"
																			}
																		}, function-access {
																			"property": "formatAfter", 
																			"object": symbol {
																				"symbol-value": "Main"
																			}
																		}]
																	}
																}, 
																"arguments": []
															}]
														}
													}, 
													"arguments": [invocation {
														"caller": data-access {
															"property": "mapErr", 
															"object": invocation {
																"caller": data-access {
																	"property": "generate", 
																	"object": invocation {
																		"caller": data-access {
																			"property": "createCRootRule", 
																			"object": lambda {
																				"symbol-value": "parsed", 
																				"value": symbol {
																					"symbol-value": "CLang"
																				}
																			}
																		}, 
																		"arguments": []
																	}
																}, 
																"arguments": [symbol {
																	"symbol-value": "parsed"
																}]
															}
														}, 
														"arguments": [function-access {
															"property": "new", 
															"object": symbol {
																"symbol-value": "ApplicationError"
															}
														}]
													}]
												}
											}, 
											"arguments": [invocation {
												"caller": lambda {
													"symbol-value": "generated", 
													"value": symbol {
														"symbol-value": "writeGenerated"
													}
												}, 
												"arguments": [symbol {
													"symbol-value": "generated"
												}, invocation {
													"caller": data-access {
														"property": "resolveSibling", 
														"object": symbol {
															"symbol-value": "source"
														}
													}, 
													"arguments": [string {
														"string-value": "Main.c"
													}]
												}]
											}]
										}
									}, 
									"arguments": [lambda {
										"symbol-value": "value", 
										"value": symbol {
											"symbol-value": "value"
										}
									}, function-access {
										"property": "of", 
										"object": symbol {
											"symbol-value": "Optional"
										}
									}]
								}
							}]
						}
					}, 
					"params": [definition {
						"name": "source", 
						"type": symbol {
							"symbol-value": "Path"
						}
					}, definition {
						"name": "input", 
						"type": symbol {
							"symbol-value": "String"
						}
					}]
				}, method {
					"name": "writeInputAST", 
					"modifiers": ["private", "static"], 
					"type": generic {
						"parent": "Result", 
						"children": [symbol {
							"symbol-value": "Node"
						}, symbol {
							"symbol-value": "ApplicationError"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [return {
								"value": invocation {
									"caller": data-access {
										"property": "orElseGet", 
										"object": invocation {
											"caller": data-access {
												"property": "map", 
												"object": invocation {
													"caller": data-access {
														"property": "map", 
														"object": invocation {
															"caller": data-access {
																"property": "map", 
																"object": invocation {
																	"caller": data-access {
																		"property": "writeString", 
																		"object": symbol {
																			"symbol-value": "JavaFiles"
																		}
																	}, 
																	"arguments": [invocation {
																		"caller": data-access {
																			"property": "resolveSibling", 
																			"object": symbol {
																				"symbol-value": "source"
																			}
																		}, 
																		"arguments": [string {
																			"string-value": "Main.input.ast"
																		}]
																	}, invocation {
																		"caller": data-access {
																			"property": "toString", 
																			"object": symbol {
																				"symbol-value": "parsed"
																			}
																		}, 
																		"arguments": []
																	}]
																}
															}, 
															"arguments": [function-access {
																"property": "new", 
																"object": symbol {
																	"symbol-value": "JavaError"
																}
															}]
														}
													}, 
													"arguments": [function-access {
														"property": "new", 
														"object": symbol {
															"symbol-value": "ApplicationError"
														}
													}]
												}, 
												"type-arguments": [generic {
													"parent": "Result", 
													"children": [symbol {
														"symbol-value": "Node"
													}, symbol {
														"symbol-value": "ApplicationError"
													}]
												}]
											}, 
											"arguments": [function-access {
												"property": "new", 
												"object": symbol {
													"symbol-value": "Err"
												}
											}]
										}
									}, 
									"arguments": [lambda {
										"value": construction {
											"caller": symbol {
												"symbol-value": "Ok"
											}, 
											"arguments": [symbol {
												"symbol-value": "parsed"
											}]
										}
									}]
								}
							}]
						}
					}, 
					"params": [definition {
						"name": "source", 
						"type": symbol {
							"symbol-value": "Path"
						}
					}, definition {
						"name": "parsed", 
						"type": symbol {
							"symbol-value": "Node"
						}
					}]
				}, method {
					"name": "formatBefore", 
					"modifiers": ["private", "static"], 
					"type": generic {
						"parent": "Tuple", 
						"children": [symbol {
							"symbol-value": "State"
						}, symbol {
							"symbol-value": "Node"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [if {
								"condition": invocation {
									"caller": data-access {
										"property": "is", 
										"object": symbol {
											"symbol-value": "node"
										}
									}, 
									"arguments": [string {
										"string-value": "block"
									}]
								}, 
								"value": block {
									"value": group {
										"children": [return {
											"value": construction {
												"caller": symbol {
													"symbol-value": "Tuple"
												}, 
												"arguments": [invocation {
													"caller": data-access {
														"property": "enter", 
														"object": symbol {
															"symbol-value": "state"
														}
													}, 
													"arguments": []
												}, symbol {
													"symbol-value": "node"
												}]
											}
										}]
									}
								}
							}, return {
								"value": construction {
									"caller": symbol {
										"symbol-value": "Tuple"
									}, 
									"arguments": [symbol {
										"symbol-value": "state"
									}, symbol {
										"symbol-value": "node"
									}]
								}
							}]
						}
					}, 
					"params": [definition {
						"name": "state", 
						"type": symbol {
							"symbol-value": "State"
						}
					}, definition {
						"name": "node", 
						"type": symbol {
							"symbol-value": "Node"
						}
					}]
				}, method {
					"name": "formatAfter", 
					"modifiers": ["private", "static"], 
					"type": generic {
						"parent": "Tuple", 
						"children": [symbol {
							"symbol-value": "State"
						}, symbol {
							"symbol-value": "Node"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [if {
								"condition": invocation {
									"caller": data-access {
										"property": "is", 
										"object": symbol {
											"symbol-value": "node"
										}
									}, 
									"arguments": [string {
										"string-value": "group"
									}]
								}, 
								"value": block {
									"value": group {
										"children": [initialization {
											"definition": definition {
												"name": "oldChildren", 
												"modifiers": ["final"], 
												"type": symbol {
													"symbol-value": "var"
												}
											}, 
											"value": invocation {
												"caller": data-access {
													"property": "findNodeList", 
													"object": symbol {
														"symbol-value": "node"
													}
												}, 
												"arguments": [string {
													"string-value": "children"
												}]
											}
										}, assignment {
											"destination": "final var newChildren ", 
											"source": " new ArrayList<Node>()"
										}, initialization {
											"definition": definition {
												"name": "orElse", 
												"type": generic {
													"parent": "List", 
													"children": [symbol {
														"symbol-value": "Node"
													}]
												}
											}, 
											"value": invocation {
												"caller": data-access {
													"property": "orElse", 
													"object": symbol {
														"symbol-value": "oldChildren"
													}
												}, 
												"arguments": [invocation {
													"caller": data-access {
														"property": "emptyList", 
														"object": symbol {
															"symbol-value": "Collections"
														}
													}, 
													"arguments": []
												}]
											}
										}, initialization {
											"definition": definition {
												"name": "i", 
												"type": symbol {
													"symbol-value": "int"
												}
											}, 
											"value": number {
												"number-value": "0"
											}
										}, while {
											"condition": less-than {
												"left": symbol {
													"symbol-value": "i"
												}, 
												"right": invocation {
													"caller": data-access {
														"property": "size", 
														"object": symbol {
															"symbol-value": "orElse"
														}
													}, 
													"arguments": []
												}
											}, 
											"value": block {
												"value": group {
													"children": [initialization {
														"definition": definition {
															"name": "child", 
															"type": symbol {
																"symbol-value": "Node"
															}
														}, 
														"value": invocation {
															"caller": data-access {
																"property": "get", 
																"object": symbol {
																	"symbol-value": "orElse"
																}
															}, 
															"arguments": [symbol {
																"symbol-value": "i"
															}]
														}
													}, initialization {
														"definition": definition {
															"name": "withString", 
															"modifiers": ["final"], 
															"type": symbol {
																"symbol-value": "var"
															}
														}, 
														"value": invocation {
															"caller": symbol {
																"symbol-value": "getNode"
															}, 
															"arguments": [symbol {
																"symbol-value": "state"
															}, symbol {
																"symbol-value": "i"
															}, symbol {
																"symbol-value": "child"
															}]
														}
													}, invocation {
														"caller": data-access {
															"property": "add", 
															"object": symbol {
																"symbol-value": "newChildren"
															}
														}, 
														"arguments": [symbol {
															"symbol-value": "withString"
														}]
													}, assignment {
														"destination": "i ", 
														"source": " i + 1"
													}]
												}
											}
										}, return {
											"value": construction {
												"caller": symbol {
													"symbol-value": "Tuple"
												}, 
												"arguments": [symbol {
													"symbol-value": "state"
												}, invocation {
													"caller": data-access {
														"property": "withString", 
														"object": invocation {
															"caller": data-access {
																"property": "withNodeList", 
																"object": symbol {
																	"symbol-value": "node"
																}
															}, 
															"arguments": [string {
																"string-value": "children"
															}, symbol {
																"symbol-value": "newChildren"
															}]
														}
													}, 
													"arguments": [string {
														"string-value": "after-children"
													}, invocation {
														"caller": data-access {
															"property": "repeat", 
															"object": string {
																"string-value": "\n" + "\t"
															}
														}, 
														"arguments": [invocation {
															"caller": data-access {
																"property": "max", 
																"object": symbol {
																	"symbol-value": "Math"
																}
															}, 
															"arguments": [subtract {
																"left": invocation {
																	"caller": data-access {
																		"property": "depth", 
																		"object": symbol {
																			"symbol-value": "state"
																		}
																	}, 
																	"arguments": []
																}, 
																"right": number {
																	"number-value": "1"
																}
															}, number {
																"number-value": "0"
															}]
														}]
													}]
												}]
											}
										}]
									}
								}
							}, else {
								"value": if {
									"condition": invocation {
										"caller": data-access {
											"property": "is", 
											"object": symbol {
												"symbol-value": "node"
											}
										}, 
										"arguments": [string {
											"string-value": "block"
										}]
									}, 
									"value": block {
										"value": group {
											"children": [return {
												"value": construction {
													"caller": symbol {
														"symbol-value": "Tuple"
													}, 
													"arguments": [invocation {
														"caller": data-access {
															"property": "exit", 
															"object": symbol {
																"symbol-value": "state"
															}
														}, 
														"arguments": []
													}, symbol {
														"symbol-value": "node"
													}]
												}
											}]
										}
									}
								}
							}, else {
								"value": block {
									"value": group {
										"children": [return {
											"value": construction {
												"caller": symbol {
													"symbol-value": "Tuple"
												}, 
												"arguments": [symbol {
													"symbol-value": "state"
												}, symbol {
													"symbol-value": "node"
												}]
											}
										}]
									}
								}
							}]
						}
					}, 
					"params": [definition {
						"name": "state", 
						"type": symbol {
							"symbol-value": "State"
						}
					}, definition {
						"name": "node", 
						"type": symbol {
							"symbol-value": "Node"
						}
					}]
				}, method {
					"name": "getNode", 
					"modifiers": ["private", "static"], 
					"type": symbol {
						"symbol-value": "Node"
					}, 
					"value": block {
						"value": group {
							"children": [assignment {
								"destination": "if (state.depth() ", 
								"source": "= 0 && i == 0) return child"
							}, initialization {
								"definition": definition {
									"name": "indent", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "var"
									}
								}, 
								"value": invocation {
									"caller": data-access {
										"property": "repeat", 
										"object": string {
											"string-value": "\n" + "\t"
										}
									}, 
									"arguments": [invocation {
										"caller": data-access {
											"property": "depth", 
											"object": symbol {
												"symbol-value": "state"
											}
										}, 
										"arguments": []
									}]
								}
							}, return {
								"value": invocation {
									"caller": data-access {
										"property": "withString", 
										"object": symbol {
											"symbol-value": "child"
										}
									}, 
									"arguments": [string {
										"string-value": "before-child"
									}, symbol {
										"symbol-value": "indent"
									}]
								}
							}]
						}
					}, 
					"params": [definition {
						"name": "state", 
						"type": symbol {
							"symbol-value": "State"
						}
					}, definition {
						"name": "i", 
						"type": symbol {
							"symbol-value": "int"
						}
					}, definition {
						"name": "child", 
						"type": symbol {
							"symbol-value": "Node"
						}
					}]
				}, method {
					"name": "pass", 
					"modifiers": ["private", "static"], 
					"type": generic {
						"parent": "Tuple", 
						"children": [symbol {
							"symbol-value": "State"
						}, symbol {
							"symbol-value": "Node"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [initialization {
								"definition": definition {
									"name": "withBefore", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "var"
									}
								}, 
								"value": invocation {
									"caller": data-access {
										"property": "apply", 
										"object": symbol {
											"symbol-value": "beforePass"
										}
									}, 
									"arguments": [symbol {
										"symbol-value": "state"
									}, symbol {
										"symbol-value": "node"
									}]
								}
							}, assignment {
								"destination": "final var withNodeLists ", 
								"source": " withBefore.right()\n                .streamNodeLists()\n                .reduce(withBefore, (node1, tuple) -> passNodeLists(node1, tuple, beforePass, afterPass), (_, next) -> next)"
							}, assignment {
								"destination": "final var withNodes ", 
								"source": " withNodeLists.right()\n                .streamNodes()\n                .reduce(withNodeLists, (node1, tuple) -> passNode(node1, tuple, beforePass, afterPass), (_, next) -> next)"
							}, return {
								"value": invocation {
									"caller": data-access {
										"property": "apply", 
										"object": symbol {
											"symbol-value": "afterPass"
										}
									}, 
									"arguments": [invocation {
										"caller": data-access {
											"property": "left", 
											"object": symbol {
												"symbol-value": "withNodes"
											}
										}, 
										"arguments": []
									}, invocation {
										"caller": data-access {
											"property": "right", 
											"object": symbol {
												"symbol-value": "withNodes"
											}
										}, 
										"arguments": []
									}]
								}
							}]
						}
					}, 
					"params": [definition {
						"name": "state", 
						"type": symbol {
							"symbol-value": "State"
						}
					}, definition {
						"name": "node", 
						"type": symbol {
							"symbol-value": "Node"
						}
					}, definition {
						"name": "beforePass", 
						"type": generic {
							"parent": "BiFunction", 
							"children": [symbol {
								"symbol-value": "State"
							}, symbol {
								"symbol-value": "Node"
							}, generic {
								"parent": "Tuple", 
								"children": [symbol {
									"symbol-value": "State"
								}, symbol {
									"symbol-value": "Node"
								}]
							}]
						}
					}, definition {
						"name": "afterPass", 
						"type": generic {
							"parent": "BiFunction", 
							"children": [symbol {
								"symbol-value": "State"
							}, symbol {
								"symbol-value": "Node"
							}, generic {
								"parent": "Tuple", 
								"children": [symbol {
									"symbol-value": "State"
								}, symbol {
									"symbol-value": "Node"
								}]
							}]
						}
					}]
				}, method {
					"name": "passNode", 
					"modifiers": ["private", "static"], 
					"type": generic {
						"parent": "Tuple", 
						"children": [symbol {
							"symbol-value": "State"
						}, symbol {
							"symbol-value": "Node"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [initialization {
								"definition": definition {
									"name": "oldState", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "var"
									}
								}, 
								"value": invocation {
									"caller": data-access {
										"property": "left", 
										"object": symbol {
											"symbol-value": "current"
										}
									}, 
									"arguments": []
								}
							}, initialization {
								"definition": definition {
									"name": "oldNode", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "var"
									}
								}, 
								"value": invocation {
									"caller": data-access {
										"property": "right", 
										"object": symbol {
											"symbol-value": "current"
										}
									}, 
									"arguments": []
								}
							}, initialization {
								"definition": definition {
									"name": "key", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "var"
									}
								}, 
								"value": invocation {
									"caller": data-access {
										"property": "left", 
										"object": symbol {
											"symbol-value": "entry"
										}
									}, 
									"arguments": []
								}
							}, initialization {
								"definition": definition {
									"name": "value", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "var"
									}
								}, 
								"value": invocation {
									"caller": data-access {
										"property": "right", 
										"object": symbol {
											"symbol-value": "entry"
										}
									}, 
									"arguments": []
								}
							}, return {
								"value": invocation {
									"caller": data-access {
										"property": "mapRight", 
										"object": invocation {
											"caller": symbol {
												"symbol-value": "pass"
											}, 
											"arguments": [symbol {
												"symbol-value": "oldState"
											}, symbol {
												"symbol-value": "value"
											}, symbol {
												"symbol-value": "beforePass"
											}, symbol {
												"symbol-value": "afterPass"
											}]
										}
									}, 
									"arguments": [invocation {
										"caller": data-access {
											"property": "withNode", 
											"object": lambda {
												"symbol-value": "right", 
												"value": symbol {
													"symbol-value": "oldNode"
												}
											}
										}, 
										"arguments": [symbol {
											"symbol-value": "key"
										}, symbol {
											"symbol-value": "right"
										}]
									}]
								}
							}]
						}
					}, 
					"params": [definition {
						"name": "current", 
						"type": generic {
							"parent": "Tuple", 
							"children": [symbol {
								"symbol-value": "State"
							}, symbol {
								"symbol-value": "Node"
							}]
						}
					}, definition {
						"name": "entry", 
						"type": generic {
							"parent": "Tuple", 
							"children": [symbol {
								"symbol-value": "String"
							}, symbol {
								"symbol-value": "Node"
							}]
						}
					}, definition {
						"name": "beforePass", 
						"type": generic {
							"parent": "BiFunction", 
							"children": [symbol {
								"symbol-value": "State"
							}, symbol {
								"symbol-value": "Node"
							}, generic {
								"parent": "Tuple", 
								"children": [symbol {
									"symbol-value": "State"
								}, symbol {
									"symbol-value": "Node"
								}]
							}]
						}
					}, definition {
						"name": "afterPass", 
						"type": generic {
							"parent": "BiFunction", 
							"children": [symbol {
								"symbol-value": "State"
							}, symbol {
								"symbol-value": "Node"
							}, generic {
								"parent": "Tuple", 
								"children": [symbol {
									"symbol-value": "State"
								}, symbol {
									"symbol-value": "Node"
								}]
							}]
						}
					}]
				}, method {
					"name": "passNodeLists", 
					"modifiers": ["private", "static"], 
					"type": generic {
						"parent": "Tuple", 
						"children": [symbol {
							"symbol-value": "State"
						}, symbol {
							"symbol-value": "Node"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [initialization {
								"definition": definition {
									"name": "oldState", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "var"
									}
								}, 
								"value": invocation {
									"caller": data-access {
										"property": "left", 
										"object": symbol {
											"symbol-value": "current"
										}
									}, 
									"arguments": []
								}
							}, initialization {
								"definition": definition {
									"name": "oldChildren", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "var"
									}
								}, 
								"value": invocation {
									"caller": data-access {
										"property": "right", 
										"object": symbol {
											"symbol-value": "current"
										}
									}, 
									"arguments": []
								}
							}, initialization {
								"definition": definition {
									"name": "key", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "var"
									}
								}, 
								"value": invocation {
									"caller": data-access {
										"property": "left", 
										"object": symbol {
											"symbol-value": "entry"
										}
									}, 
									"arguments": []
								}
							}, initialization {
								"definition": definition {
									"name": "values", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "var"
									}
								}, 
								"value": invocation {
									"caller": data-access {
										"property": "right", 
										"object": symbol {
											"symbol-value": "entry"
										}
									}, 
									"arguments": []
								}
							}, initialization {
								"definition": definition {
									"name": "currentState", 
									"type": symbol {
										"symbol-value": "var"
									}
								}, 
								"value": symbol {
									"symbol-value": "oldState"
								}
							}, assignment {
								"destination": "var currentChildren ", 
								"source": " new ArrayList<Node>()"
							}, initialization {
								"definition": definition {
									"name": "i", 
									"type": symbol {
										"symbol-value": "int"
									}
								}, 
								"value": number {
									"number-value": "0"
								}
							}, while {
								"condition": less-than {
									"left": symbol {
										"symbol-value": "i"
									}, 
									"right": invocation {
										"caller": data-access {
											"property": "size", 
											"object": symbol {
												"symbol-value": "values"
											}
										}, 
										"arguments": []
									}
								}, 
								"value": block {
									"value": group {
										"children": [initialization {
											"definition": definition {
												"name": "value", 
												"type": symbol {
													"symbol-value": "Node"
												}
											}, 
											"value": invocation {
												"caller": data-access {
													"property": "get", 
													"object": symbol {
														"symbol-value": "values"
													}
												}, 
												"arguments": [symbol {
													"symbol-value": "i"
												}]
											}
										}, initialization {
											"definition": definition {
												"name": "passed", 
												"modifiers": ["final"], 
												"type": symbol {
													"symbol-value": "var"
												}
											}, 
											"value": invocation {
												"caller": symbol {
													"symbol-value": "pass"
												}, 
												"arguments": [symbol {
													"symbol-value": "currentState"
												}, symbol {
													"symbol-value": "value"
												}, symbol {
													"symbol-value": "beforePass"
												}, symbol {
													"symbol-value": "afterPass"
												}]
											}
										}, assignment {
											"destination": "currentState ", 
											"source": " passed.left()"
										}, invocation {
											"caller": data-access {
												"property": "add", 
												"object": symbol {
													"symbol-value": "currentChildren"
												}
											}, 
											"arguments": [invocation {
												"caller": data-access {
													"property": "right", 
													"object": symbol {
														"symbol-value": "passed"
													}
												}, 
												"arguments": []
											}]
										}, assignment {
											"destination": "i ", 
											"source": " i + 1"
										}]
									}
								}
							}, initialization {
								"definition": definition {
									"name": "newNode", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "var"
									}
								}, 
								"value": invocation {
									"caller": data-access {
										"property": "withNodeList", 
										"object": symbol {
											"symbol-value": "oldChildren"
										}
									}, 
									"arguments": [symbol {
										"symbol-value": "key"
									}, symbol {
										"symbol-value": "currentChildren"
									}]
								}
							}, return {
								"value": construction {
									"caller": symbol {
										"symbol-value": "Tuple"
									}, 
									"arguments": [symbol {
										"symbol-value": "oldState"
									}, symbol {
										"symbol-value": "newNode"
									}]
								}
							}]
						}
					}, 
					"params": [definition {
						"name": "current", 
						"type": generic {
							"parent": "Tuple", 
							"children": [symbol {
								"symbol-value": "State"
							}, symbol {
								"symbol-value": "Node"
							}]
						}
					}, definition {
						"name": "entry", 
						"type": generic {
							"parent": "Tuple", 
							"children": [symbol {
								"symbol-value": "String"
							}, generic {
								"parent": "List", 
								"children": [symbol {
									"symbol-value": "Node"
								}]
							}]
						}
					}, definition {
						"name": "beforePass", 
						"type": generic {
							"parent": "BiFunction", 
							"children": [symbol {
								"symbol-value": "State"
							}, symbol {
								"symbol-value": "Node"
							}, generic {
								"parent": "Tuple", 
								"children": [symbol {
									"symbol-value": "State"
								}, symbol {
									"symbol-value": "Node"
								}]
							}]
						}
					}, definition {
						"name": "afterPass", 
						"type": generic {
							"parent": "BiFunction", 
							"children": [symbol {
								"symbol-value": "State"
							}, symbol {
								"symbol-value": "Node"
							}, generic {
								"parent": "Tuple", 
								"children": [symbol {
									"symbol-value": "State"
								}, symbol {
									"symbol-value": "Node"
								}]
							}]
						}
					}]
				}, method {
					"name": "modify", 
					"modifiers": ["private", "static"], 
					"type": generic {
						"parent": "Tuple", 
						"children": [symbol {
							"symbol-value": "State"
						}, symbol {
							"symbol-value": "Node"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [initialization {
								"definition": definition {
									"name": "result", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "var"
									}
								}, 
								"value": invocation {
									"caller": symbol {
										"symbol-value": "modifyStateless"
									}, 
									"arguments": [symbol {
										"symbol-value": "node"
									}]
								}
							}, return {
								"value": construction {
									"caller": symbol {
										"symbol-value": "Tuple"
									}, 
									"arguments": [symbol {
										"symbol-value": "state"
									}, symbol {
										"symbol-value": "result"
									}]
								}
							}]
						}
					}, 
					"params": [definition {
						"name": "state", 
						"type": symbol {
							"symbol-value": "State"
						}
					}, definition {
						"name": "node", 
						"type": symbol {
							"symbol-value": "Node"
						}
					}]
				}, method {
					"name": "modifyStateless", 
					"modifiers": ["private", "static"], 
					"type": symbol {
						"symbol-value": "Node"
					}, 
					"value": block {
						"value": group {
							"children": [if {
								"condition": invocation {
									"caller": data-access {
										"property": "is", 
										"object": symbol {
											"symbol-value": "node"
										}
									}, 
									"arguments": [string {
										"string-value": "group"
									}]
								}, 
								"value": block {
									"value": group {
										"children": [initialization {
											"definition": definition {
												"name": "oldChildren", 
												"modifiers": ["final"], 
												"type": symbol {
													"symbol-value": "var"
												}
											}, 
											"value": invocation {
												"caller": data-access {
													"property": "orElse", 
													"object": invocation {
														"caller": data-access {
															"property": "findNodeList", 
															"object": symbol {
																"symbol-value": "node"
															}
														}, 
														"arguments": [string {
															"string-value": "children"
														}]
													}
												}, 
												"arguments": [construction {
													"caller": symbol {
														"symbol-value": "ArrayList"
													}, 
													"arguments": []
												}]
											}
										}, assignment {
											"destination": "final var newChildren ", 
											"source": " oldChildren.stream()\n                    .filter(oldChild -> !oldChild.is("package"))\n                    .collect(Collectors.toCollection(ArrayList::new))"
										}, return {
											"value": invocation {
												"caller": data-access {
													"property": "withNodeList", 
													"object": symbol {
														"symbol-value": "node"
													}
												}, 
												"arguments": [string {
													"string-value": "children"
												}, symbol {
													"symbol-value": "newChildren"
												}]
											}
										}]
									}
								}
							}, else {
								"value": if {
									"condition": invocation {
										"caller": data-access {
											"property": "is", 
											"object": symbol {
												"symbol-value": "node"
											}
										}, 
										"arguments": [string {
											"string-value": "class"
										}]
									}, 
									"value": block {
										"value": group {
											"children": [return {
												"value": invocation {
													"caller": data-access {
														"property": "retype", 
														"object": symbol {
															"symbol-value": "node"
														}
													}, 
													"arguments": [string {
														"string-value": "struct"
													}]
												}
											}]
										}
									}
								}
							}, else {
								"value": if {
									"condition": invocation {
										"caller": data-access {
											"property": "is", 
											"object": symbol {
												"symbol-value": "node"
											}
										}, 
										"arguments": [string {
											"string-value": "import"
										}]
									}, 
									"value": block {
										"value": group {
											"children": [return {
												"value": invocation {
													"caller": data-access {
														"property": "retype", 
														"object": symbol {
															"symbol-value": "node"
														}
													}, 
													"arguments": [string {
														"string-value": "include"
													}]
												}
											}]
										}
									}
								}
							}, else {
								"value": if {
									"condition": invocation {
										"caller": data-access {
											"property": "is", 
											"object": symbol {
												"symbol-value": "node"
											}
										}, 
										"arguments": [string {
											"string-value": "method"
										}]
									}, 
									"value": block {
										"value": group {
											"children": [return {
												"value": invocation {
													"caller": data-access {
														"property": "retype", 
														"object": symbol {
															"symbol-value": "node"
														}
													}, 
													"arguments": [string {
														"string-value": "function"
													}]
												}
											}]
										}
									}
								}
							}, else {
								"value": block {
									"value": group {
										"children": [return {
											"value": symbol {
												"symbol-value": "node"
											}
										}]
									}
								}
							}]
						}
					}, 
					"params": [definition {
						"name": "node", 
						"type": symbol {
							"symbol-value": "Node"
						}
					}]
				}, method {
					"name": "writeGenerated", 
					"modifiers": ["private", "static"], 
					"type": generic {
						"parent": "Optional", 
						"children": [symbol {
							"symbol-value": "ApplicationError"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [return {
								"value": invocation {
									"caller": data-access {
										"property": "map", 
										"object": invocation {
											"caller": data-access {
												"property": "map", 
												"object": invocation {
													"caller": data-access {
														"property": "writeString", 
														"object": symbol {
															"symbol-value": "JavaFiles"
														}
													}, 
													"arguments": [symbol {
														"symbol-value": "target"
													}, symbol {
														"symbol-value": "generated"
													}]
												}
											}, 
											"arguments": [function-access {
												"property": "new", 
												"object": symbol {
													"symbol-value": "JavaError"
												}
											}]
										}
									}, 
									"arguments": [function-access {
										"property": "new", 
										"object": symbol {
											"symbol-value": "ApplicationError"
										}
									}]
								}
							}]
						}
					}, 
					"params": [definition {
						"name": "generated", 
						"type": symbol {
							"symbol-value": "String"
						}
					}, definition {
						"name": "target", 
						"type": symbol {
							"symbol-value": "Path"
						}
					}]
				}]
			}
		}
	}, whitespace {
	}]
}