group {
	"children": [package {
		"namespace": ["magma"]
	}, import {
		"namespace": ["magma", "api", "JavaFiles"]
	}, import {
		"namespace": ["magma", "api", "result", "Err"]
	}, import {
		"namespace": ["magma", "api", "result", "Ok"]
	}, import {
		"namespace": ["magma", "api", "result", "Result"]
	}, import {
		"namespace": ["magma", "compile", "Node"]
	}, import {
		"namespace": ["magma", "compile", "State"]
	}, import {
		"namespace": ["magma", "compile", "error", "ApplicationError"]
	}, import {
		"namespace": ["magma", "compile", "error", "JavaError"]
	}, import {
		"namespace": ["magma", "compile", "lang", "CLang"]
	}, import {
		"namespace": ["magma", "compile", "lang", "JavaLang"]
	}, import {
		"namespace": ["magma", "compile", "pass", "Modifier"]
	}, import {
		"namespace": ["magma", "compile", "pass", "TreePassingStage"]
	}, import {
		"namespace": ["java", "nio", "file", "Path"]
	}, import {
		"namespace": ["java", "nio", "file", "Paths"]
	}, import {
		"namespace": ["java", "util", "Optional"]
	}, class {
		"name": "Main", 
		"modifiers": ["public"], 
		"value": block {
			"value": group {
				"children": [method {
					"name": "main", 
					"modifiers": ["public", "static"], 
					"type": symbol {
						"symbol-value": "void"
					}, 
					"value": block {
						"value": group {
							"children": [initialization {
								"definition": definition {
									"name": "source", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "Path"
									}
								}, 
								"value": invocation-value {
									"caller": data-access {
										"property": "get", 
										"object": symbol {
											"symbol-value": "Paths"
										}
									}, 
									"arguments": [string {
										"string-value": "."
									}, string {
										"string-value": "src"
									}, string {
										"string-value": "java"
									}, string {
										"string-value": "magma"
									}, string {
										"string-value": "Main.java"
									}]
								}
							}, invocation-statement {
								"caller": data-access {
									"property": "ifPresent", 
									"object": invocation-value {
										"caller": data-access {
											"property": "match", 
											"object": invocation-value {
												"caller": data-access {
													"property": "mapErr", 
													"object": invocation-value {
														"caller": data-access {
															"property": "mapErr", 
															"object": invocation-value {
																"caller": data-access {
																	"property": "readString", 
																	"object": symbol {
																		"symbol-value": "JavaFiles"
																	}
																}, 
																"arguments": [symbol {
																	"symbol-value": "source"
																}]
															}
														}, 
														"arguments": [function-access {
															"property": "new", 
															"object": symbol {
																"symbol-value": "JavaError"
															}
														}]
													}
												}, 
												"arguments": [function-access {
													"property": "new", 
													"object": symbol {
														"symbol-value": "ApplicationError"
													}
												}]
											}
										}, 
										"arguments": [lambda {
											"param": symbol {
												"symbol-value": "input"
											}, 
											"value": invocation-value {
												"caller": symbol {
													"symbol-value": "runWithInput"
												}, 
												"arguments": [symbol {
													"symbol-value": "source"
												}, symbol {
													"symbol-value": "input"
												}]
											}
										}, function-access {
											"property": "of", 
											"object": symbol {
												"symbol-value": "Optional"
											}
										}]
									}
								}, 
								"arguments": [lambda {
									"param": symbol {
										"symbol-value": "error"
									}, 
									"value": invocation-value {
										"caller": data-access {
											"property": "println", 
											"object": data-access {
												"property": "err", 
												"object": symbol {
													"symbol-value": "System"
												}
											}
										}, 
										"arguments": [invocation-value {
											"caller": data-access {
												"property": "display", 
												"object": symbol {
													"symbol-value": "error"
												}
											}, 
											"arguments": []
										}]
									}
								}]
							}]
						}
					}, 
					"params": [definition {
						"name": "args", 
						"type": array {
							"child": symbol {
								"symbol-value": "String"
							}
						}
					}]
				}, method {
					"name": "runWithInput", 
					"modifiers": ["private", "static"], 
					"type": generic {
						"parent": "Optional", 
						"children": [symbol {
							"symbol-value": "ApplicationError"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [return {
								"value": invocation-value {
									"caller": data-access {
										"property": "match", 
										"object": invocation-value {
											"caller": data-access {
												"property": "mapValue", 
												"object": invocation-value {
													"caller": data-access {
														"property": "flatMapValue", 
														"object": invocation-value {
															"caller": data-access {
																"property": "flatMapValue", 
																"object": invocation-value {
																	"caller": data-access {
																		"property": "mapValue", 
																		"object": invocation-value {
																			"caller": data-access {
																				"property": "flatMapValue", 
																				"object": invocation-value {
																					"caller": data-access {
																						"property": "mapErr", 
																						"object": invocation-value {
																							"caller": data-access {
																								"property": "parse", 
																								"object": invocation-value {
																									"caller": data-access {
																										"property": "createJavaRootRule", 
																										"object": symbol {
																											"symbol-value": "JavaLang"
																										}
																									}, 
																									"arguments": []
																								}
																							}, 
																							"arguments": [symbol {
																								"symbol-value": "input"
																							}]
																						}
																					}, 
																					"arguments": [function-access {
																						"property": "new", 
																						"object": symbol {
																							"symbol-value": "ApplicationError"
																						}
																					}]
																				}
																			}, 
																			"arguments": [lambda {
																				"param": symbol {
																					"symbol-value": "parsed"
																				}, 
																				"value": invocation-value {
																					"caller": symbol {
																						"symbol-value": "writeAST"
																					}, 
																					"arguments": [invocation-value {
																						"caller": data-access {
																							"property": "resolveSibling", 
																							"object": symbol {
																								"symbol-value": "source"
																							}
																						}, 
																						"arguments": [string {
																							"string-value": "Main.input.ast"
																						}]
																					}, symbol {
																						"symbol-value": "parsed"
																					}]
																				}
																			}]
																		}
																	}, 
																	"arguments": [lambda {
																		"param": symbol {
																			"symbol-value": "node"
																		}, 
																		"value": invocation-value {
																			"caller": data-access {
																				"property": "right", 
																				"object": invocation-value {
																					"caller": data-access {
																						"property": "pass", 
																						"object": construction {
																							"caller": symbol {
																								"symbol-value": "TreePassingStage"
																							}, 
																							"arguments": [construction {
																								"caller": symbol {
																									"symbol-value": "Modifier"
																								}, 
																								"arguments": []
																							}]
																						}
																					}, 
																					"arguments": [construction {
																						"caller": symbol {
																							"symbol-value": "State"
																						}, 
																						"arguments": []
																					}, symbol {
																						"symbol-value": "node"
																					}]
																				}
																			}, 
																			"arguments": []
																		}
																	}]
																}
															}, 
															"arguments": [lambda {
																"param": symbol {
																	"symbol-value": "parsed"
																}, 
																"value": invocation-value {
																	"caller": symbol {
																		"symbol-value": "writeAST"
																	}, 
																	"arguments": [invocation-value {
																		"caller": data-access {
																			"property": "resolveSibling", 
																			"object": symbol {
																				"symbol-value": "source"
																			}
																		}, 
																		"arguments": [string {
																			"string-value": "Main.output.ast"
																		}]
																	}, symbol {
																		"symbol-value": "parsed"
																	}]
																}
															}]
														}
													}, 
													"arguments": [lambda {
														"param": symbol {
															"symbol-value": "parsed"
														}, 
														"value": invocation-value {
															"caller": data-access {
																"property": "mapErr", 
																"object": invocation-value {
																	"caller": data-access {
																		"property": "generate", 
																		"object": invocation-value {
																			"caller": data-access {
																				"property": "createCRootRule", 
																				"object": symbol {
																					"symbol-value": "CLang"
																				}
																			}, 
																			"arguments": []
																		}
																	}, 
																	"arguments": [symbol {
																		"symbol-value": "parsed"
																	}]
																}
															}, 
															"arguments": [function-access {
																"property": "new", 
																"object": symbol {
																	"symbol-value": "ApplicationError"
																}
															}]
														}
													}]
												}
											}, 
											"arguments": [lambda {
												"param": symbol {
													"symbol-value": "generated"
												}, 
												"value": invocation-value {
													"caller": symbol {
														"symbol-value": "writeGenerated"
													}, 
													"arguments": [symbol {
														"symbol-value": "generated"
													}, invocation-value {
														"caller": data-access {
															"property": "resolveSibling", 
															"object": symbol {
																"symbol-value": "source"
															}
														}, 
														"arguments": [string {
															"string-value": "Main.c"
														}]
													}]
												}
											}]
										}
									}, 
									"arguments": [lambda {
										"param": symbol {
											"symbol-value": "value"
										}, 
										"value": symbol {
											"symbol-value": "value"
										}
									}, function-access {
										"property": "of", 
										"object": symbol {
											"symbol-value": "Optional"
										}
									}]
								}
							}]
						}
					}, 
					"params": [definition {
						"name": "source", 
						"type": symbol {
							"symbol-value": "Path"
						}
					}, definition {
						"name": "input", 
						"type": symbol {
							"symbol-value": "String"
						}
					}]
				}, method {
					"name": "writeAST", 
					"modifiers": ["private", "static"], 
					"type": generic {
						"parent": "Result", 
						"children": [symbol {
							"symbol-value": "Node"
						}, symbol {
							"symbol-value": "ApplicationError"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [return {
								"value": invocation-value {
									"caller": data-access {
										"property": "orElseGet", 
										"object": invocation-value {
											"caller": data-access {
												"property": "map", 
												"object": invocation-value {
													"caller": data-access {
														"property": "map", 
														"object": invocation-value {
															"caller": data-access {
																"property": "map", 
																"object": invocation-value {
																	"caller": data-access {
																		"property": "writeString", 
																		"object": symbol {
																			"symbol-value": "JavaFiles"
																		}
																	}, 
																	"arguments": [symbol {
																		"symbol-value": "path"
																	}, invocation-value {
																		"caller": data-access {
																			"property": "toString", 
																			"object": symbol {
																				"symbol-value": "node"
																			}
																		}, 
																		"arguments": []
																	}]
																}
															}, 
															"arguments": [function-access {
																"property": "new", 
																"object": symbol {
																	"symbol-value": "JavaError"
																}
															}]
														}
													}, 
													"arguments": [function-access {
														"property": "new", 
														"object": symbol {
															"symbol-value": "ApplicationError"
														}
													}]
												}, 
												"type-arguments": [generic {
													"parent": "Result", 
													"children": [symbol {
														"symbol-value": "Node"
													}, symbol {
														"symbol-value": "ApplicationError"
													}]
												}]
											}, 
											"arguments": [function-access {
												"property": "new", 
												"object": symbol {
													"symbol-value": "Err"
												}
											}]
										}
									}, 
									"arguments": [lambda {
										"value": construction {
											"caller": symbol {
												"symbol-value": "Ok"
											}, 
											"arguments": [symbol {
												"symbol-value": "node"
											}]
										}
									}]
								}
							}]
						}
					}, 
					"params": [definition {
						"name": "path", 
						"type": symbol {
							"symbol-value": "Path"
						}
					}, definition {
						"name": "node", 
						"type": symbol {
							"symbol-value": "Node"
						}
					}]
				}, method {
					"name": "writeGenerated", 
					"modifiers": ["private", "static"], 
					"type": generic {
						"parent": "Optional", 
						"children": [symbol {
							"symbol-value": "ApplicationError"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [return {
								"value": invocation-value {
									"caller": data-access {
										"property": "map", 
										"object": invocation-value {
											"caller": data-access {
												"property": "map", 
												"object": invocation-value {
													"caller": data-access {
														"property": "writeString", 
														"object": symbol {
															"symbol-value": "JavaFiles"
														}
													}, 
													"arguments": [symbol {
														"symbol-value": "target"
													}, symbol {
														"symbol-value": "generated"
													}]
												}
											}, 
											"arguments": [function-access {
												"property": "new", 
												"object": symbol {
													"symbol-value": "JavaError"
												}
											}]
										}
									}, 
									"arguments": [function-access {
										"property": "new", 
										"object": symbol {
											"symbol-value": "ApplicationError"
										}
									}]
								}
							}]
						}
					}, 
					"params": [definition {
						"name": "generated", 
						"type": symbol {
							"symbol-value": "String"
						}
					}, definition {
						"name": "target", 
						"type": symbol {
							"symbol-value": "Path"
						}
					}]
				}]
			}
		}
	}, whitespace {
	}]
}