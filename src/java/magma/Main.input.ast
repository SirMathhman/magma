group {
	"children": [package {
		"namespace": ["magma"]
	}, import {
		"namespace": ["magma", "api", "JavaFiles"]
	}, import {
		"namespace": ["magma", "api", "Tuple"]
	}, import {
		"namespace": ["magma", "api", "result", "Err"]
	}, import {
		"namespace": ["magma", "api", "result", "Ok"]
	}, import {
		"namespace": ["magma", "api", "result", "Result"]
	}, import {
		"namespace": ["magma", "compile", "Node"]
	}, import {
		"namespace": ["magma", "compile", "error", "ApplicationError"]
	}, import {
		"namespace": ["magma", "compile", "error", "JavaError"]
	}, import {
		"namespace": ["magma", "compile", "lang", "CLang"]
	}, import {
		"namespace": ["magma", "compile", "lang", "JavaLang"]
	}, import {
		"namespace": ["java", "nio", "file", "Path"]
	}, import {
		"namespace": ["java", "nio", "file", "Paths"]
	}, import {
		"namespace": ["java", "util", "ArrayList"]
	}, import {
		"namespace": ["java", "util", "Collections"]
	}, import {
		"namespace": ["java", "util", "List"]
	}, import {
		"namespace": ["java", "util", "Optional"]
	}, import {
		"namespace": ["java", "util", "function", "BiFunction"]
	}, import {
		"namespace": ["java", "util", "stream", "Collectors"]
	}, class {
		"before-keyword": "public ", 
		"name": "Main", 
		"value": block {
			"value": group {
				"children": [method {
					"before-type": "public static", 
					"name": "main", 
					"type": symbol {
						"value": "void"
					}, 
					"value": block {
						"value": group {
							"children": [initialization {
								"definition": definition {
									"before-type": "final", 
									"name": "source", 
									"type": symbol {
										"value": "Path"
									}
								}, 
								"value": invocation {
									"caller": " Paths.get", 
									"arguments": "".", "src", "java", "magma", "Main.java""
								}
							}, invocation {
								"caller": "JavaFiles.readString", 
								"arguments": "source)\n                .mapErr(JavaError::new)\n                .mapErr(ApplicationError::new)\n                .match(input -> runWithInput(source, input), Optional::of)\n                .ifPresent(error -> System.err.println(error.display())"
							}]
						}
					}, 
					"params": [definition {
						"name": "args", 
						"type": array {
							"child": symbol {
								"value": "String"
							}
						}
					}]
				}, method {
					"before-type": "private static", 
					"name": "runWithInput", 
					"type": generic {
						"parent": "Optional", 
						"children": [symbol {
							"value": "ApplicationError"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [invocation {
								"caller": "return JavaLang.createJavaRootRule", 
								"arguments": ")\n                .parse(input)\n                .mapErr(ApplicationError::new)\n                .flatMapValue(parsed -> {\n                    return JavaFiles.writeString(source.resolveSibling("Main.input.ast"), parsed.toString())\n                            .map(JavaError::new)\n                            .map(ApplicationError::new)\n                            .<Result<Node, ApplicationError>>map(Err::new)\n                            .orElseGet(() -> new Ok<>(parsed));\n                })\n                .mapValue(node -> pass(new State(), node, Tuple::new, Main::modify).right())\n                .mapValue(node -> pass(new State(), node, Main::formatBefore, Main::formatAfter).right())\n                .flatMapValue(parsed -> CLang.createCRootRule().generate(parsed).mapErr(ApplicationError::new))\n                .mapValue(generated -> writeGenerated(generated, source.resolveSibling("Main.c"))).match(value -> value, Optional::of"
							}]
						}
					}, 
					"params": [definition {
						"name": "source", 
						"type": symbol {
							"value": "Path"
						}
					}, definition {
						"name": "input", 
						"type": symbol {
							"value": "String"
						}
					}]
				}, method {
					"before-type": "private static", 
					"name": "formatBefore", 
					"type": generic {
						"parent": "Tuple", 
						"children": [symbol {
							"value": "State"
						}, symbol {
							"value": "Node"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [if {
								"condition": invocation {
									"caller": "node.is", 
									"arguments": ""block""
								}, 
								"value": block {
									"value": group {
										"children": [invocation {
											"caller": "return new Tuple<>", 
											"arguments": "state.enter(), node"
										}]
									}
								}
							}, invocation {
								"caller": "return new Tuple<>", 
								"arguments": "state, node"
							}]
						}
					}, 
					"params": [definition {
						"name": "state", 
						"type": symbol {
							"value": "State"
						}
					}, definition {
						"name": "node", 
						"type": symbol {
							"value": "Node"
						}
					}]
				}, method {
					"before-type": "private static", 
					"name": "formatAfter", 
					"type": generic {
						"parent": "Tuple", 
						"children": [symbol {
							"value": "State"
						}, symbol {
							"value": "Node"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [if {
								"condition": invocation {
									"caller": "node.is", 
									"arguments": ""group""
								}, 
								"value": block {
									"value": group {
										"children": [initialization {
											"definition": definition {
												"before-type": "final", 
												"name": "oldChildren", 
												"type": symbol {
													"value": "var"
												}
											}, 
											"value": invocation {
												"caller": " node.findNodeList", 
												"arguments": ""children""
											}
										}, initialization {
											"definition": definition {
												"before-type": "final", 
												"name": "newChildren", 
												"type": symbol {
													"value": "var"
												}
											}, 
											"value": invocation {
												"caller": " new ArrayList<Node>", 
												"arguments": ""
											}
										}, initialization {
											"definition": definition {
												"name": "orElse", 
												"type": generic {
													"parent": "List", 
													"children": [symbol {
														"value": "Node"
													}]
												}
											}, 
											"value": invocation {
												"caller": " oldChildren.orElse", 
												"arguments": "Collections.emptyList()"
											}
										}, initialization {
											"definition": definition {
												"name": "i", 
												"type": symbol {
													"value": "int"
												}
											}, 
											"value": number {
												"value": "0"
											}
										}, while {
											"condition": invocation {
												"caller": "i < orElse.size", 
												"arguments": ""
											}, 
											"value": block {
												"value": group {
													"children": [initialization {
														"definition": definition {
															"name": "child", 
															"type": symbol {
																"value": "Node"
															}
														}, 
														"value": invocation {
															"caller": " orElse.get", 
															"arguments": "i"
														}
													}, initialization {
														"definition": definition {
															"before-type": "final", 
															"name": "withString", 
															"type": symbol {
																"value": "var"
															}
														}, 
														"value": invocation {
															"caller": " getNode", 
															"arguments": "state, i, child"
														}
													}, invocation {
														"caller": "newChildren.add", 
														"arguments": "withString"
													}, assignment {
														"destination": "i ", 
														"source": " i + 1"
													}]
												}
											}
										}, invocation {
											"caller": "return new Tuple<>", 
											"arguments": "state, node\n                    .withNodeList("children", newChildren)\n                    .withString("after-children", "\n" + "\t".repeat(Math.max(state.depth() - 1, 0)))"
										}]
									}
								}
							}, else {
								"value": if {
									"condition": invocation {
										"caller": "node.is", 
										"arguments": ""block""
									}, 
									"value": block {
										"value": group {
											"children": [invocation {
												"caller": "return new Tuple<>", 
												"arguments": "state.exit(), node"
											}]
										}
									}
								}
							}, else {
								"value": block {
									"value": group {
										"children": [invocation {
											"caller": "return new Tuple<>", 
											"arguments": "state, node"
										}]
									}
								}
							}]
						}
					}, 
					"params": [definition {
						"name": "state", 
						"type": symbol {
							"value": "State"
						}
					}, definition {
						"name": "node", 
						"type": symbol {
							"value": "Node"
						}
					}]
				}, method {
					"before-type": "private static", 
					"name": "getNode", 
					"type": symbol {
						"value": "Node"
					}, 
					"value": block {
						"value": group {
							"children": [assignment {
								"destination": "if (state.depth() ", 
								"source": "= 0 && i == 0) return child"
							}, initialization {
								"definition": definition {
									"before-type": "final", 
									"name": "indent", 
									"type": symbol {
										"value": "var"
									}
								}, 
								"value": invocation {
									"caller": " "\n" + "\t".repeat", 
									"arguments": "state.depth()"
								}
							}, invocation {
								"caller": "return child.withString", 
								"arguments": ""before-child", indent"
							}]
						}
					}, 
					"params": [definition {
						"name": "state", 
						"type": symbol {
							"value": "State"
						}
					}, definition {
						"name": "i", 
						"type": symbol {
							"value": "int"
						}
					}, definition {
						"name": "child", 
						"type": symbol {
							"value": "Node"
						}
					}]
				}, method {
					"before-type": "private static", 
					"name": "pass", 
					"type": generic {
						"parent": "Tuple", 
						"children": [symbol {
							"value": "State"
						}, symbol {
							"value": "Node"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [initialization {
								"definition": definition {
									"before-type": "final", 
									"name": "withBefore", 
									"type": symbol {
										"value": "var"
									}
								}, 
								"value": invocation {
									"caller": " beforePass.apply", 
									"arguments": "state, node"
								}
							}, initialization {
								"definition": definition {
									"before-type": "final", 
									"name": "withNodeLists", 
									"type": symbol {
										"value": "var"
									}
								}, 
								"value": invocation {
									"caller": " withBefore.right", 
									"arguments": ")\n                .streamNodeLists()\n                .reduce(withBefore, (node1, tuple) -> passNodeLists(node1, tuple, beforePass, afterPass), (_, next) -> next"
								}
							}, initialization {
								"definition": definition {
									"before-type": "final", 
									"name": "withNodes", 
									"type": symbol {
										"value": "var"
									}
								}, 
								"value": invocation {
									"caller": " withNodeLists.right", 
									"arguments": ")\n                .streamNodes()\n                .reduce(withNodeLists, (node1, tuple) -> passNode(node1, tuple, beforePass, afterPass), (_, next) -> next"
								}
							}, invocation {
								"caller": "return afterPass.apply", 
								"arguments": "withNodes.left(), withNodes.right()"
							}]
						}
					}, 
					"params": [definition {
						"name": "state", 
						"type": symbol {
							"value": "State"
						}
					}, definition {
						"name": "node", 
						"type": symbol {
							"value": "Node"
						}
					}, definition {
						"name": "beforePass", 
						"type": generic {
							"parent": "BiFunction", 
							"children": [symbol {
								"value": "State"
							}, symbol {
								"value": "Node"
							}, generic {
								"parent": "Tuple", 
								"children": [symbol {
									"value": "State"
								}, symbol {
									"value": "Node"
								}]
							}]
						}
					}, definition {
						"name": "afterPass", 
						"type": generic {
							"parent": "BiFunction", 
							"children": [symbol {
								"value": "State"
							}, symbol {
								"value": "Node"
							}, generic {
								"parent": "Tuple", 
								"children": [symbol {
									"value": "State"
								}, symbol {
									"value": "Node"
								}]
							}]
						}
					}]
				}, method {
					"before-type": "private static", 
					"name": "passNode", 
					"type": generic {
						"parent": "Tuple", 
						"children": [symbol {
							"value": "State"
						}, symbol {
							"value": "Node"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [initialization {
								"definition": definition {
									"before-type": "final", 
									"name": "oldState", 
									"type": symbol {
										"value": "var"
									}
								}, 
								"value": invocation {
									"caller": " current.left", 
									"arguments": ""
								}
							}, initialization {
								"definition": definition {
									"before-type": "final", 
									"name": "oldNode", 
									"type": symbol {
										"value": "var"
									}
								}, 
								"value": invocation {
									"caller": " current.right", 
									"arguments": ""
								}
							}, initialization {
								"definition": definition {
									"before-type": "final", 
									"name": "key", 
									"type": symbol {
										"value": "var"
									}
								}, 
								"value": invocation {
									"caller": " entry.left", 
									"arguments": ""
								}
							}, initialization {
								"definition": definition {
									"before-type": "final", 
									"name": "value", 
									"type": symbol {
										"value": "var"
									}
								}, 
								"value": invocation {
									"caller": " entry.right", 
									"arguments": ""
								}
							}, invocation {
								"caller": "return pass", 
								"arguments": "oldState, value, beforePass, afterPass).mapRight(right -> oldNode.withNode(key, right)"
							}]
						}
					}, 
					"params": [definition {
						"name": "current", 
						"type": generic {
							"parent": "Tuple", 
							"children": [symbol {
								"value": "State"
							}, symbol {
								"value": "Node"
							}]
						}
					}, definition {
						"name": "entry", 
						"type": generic {
							"parent": "Tuple", 
							"children": [symbol {
								"value": "String"
							}, symbol {
								"value": "Node"
							}]
						}
					}, definition {
						"name": "beforePass", 
						"type": generic {
							"parent": "BiFunction", 
							"children": [symbol {
								"value": "State"
							}, symbol {
								"value": "Node"
							}, generic {
								"parent": "Tuple", 
								"children": [symbol {
									"value": "State"
								}, symbol {
									"value": "Node"
								}]
							}]
						}
					}, definition {
						"name": "afterPass", 
						"type": generic {
							"parent": "BiFunction", 
							"children": [symbol {
								"value": "State"
							}, symbol {
								"value": "Node"
							}, generic {
								"parent": "Tuple", 
								"children": [symbol {
									"value": "State"
								}, symbol {
									"value": "Node"
								}]
							}]
						}
					}]
				}, method {
					"before-type": "private static", 
					"name": "passNodeLists", 
					"type": generic {
						"parent": "Tuple", 
						"children": [symbol {
							"value": "State"
						}, symbol {
							"value": "Node"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [initialization {
								"definition": definition {
									"before-type": "final", 
									"name": "oldState", 
									"type": symbol {
										"value": "var"
									}
								}, 
								"value": invocation {
									"caller": " current.left", 
									"arguments": ""
								}
							}, initialization {
								"definition": definition {
									"before-type": "final", 
									"name": "oldChildren", 
									"type": symbol {
										"value": "var"
									}
								}, 
								"value": invocation {
									"caller": " current.right", 
									"arguments": ""
								}
							}, initialization {
								"definition": definition {
									"before-type": "final", 
									"name": "key", 
									"type": symbol {
										"value": "var"
									}
								}, 
								"value": invocation {
									"caller": " entry.left", 
									"arguments": ""
								}
							}, initialization {
								"definition": definition {
									"before-type": "final", 
									"name": "values", 
									"type": symbol {
										"value": "var"
									}
								}, 
								"value": invocation {
									"caller": " entry.right", 
									"arguments": ""
								}
							}, assignment {
								"destination": "var currentState ", 
								"source": " oldState"
							}, initialization {
								"definition": definition {
									"name": "currentChildren", 
									"type": symbol {
										"value": "var"
									}
								}, 
								"value": invocation {
									"caller": " new ArrayList<Node>", 
									"arguments": ""
								}
							}, initialization {
								"definition": definition {
									"name": "i", 
									"type": symbol {
										"value": "int"
									}
								}, 
								"value": number {
									"value": "0"
								}
							}, while {
								"condition": invocation {
									"caller": "i < values.size", 
									"arguments": ""
								}, 
								"value": block {
									"value": group {
										"children": [initialization {
											"definition": definition {
												"name": "value", 
												"type": symbol {
													"value": "Node"
												}
											}, 
											"value": invocation {
												"caller": " values.get", 
												"arguments": "i"
											}
										}, initialization {
											"definition": definition {
												"before-type": "final", 
												"name": "passed", 
												"type": symbol {
													"value": "var"
												}
											}, 
											"value": invocation {
												"caller": " pass", 
												"arguments": "currentState, value, beforePass, afterPass"
											}
										}, invocation {
											"caller": "currentState = passed.left", 
											"arguments": ""
										}, invocation {
											"caller": "currentChildren.add", 
											"arguments": "passed.right()"
										}, assignment {
											"destination": "i ", 
											"source": " i + 1"
										}]
									}
								}
							}, initialization {
								"definition": definition {
									"before-type": "final", 
									"name": "newNode", 
									"type": symbol {
										"value": "var"
									}
								}, 
								"value": invocation {
									"caller": " oldChildren.withNodeList", 
									"arguments": "key, currentChildren"
								}
							}, invocation {
								"caller": "return new Tuple<>", 
								"arguments": "oldState, newNode"
							}]
						}
					}, 
					"params": [definition {
						"name": "current", 
						"type": generic {
							"parent": "Tuple", 
							"children": [symbol {
								"value": "State"
							}, symbol {
								"value": "Node"
							}]
						}
					}, definition {
						"name": "entry", 
						"type": generic {
							"parent": "Tuple", 
							"children": [symbol {
								"value": "String"
							}, generic {
								"parent": "List", 
								"children": [symbol {
									"value": "Node"
								}]
							}]
						}
					}, definition {
						"name": "beforePass", 
						"type": generic {
							"parent": "BiFunction", 
							"children": [symbol {
								"value": "State"
							}, symbol {
								"value": "Node"
							}, generic {
								"parent": "Tuple", 
								"children": [symbol {
									"value": "State"
								}, symbol {
									"value": "Node"
								}]
							}]
						}
					}, definition {
						"name": "afterPass", 
						"type": generic {
							"parent": "BiFunction", 
							"children": [symbol {
								"value": "State"
							}, symbol {
								"value": "Node"
							}, generic {
								"parent": "Tuple", 
								"children": [symbol {
									"value": "State"
								}, symbol {
									"value": "Node"
								}]
							}]
						}
					}]
				}, method {
					"before-type": "private static", 
					"name": "modify", 
					"type": generic {
						"parent": "Tuple", 
						"children": [symbol {
							"value": "State"
						}, symbol {
							"value": "Node"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [initialization {
								"definition": definition {
									"before-type": "final", 
									"name": "result", 
									"type": symbol {
										"value": "var"
									}
								}, 
								"value": invocation {
									"caller": " modifyStateless", 
									"arguments": "node"
								}
							}, invocation {
								"caller": "return new Tuple<>", 
								"arguments": "state, result"
							}]
						}
					}, 
					"params": [definition {
						"name": "state", 
						"type": symbol {
							"value": "State"
						}
					}, definition {
						"name": "node", 
						"type": symbol {
							"value": "Node"
						}
					}]
				}, method {
					"before-type": "private static", 
					"name": "modifyStateless", 
					"type": symbol {
						"value": "Node"
					}, 
					"value": block {
						"value": group {
							"children": [if {
								"condition": invocation {
									"caller": "node.is", 
									"arguments": ""group""
								}, 
								"value": block {
									"value": group {
										"children": [initialization {
											"definition": definition {
												"before-type": "final", 
												"name": "oldChildren", 
												"type": symbol {
													"value": "var"
												}
											}, 
											"value": invocation {
												"caller": " node.findNodeList", 
												"arguments": ""children").orElse(new ArrayList<>()"
											}
										}, initialization {
											"definition": definition {
												"before-type": "final", 
												"name": "newChildren", 
												"type": symbol {
													"value": "var"
												}
											}, 
											"value": invocation {
												"caller": " oldChildren.stream", 
												"arguments": ")\n                    .filter(oldChild -> !oldChild.is("package"))\n                    .collect(Collectors.toCollection(ArrayList::new)"
											}
										}, invocation {
											"caller": "return node.withNodeList", 
											"arguments": ""children", newChildren"
										}]
									}
								}
							}, else {
								"value": if {
									"condition": invocation {
										"caller": "node.is", 
										"arguments": ""class""
									}, 
									"value": block {
										"value": group {
											"children": [invocation {
												"caller": "return node.retype", 
												"arguments": ""struct""
											}]
										}
									}
								}
							}, else {
								"value": if {
									"condition": invocation {
										"caller": "node.is", 
										"arguments": ""import""
									}, 
									"value": block {
										"value": group {
											"children": [invocation {
												"caller": "return node.retype", 
												"arguments": ""include""
											}]
										}
									}
								}
							}, else {
								"value": if {
									"condition": invocation {
										"caller": "node.is", 
										"arguments": ""method""
									}, 
									"value": block {
										"value": group {
											"children": [invocation {
												"caller": "return node.retype", 
												"arguments": ""function""
											}]
										}
									}
								}
							}, else {
								"value": block {
									"value": group {
										"children": [return {
											"value": "node"
										}]
									}
								}
							}]
						}
					}, 
					"params": [definition {
						"name": "node", 
						"type": symbol {
							"value": "Node"
						}
					}]
				}, method {
					"before-type": "private static", 
					"name": "writeGenerated", 
					"type": generic {
						"parent": "Optional", 
						"children": [symbol {
							"value": "ApplicationError"
						}]
					}, 
					"value": block {
						"value": group {
							"children": [invocation {
								"caller": "return JavaFiles.writeString", 
								"arguments": "target, generated)\n                .map(JavaError::new)\n                .map(ApplicationError::new"
							}]
						}
					}, 
					"params": [definition {
						"name": "generated", 
						"type": symbol {
							"value": "String"
						}
					}, definition {
						"name": "target", 
						"type": symbol {
							"value": "Path"
						}
					}]
				}]
			}
		}
	}, whitespace {
	}]
}