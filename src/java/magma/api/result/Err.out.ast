{
"children": [import {
 "namespace": ["magma", "api", "Tuple"]
 }, import {
 "namespace": ["java", "util", "Optional"]
 }, import {
 "namespace": ["java", "util", "function", "Function"]
 }, import {
 "namespace": ["java", "util", "function", "Supplier"]
 }, function {
 "name": "Err",
 "interface": generic {
  "base": symbol {
   "value": "Result"
   },
  "children": [symbol {
   "value": "T"
   }, symbol {
   "value": "E"
   }]
  },
 "type-params": [symbol {
  "value": "T"
  }, symbol {
  "value": "E"
  }],
 "modifiers": [modifier {
  "content": "public"
  }],
 "params": [definition {
  "name": "error",
  "type": symbol {
   "value": "E"
   }
  }],
 "children": [method {
  "name": "findValue",
  "type-params": "@Override
    public",
  "returns": generic {
   "base": symbol {
    "value": "Optional"
    },
   "children": [symbol {
    "value": "T"
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": access {
     "name": "empty",
     "parent": symbol {
      "content": "Optional"
      }
     },
    "arguments": []
    }
   }],
  "params": []
  }, method {
  "name": "findError",
  "type-params": "@Override
    public",
  "returns": generic {
   "base": symbol {
    "value": "Optional"
    },
   "children": [symbol {
    "value": "E"
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": access {
     "name": "of",
     "parent": symbol {
      "content": "Optional"
      }
     },
    "arguments": [symbol {
     "content": "error"
     }]
    }
   }],
  "params": []
  }, method {
  "name": "mapValue",
  "type-params": "@Override
    public <R>",
  "returns": generic {
   "base": symbol {
    "value": "Result"
    },
   "children": [symbol {
    "value": "R"
    }, symbol {
    "value": "E"
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": symbol {
     "content": "new Err<>"
     },
    "arguments": [symbol {
     "content": "error"
     }]
    }
   }],
  "params": [definition {
   "name": "mapper",
   "type": generic {
    "base": symbol {
     "value": "Function"
     },
    "children": [symbol {
     "value": "T"
     }, symbol {
     "value": "R"
     }]
    }
   }]
  }, method {
  "name": "isErr",
  "type-params": "@Override
    public",
  "returns": symbol {
   "value": "boolean"
   },
  "children": [return {
   "value": symbol {
    "content": "true"
    }
   }],
  "params": []
  }, method {
  "name": "and",
  "type-params": "@Override
    public <R>",
  "returns": generic {
   "base": symbol {
    "value": "Result"
    },
   "children": [generic {
    "base": symbol {
     "value": "Tuple"
     },
    "children": [symbol {
     "value": "T"
     }, symbol {
     "value": "R"
     }]
    }, symbol {
    "value": "E"
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": symbol {
     "content": "new Err<>"
     },
    "arguments": [symbol {
     "content": "error"
     }]
    }
   }],
  "params": [definition {
   "name": "supplier",
   "type": generic {
    "base": symbol {
     "value": "Supplier"
     },
    "children": [generic {
     "base": symbol {
      "value": "Result"
      },
     "children": [symbol {
      "value": "R"
      }, symbol {
      "value": "E"
      }]
     }]
    }
   }]
  }, method {
  "name": "isOk",
  "type-params": "@Override
    public",
  "returns": symbol {
   "value": "boolean"
   },
  "children": [return {
   "value": symbol {
    "content": "false"
    }
   }],
  "params": []
  }, method {
  "name": "flatMapValue",
  "type-params": "@Override
    public <R>",
  "returns": generic {
   "base": symbol {
    "value": "Result"
    },
   "children": [symbol {
    "value": "R"
    }, symbol {
    "value": "E"
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": symbol {
     "content": "new Err<>"
     },
    "arguments": [symbol {
     "content": "error"
     }]
    }
   }],
  "params": [definition {
   "name": "mapper",
   "type": generic {
    "base": symbol {
     "value": "Function"
     },
    "children": [symbol {
     "value": "T"
     }, generic {
     "base": symbol {
      "value": "Result"
      },
     "children": [symbol {
      "value": "R"
      }, symbol {
      "value": "E"
      }]
     }]
    }
   }]
  }]
 }]
}