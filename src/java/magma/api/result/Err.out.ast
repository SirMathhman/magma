{
"children": [import {
 "namespace": ["magma", "api", "Tuple"]
 }, import {
 "namespace": ["java", "util", "Optional"]
 }, import {
 "namespace": ["java", "util", "function", "Function"]
 }, import {
 "namespace": ["java", "util", "function", "Supplier"]
 }, function {
 "name": "Err",
 "modifiers": ["public"],
 "interface": generic {
  "base": symbol {
   "type": "Result"
   },
  "children": [symbol {
   "type": "T"
   }, symbol {
   "type": "E"
   }]
  },
 "children": [method {
  "name": "findValue",
  "content": " {
        return Optional.empty();
    }",
  "returns": generic {
   "base": symbol {
    "type": "@Override
    public Optional"
    },
   "children": [symbol {
    "type": "T"
    }]
   }
  }, method {
  "name": "findError",
  "content": " {
        return Optional.of(error);
    }",
  "returns": generic {
   "base": symbol {
    "type": "@Override
    public Optional"
    },
   "children": [symbol {
    "type": "E"
    }]
   }
  }, method {
  "name": "mapValue",
  "content": " {
        return new Err<>(error);
    }",
  "params": content {
   "params": "Function<T, R> mapper"
   },
  "returns": generic {
   "base": symbol {
    "type": "@Override
    public"
    },
   "children": [symbol {
    "type": "R> Result<R"
    }, symbol {
    "type": "E"
    }]
   }
  }, method {
  "name": "isErr",
  "content": " {
        return true;
    }",
  "returns": symbol {
   "type": "@Override
    public boolean"
   }
  }, method {
  "name": "and",
  "content": " {
        return new Err<>(error);
    }",
  "params": content {
   "params": "Supplier<Result<R, E>> supplier"
   },
  "returns": generic {
   "base": symbol {
    "type": "@Override
    public"
    },
   "children": [generic {
    "base": symbol {
     "type": "R> Result"
     },
    "children": [symbol {
     "type": "Tuple<T, R"
     }]
    }, symbol {
    "type": "E"
    }]
   }
  }, method {
  "name": "isOk",
  "content": " {
        return false;
    }",
  "returns": symbol {
   "type": "@Override
    public boolean"
   }
  }],
 "type-params": [symbol {
  "type": "T"
  }, symbol {
  "type": "E"
  }],
 "params": [definition {
  "type": "E",
  "name": "error"
  }]
 }]
}