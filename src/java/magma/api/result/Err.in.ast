{
"children": [package {
 "namespace": ["magma", "api", "result"]
 }, import {
 "namespace": ["magma", "api", "Tuple"]
 }, import {
 "namespace": ["java", "util", "Optional"]
 }, import {
 "namespace": ["java", "util", "function", "Function"]
 }, import {
 "namespace": ["java", "util", "function", "Supplier"]
 }, record {
 "name": "Err",
 "params-and-body": "E error) implements Result<T, E> {
    @Override
    public Optional<T> findValue() {
        return Optional.empty();
    }

    @Override
    public Optional<E> findError() {
        return Optional.of(error);
    }

    @Override
    public <R> Result<R, E> mapValue(Function<T, R> mapper) {
        return new Err<>(error);
    }

    @Override
    public boolean isErr() {
        return true;
    }

    @Override
    public <R> Result<Tuple<T, R>, E> and(Supplier<Result<R, E>> supplier) {
        return new Err<>(error);
    }

    @Override
    public boolean isOk() {
        return false;
    }
}",
 "modifiers": ["public"],
 "children": [symbol {
  "type": "T"
  }, symbol {
  "type": "E"
  }]
 }]
}