{
"children": [package {
 "namespace": ["magma", "api", "result"]
 }, import {
 "namespace": ["magma", "api", "Tuple"]
 }, import {
 "namespace": ["java", "util", "Optional"]
 }, import {
 "namespace": ["java", "util", "function", "Function"]
 }, import {
 "namespace": ["java", "util", "function", "Supplier"]
 }, record {
 "name": "Err",
 "modifiers": ["public"],
 "interface": generic {
  "base": symbol {
   "type": "Result"
   },
  "children": [symbol {
   "type": "T"
   }, symbol {
   "type": "E"
   }]
  },
 "children": [method {
  "name": "findValue",
  "modifiers": ["@Override
", "public"],
  "returns": generic {
   "base": symbol {
    "type": "Optional"
    },
   "children": [symbol {
    "type": "T"
    }]
   },
  "children": [return {
   "value": any {
    "content": "Optional.empty()"
    }
   }]
  }, method {
  "name": "findError",
  "modifiers": ["@Override
", "public"],
  "returns": generic {
   "base": symbol {
    "type": "Optional"
    },
   "children": [symbol {
    "type": "E"
    }]
   },
  "children": [return {
   "value": any {
    "content": "Optional.of(error)"
    }
   }]
  }, method {
  "name": "mapValue",
  "modifiers": ["@Override
", "public", "<R>", "Result<R,"],
  "params": content {
   "params": "Function<T, R> mapper"
   },
  "returns": symbol {
   "type": "E>"
   },
  "children": [return {
   "value": any {
    "content": "new Err<>(error)"
    }
   }]
  }, method {
  "name": "isErr",
  "modifiers": ["@Override
", "public"],
  "returns": symbol {
   "type": "boolean"
   },
  "children": [return {
   "value": any {
    "content": "true"
    }
   }]
  }, method {
  "name": "and",
  "modifiers": ["@Override
", "public", "<R>", "Result<Tuple<T,", "R>,"],
  "params": content {
   "params": "Supplier<Result<R, E>> supplier"
   },
  "returns": symbol {
   "type": "E>"
   },
  "children": [return {
   "value": any {
    "content": "new Err<>(error)"
    }
   }]
  }, method {
  "name": "isOk",
  "modifiers": ["@Override
", "public"],
  "returns": symbol {
   "type": "boolean"
   },
  "children": [return {
   "value": any {
    "content": "false"
    }
   }]
  }, method {
  "name": "flatMapValue",
  "modifiers": ["@Override
", "public", "<R>", "Result<R,"],
  "params": content {
   "params": "Function<T, Result<R, E>> mapper"
   },
  "returns": symbol {
   "type": "E>"
   },
  "children": [return {
   "value": any {
    "content": "new Err<>(error)"
    }
   }]
  }],
 "type-params": [symbol {
  "type": "T"
  }, symbol {
  "type": "E"
  }],
 "params": [definition {
  "type": "E",
  "name": "error"
  }]
 }]
}