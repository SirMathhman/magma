{
"children": [package {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "api"
  }, segment {
  "segment": "result"
  }]
 }, import {
 "namespace": [segment {
  "segment": "magma"
  }, segment {
  "segment": "api"
  }, segment {
  "segment": "Tuple"
  }]
 }, import {
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "Optional"
  }]
 }, import {
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "function"
  }, segment {
  "segment": "Function"
  }]
 }, import {
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "function"
  }, segment {
  "segment": "Supplier"
  }]
 }, class {
 "name": "Ok<T, E> implements Result<T, E> ",
 "children": [definition {
  "name": "value",
  "returns": symbol {
   "namespace": [segment {
    "segment": "T"
    }]
   },
  "modifiers": [modifier {
   "modifier-value": "private"
   }, modifier {
   "modifier-value": "final"
   }]
  }, method {
  "name": "Ok",
  "returns": symbol {
   "namespace": [segment {
    "segment": "public"
    }]
   },
  "children": [assignment {
   "content": "value",
   "child": "value",
   "parent": symbol {
    "content": "this"
    }
   }, whitespace {
   }],
  "params": [definition {
   "name": "value",
   "returns": symbol {
    "namespace": [segment {
     "segment": "T"
     }]
    }
   }]
  }, method {
  "name": "findValue",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Optional"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "T"
     }]
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "of",
     "parent": symbol {
      "content": "Optional"
      }
     },
    "arguments": [symbol {
     "content": "value"
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }]
  }, method {
  "name": "findError",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Optional"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "E"
     }]
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "empty",
     "parent": symbol {
      "content": "Optional"
      }
     }
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }]
  }, method {
  "name": "mapValue",
  "type-params": "R",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Result"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "R"
     }]
    }, symbol {
    "namespace": [segment {
     "segment": "E"
     }]
    }]
   },
  "children": [return {
   "value": construction {
    "caller": symbol {
     "content": "Ok"
     },
    "arguments": [invocation {
     "caller": property-access {
      "child": "apply",
      "parent": symbol {
       "content": "mapper"
       }
      },
     "arguments": [symbol {
      "content": "value"
      }]
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "mapper",
   "returns": generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "Function"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "T"
      }]
     }, symbol {
     "namespace": [segment {
      "segment": "R"
      }]
     }]
    }
   }]
  }, method {
  "name": "isErr",
  "returns": symbol {
   "namespace": [segment {
    "segment": "boolean"
    }]
   },
  "children": [return {
   "value": symbol {
    "content": "false"
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }]
  }, method {
  "name": "and",
  "type-params": "R",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Result"
     }]
    },
   "children": [generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "Tuple"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "T"
      }]
     }, symbol {
     "namespace": [segment {
      "segment": "R"
      }]
     }]
    }, symbol {
    "namespace": [segment {
     "segment": "E"
     }]
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "mapValue",
     "parent": invocation {
      "caller": property-access {
       "child": "get",
       "parent": symbol {
        "content": "supplier"
        }
       }
      }
     },
    "arguments": [invocation {
     "caller": lambda {
      "before-arrow": "inner ",
      "after-arrow": " new Tuple<>"
      },
     "arguments": [symbol {
      "content": "value"
      }, symbol {
      "content": "inner"
      }]
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "supplier",
   "returns": generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "Supplier"
      }]
     },
    "children": [generic {
     "base": symbol {
      "namespace": [segment {
       "segment": "Result"
       }]
      },
     "children": [symbol {
      "namespace": [segment {
       "segment": "R"
       }]
      }, symbol {
      "namespace": [segment {
       "segment": "E"
       }]
      }]
     }]
    }
   }]
  }, method {
  "name": "isOk",
  "returns": symbol {
   "namespace": [segment {
    "segment": "boolean"
    }]
   },
  "children": [return {
   "value": symbol {
    "content": "true"
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }]
  }, method {
  "name": "flatMapValue",
  "type-params": "R",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Result"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "R"
     }]
    }, symbol {
    "namespace": [segment {
     "segment": "E"
     }]
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "apply",
     "parent": symbol {
      "content": "mapper"
      }
     },
    "arguments": [symbol {
     "content": "value"
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "mapper",
   "returns": generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "Function"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "T"
      }]
     }, generic {
     "base": symbol {
      "namespace": [segment {
       "segment": "Result"
       }]
      },
     "children": [symbol {
      "namespace": [segment {
       "segment": "R"
       }]
      }, symbol {
      "namespace": [segment {
       "segment": "E"
       }]
      }]
     }]
    }
   }]
  }, method {
  "name": "mapErr",
  "type-params": "R",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Result"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "T"
     }]
    }, symbol {
    "namespace": [segment {
     "segment": "R"
     }]
    }]
   },
  "children": [return {
   "value": construction {
    "caller": symbol {
     "content": "Ok"
     },
    "arguments": [symbol {
     "content": "value"
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "mapper",
   "returns": generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "Function"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "E"
      }]
     }, symbol {
     "namespace": [segment {
      "segment": "R"
      }]
     }]
    }
   }]
  }, method {
  "name": "match",
  "type-params": "R",
  "returns": symbol {
   "namespace": [segment {
    "segment": "R"
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": property-access {
     "child": "apply",
     "parent": symbol {
      "content": "onValid"
      }
     },
    "arguments": [symbol {
     "content": "value"
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "onValid",
   "returns": generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "Function"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "T"
      }]
     }, symbol {
     "namespace": [segment {
      "segment": "R"
      }]
     }]
    }
   }, definition {
   "name": "onError",
   "returns": generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "Function"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "E"
      }]
     }, symbol {
     "namespace": [segment {
      "segment": "R"
      }]
     }]
    }
   }]
  }, whitespace {
  }],
 "modifiers": [modifier {
  "modifier-value": "public"
  }]
 }, whitespace {
 }]
}