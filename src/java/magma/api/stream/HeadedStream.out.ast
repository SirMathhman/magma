{
"children": [import {
 "after-import": "
",
 "namespace": [segment {
  "segment": "java"
  }, segment {
  "segment": "util"
  }, segment {
  "segment": "function"
  }, segment {
  "segment": "BiFunction"
  }]
 }, function {
 "name": "HeadedStream",
 "interface": generic {
  "base": symbol {
   "namespace": [segment {
    "segment": "Stream"
    }]
   },
  "children": [symbol {
   "namespace": [segment {
    "segment": "T"
    }]
   }]
  },
 "type-params": [symbol {
  "namespace": [segment {
   "segment": "T"
   }]
  }],
 "modifiers": [modifier {
  "modifier-value": "export"
  }, modifier {
  "modifier-value": "class"
  }],
 "params": [definition {
  "name": "head",
  "returns": generic {
   "base": symbol {
    "namespace": [segment {
     "segment": "Head"
     }]
    },
   "children": [symbol {
    "namespace": [segment {
     "segment": "T"
     }]
    }]
   }
  }],
 "children": [method {
  "name": "collect",
  "type-params": "C",
  "returns": symbol {
   "namespace": [segment {
    "segment": "C"
    }]
   },
  "children": [return {
   "value": invocation {
    "caller": symbol {
     "content": "foldRight"
     },
    "arguments": [invocation {
     "caller": property-access {
      "child": "initial",
      "parent": symbol {
       "content": "collector"
       }
      }
     }, method-access {
     "child": "fold",
     "parent": symbol {
      "content": "collector"
      }
     }]
    }
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "collector",
   "returns": generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "Collector"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "T"
      }]
     }, symbol {
     "namespace": [segment {
      "segment": "C"
      }]
     }]
    }
   }]
  }, method {
  "name": "foldRight",
  "type-params": "C",
  "returns": symbol {
   "namespace": [segment {
    "segment": "C"
    }]
   },
  "children": [declaration {
   "name": "current",
   "content": "initial",
   "returns": symbol {
    "namespace": [segment {
     "segment": "var"
     }]
    }
   }, while {
   "content": " (true) {
            C finalCurrent = current;
            final var tuple = head.next()
                    .map(value -> folder.apply(finalCurrent, value))
                    .toTuple(current);

            if (tuple.left()) {
                current = tuple.right();
            } else {
                return current;
            }
        }"
   }, whitespace {
   }],
  "annotations": [annotation {
   "value": "Override"
   }],
  "modifiers": [modifier {
   "modifier-value": "public"
   }],
  "params": [definition {
   "name": "initial",
   "returns": symbol {
    "namespace": [segment {
     "segment": "C"
     }]
    }
   }, definition {
   "name": "folder",
   "returns": generic {
    "base": symbol {
     "namespace": [segment {
      "segment": "BiFunction"
      }]
     },
    "children": [symbol {
     "namespace": [segment {
      "segment": "C"
      }]
     }, symbol {
     "namespace": [segment {
      "segment": "T"
      }]
     }, symbol {
     "namespace": [segment {
      "segment": "C"
      }]
     }]
    }
   }]
  }, implements {
  }]
 }, whitespace {
 }]
}