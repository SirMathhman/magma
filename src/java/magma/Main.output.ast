group {
	"after-children": "\n", 
	"children": [include {
		"namespace": ["magma", "api", "JavaFiles"]
	}, include {
		"before-child": "\n", 
		"namespace": ["magma", "api", "result", "Err"]
	}, include {
		"before-child": "\n", 
		"namespace": ["magma", "api", "result", "Ok"]
	}, include {
		"before-child": "\n", 
		"namespace": ["magma", "api", "result", "Result"]
	}, include {
		"before-child": "\n", 
		"namespace": ["magma", "compile", "Node"]
	}, include {
		"before-child": "\n", 
		"namespace": ["magma", "compile", "State"]
	}, include {
		"before-child": "\n", 
		"namespace": ["magma", "compile", "error", "ApplicationError"]
	}, include {
		"before-child": "\n", 
		"namespace": ["magma", "compile", "error", "JavaError"]
	}, include {
		"before-child": "\n", 
		"namespace": ["magma", "compile", "lang", "CLang"]
	}, include {
		"before-child": "\n", 
		"namespace": ["magma", "compile", "lang", "JavaLang"]
	}, include {
		"before-child": "\n", 
		"namespace": ["magma", "compile", "pass", "Formatter"]
	}, include {
		"before-child": "\n", 
		"namespace": ["magma", "compile", "pass", "Modifier"]
	}, include {
		"before-child": "\n", 
		"namespace": ["magma", "compile", "pass", "TreePassingStage"]
	}, include {
		"before-child": "\n", 
		"namespace": ["java", "nio", "file", "Path"]
	}, include {
		"before-child": "\n", 
		"namespace": ["java", "nio", "file", "Paths"]
	}, include {
		"before-child": "\n", 
		"namespace": ["java", "util", "Optional"]
	}, struct {
		"name": "Main", 
		"before-child": "\n", 
		"modifiers": ["public"], 
		"value": block {
			"value": group {
				"after-children": "\n", 
				"children": [function {
					"name": "main", 
					"before-child": "\n	", 
					"modifiers": ["public", "static"], 
					"type": symbol {
						"symbol-value": "void"
					}, 
					"value": block {
						"value": group {
							"after-children": "\n	", 
							"children": [initialization {
								"before-child": "\n		", 
								"definition": definition {
									"name": "source", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "Path"
									}
								}, 
								"value": invocation-value {
									"caller": data-access {
										"property": "get", 
										"object": symbol {
											"symbol-value": "Paths"
										}
									}, 
									"arguments": [string {
										"string-value": "."
									}, string {
										"string-value": "src"
									}, string {
										"string-value": "java"
									}, string {
										"string-value": "magma"
									}, string {
										"string-value": "Main.java"
									}]
								}
							}, block {
								"before-child": "\n		", 
								"value": group {
									"after-children": "\n		", 
									"children": [initialization {
										"before-child": "\n			", 
										"definition": definition {
											"name": "local", 
											"type": symbol {
												"symbol-value": "auto"
											}
										}, 
										"value": block {
											"value": group {
												"after-children": "\n			", 
												"children": [initialization {
													"before-child": "\n				", 
													"definition": definition {
														"name": "local", 
														"type": symbol {
															"symbol-value": "auto"
														}
													}, 
													"value": block {
														"value": group {
															"after-children": "\n				", 
															"children": [initialization {
																"before-child": "\n					", 
																"definition": definition {
																	"name": "local", 
																	"type": symbol {
																		"symbol-value": "auto"
																	}
																}, 
																"value": block {
																	"value": group {
																		"after-children": "\n					", 
																		"children": [initialization {
																			"before-child": "\n						", 
																			"definition": definition {
																				"name": "local", 
																				"type": symbol {
																					"symbol-value": "auto"
																				}
																			}, 
																			"value": invocation-value {
																				"caller": data-access {
																					"property": "readString", 
																					"object": symbol {
																						"symbol-value": "JavaFiles"
																					}
																				}, 
																				"arguments": [symbol {
																					"symbol-value": "source"
																				}]
																			}
																		}, invocation-value {
																			"before-child": "\n						", 
																			"caller": data-access {
																				"property": "mapErr", 
																				"object": symbol {
																					"symbol-value": "local"
																				}
																			}, 
																			"arguments": [symbol {
																				"symbol-value": "local"
																			}, function-access {
																				"property": "new", 
																				"object": symbol {
																					"symbol-value": "JavaError"
																				}
																			}]
																		}]
																	}
																}
															}, invocation-value {
																"before-child": "\n					", 
																"caller": data-access {
																	"property": "mapErr", 
																	"object": symbol {
																		"symbol-value": "local"
																	}
																}, 
																"arguments": [symbol {
																	"symbol-value": "local"
																}, function-access {
																	"property": "new", 
																	"object": symbol {
																		"symbol-value": "ApplicationError"
																	}
																}]
															}]
														}
													}
												}, invocation-value {
													"before-child": "\n				", 
													"caller": data-access {
														"property": "match", 
														"object": symbol {
															"symbol-value": "local"
														}
													}, 
													"arguments": [symbol {
														"symbol-value": "local"
													}, invocation-value {
														"caller": lambda {
															"param": symbol {
																"symbol-value": "input"
															}, 
															"value": symbol {
																"symbol-value": "runWithInput"
															}
														}, 
														"arguments": [symbol {
															"symbol-value": "source"
														}, symbol {
															"symbol-value": "input"
														}]
													}, function-access {
														"property": "of", 
														"object": symbol {
															"symbol-value": "Optional"
														}
													}]
												}]
											}
										}
									}, invocation-value {
										"before-child": "\n			", 
										"caller": data-access {
											"property": "ifPresent", 
											"object": symbol {
												"symbol-value": "local"
											}
										}, 
										"arguments": [symbol {
											"symbol-value": "local"
										}, block {
											"value": group {
												"after-children": "\n			", 
												"children": [initialization {
													"before-child": "\n				", 
													"definition": definition {
														"name": "local", 
														"type": symbol {
															"symbol-value": "auto"
														}
													}, 
													"value": data-access {
														"property": "err", 
														"object": lambda {
															"param": symbol {
																"symbol-value": "error"
															}, 
															"value": symbol {
																"symbol-value": "System"
															}
														}
													}
												}, invocation-value {
													"before-child": "\n				", 
													"caller": data-access {
														"property": "println", 
														"object": symbol {
															"symbol-value": "local"
														}
													}, 
													"arguments": [symbol {
														"symbol-value": "local"
													}, invocation-value {
														"caller": data-access {
															"property": "display", 
															"object": symbol {
																"symbol-value": "error"
															}
														}, 
														"arguments": []
													}]
												}]
											}
										}]
									}]
								}
							}]
						}
					}, 
					"params": [definition {
						"name": "args", 
						"type": array {
							"child": symbol {
								"symbol-value": "String"
							}
						}
					}]
				}, function {
					"name": "runWithInput", 
					"before-child": "\n	", 
					"modifiers": ["private", "static"], 
					"type": generic {
						"parent": "Optional", 
						"children": [symbol {
							"symbol-value": "ApplicationError"
						}]
					}, 
					"value": block {
						"value": group {
							"after-children": "\n	", 
							"children": [return {
								"before-child": "\n		", 
								"value": block {
									"value": group {
										"after-children": "\n		", 
										"children": [initialization {
											"before-child": "\n			", 
											"definition": definition {
												"name": "local", 
												"type": symbol {
													"symbol-value": "auto"
												}
											}, 
											"value": block {
												"value": group {
													"after-children": "\n			", 
													"children": [initialization {
														"before-child": "\n				", 
														"definition": definition {
															"name": "local", 
															"type": symbol {
																"symbol-value": "auto"
															}
														}, 
														"value": block {
															"value": group {
																"after-children": "\n				", 
																"children": [initialization {
																	"before-child": "\n					", 
																	"definition": definition {
																		"name": "local", 
																		"type": symbol {
																			"symbol-value": "auto"
																		}
																	}, 
																	"value": block {
																		"value": group {
																			"after-children": "\n					", 
																			"children": [initialization {
																				"before-child": "\n						", 
																				"definition": definition {
																					"name": "local", 
																					"type": symbol {
																						"symbol-value": "auto"
																					}
																				}, 
																				"value": block {
																					"value": group {
																						"after-children": "\n						", 
																						"children": [initialization {
																							"before-child": "\n							", 
																							"definition": definition {
																								"name": "local", 
																								"type": symbol {
																									"symbol-value": "auto"
																								}
																							}, 
																							"value": block {
																								"value": group {
																									"after-children": "\n							", 
																									"children": [initialization {
																										"before-child": "\n								", 
																										"definition": definition {
																											"name": "local", 
																											"type": symbol {
																												"symbol-value": "auto"
																											}
																										}, 
																										"value": block {
																											"value": group {
																												"after-children": "\n								", 
																												"children": [initialization {
																													"before-child": "\n									", 
																													"definition": definition {
																														"name": "local", 
																														"type": symbol {
																															"symbol-value": "auto"
																														}
																													}, 
																													"value": block {
																														"value": group {
																															"after-children": "\n									", 
																															"children": [initialization {
																																"before-child": "\n										", 
																																"definition": definition {
																																	"name": "local", 
																																	"type": symbol {
																																		"symbol-value": "auto"
																																	}
																																}, 
																																"value": block {
																																	"value": group {
																																		"after-children": "\n										", 
																																		"children": [initialization {
																																			"before-child": "\n											", 
																																			"definition": definition {
																																				"name": "local", 
																																				"type": symbol {
																																					"symbol-value": "auto"
																																				}
																																			}, 
																																			"value": invocation-value {
																																				"caller": data-access {
																																					"property": "createJavaRootRule", 
																																					"object": symbol {
																																						"symbol-value": "JavaLang"
																																					}
																																				}, 
																																				"arguments": []
																																			}
																																		}, invocation-value {
																																			"before-child": "\n											", 
																																			"caller": data-access {
																																				"property": "parse", 
																																				"object": symbol {
																																					"symbol-value": "local"
																																				}
																																			}, 
																																			"arguments": [symbol {
																																				"symbol-value": "local"
																																			}, symbol {
																																				"symbol-value": "input"
																																			}]
																																		}]
																																	}
																																}
																															}, invocation-value {
																																"before-child": "\n										", 
																																"caller": data-access {
																																	"property": "mapErr", 
																																	"object": symbol {
																																		"symbol-value": "local"
																																	}
																																}, 
																																"arguments": [symbol {
																																	"symbol-value": "local"
																																}, function-access {
																																	"property": "new", 
																																	"object": symbol {
																																		"symbol-value": "ApplicationError"
																																	}
																																}]
																															}]
																														}
																													}
																												}, invocation-value {
																													"before-child": "\n									", 
																													"caller": data-access {
																														"property": "flatMapValue", 
																														"object": symbol {
																															"symbol-value": "local"
																														}
																													}, 
																													"arguments": [symbol {
																														"symbol-value": "local"
																													}, invocation-value {
																														"caller": lambda {
																															"param": symbol {
																																"symbol-value": "parsed"
																															}, 
																															"value": symbol {
																																"symbol-value": "writeAST"
																															}
																														}, 
																														"arguments": [invocation-value {
																															"caller": data-access {
																																"property": "resolveSibling", 
																																"object": symbol {
																																	"symbol-value": "source"
																																}
																															}, 
																															"arguments": [string {
																																"string-value": "Main.input.ast"
																															}]
																														}, symbol {
																															"symbol-value": "parsed"
																														}]
																													}]
																												}]
																											}
																										}
																									}, invocation-value {
																										"before-child": "\n								", 
																										"caller": data-access {
																											"property": "mapValue", 
																											"object": symbol {
																												"symbol-value": "local"
																											}
																										}, 
																										"arguments": [symbol {
																											"symbol-value": "local"
																										}, block {
																											"value": group {
																												"after-children": "\n								", 
																												"children": [initialization {
																													"before-child": "\n									", 
																													"definition": definition {
																														"name": "local", 
																														"type": symbol {
																															"symbol-value": "auto"
																														}
																													}, 
																													"value": block {
																														"value": group {
																															"after-children": "\n									", 
																															"children": [initialization {
																																"before-child": "\n										", 
																																"definition": definition {
																																	"name": "local", 
																																	"type": symbol {
																																		"symbol-value": "auto"
																																	}
																																}, 
																																"value": lambda {
																																	"param": symbol {
																																		"symbol-value": "node"
																																	}, 
																																	"value": construction {
																																		"caller": symbol {
																																			"symbol-value": "TreePassingStage"
																																		}, 
																																		"arguments": [construction {
																																			"caller": symbol {
																																				"symbol-value": "Modifier"
																																			}, 
																																			"arguments": []
																																		}]
																																	}
																																}
																															}, invocation-value {
																																"before-child": "\n										", 
																																"caller": data-access {
																																	"property": "pass", 
																																	"object": symbol {
																																		"symbol-value": "local"
																																	}
																																}, 
																																"arguments": [symbol {
																																	"symbol-value": "local"
																																}, construction {
																																	"caller": symbol {
																																		"symbol-value": "State"
																																	}, 
																																	"arguments": []
																																}, symbol {
																																	"symbol-value": "node"
																																}]
																															}]
																														}
																													}
																												}, invocation-value {
																													"before-child": "\n									", 
																													"caller": data-access {
																														"property": "right", 
																														"object": symbol {
																															"symbol-value": "local"
																														}
																													}, 
																													"arguments": [symbol {
																														"symbol-value": "local"
																													}]
																												}]
																											}
																										}]
																									}]
																								}
																							}
																						}, invocation-value {
																							"before-child": "\n							", 
																							"caller": data-access {
																								"property": "mapValue", 
																								"object": symbol {
																									"symbol-value": "local"
																								}
																							}, 
																							"arguments": [symbol {
																								"symbol-value": "local"
																							}, block {
																								"value": group {
																									"after-children": "\n							", 
																									"children": [initialization {
																										"before-child": "\n								", 
																										"definition": definition {
																											"name": "local", 
																											"type": symbol {
																												"symbol-value": "auto"
																											}
																										}, 
																										"value": block {
																											"value": group {
																												"after-children": "\n								", 
																												"children": [initialization {
																													"before-child": "\n									", 
																													"definition": definition {
																														"name": "local", 
																														"type": symbol {
																															"symbol-value": "auto"
																														}
																													}, 
																													"value": lambda {
																														"param": symbol {
																															"symbol-value": "node"
																														}, 
																														"value": construction {
																															"caller": symbol {
																																"symbol-value": "TreePassingStage"
																															}, 
																															"arguments": [construction {
																																"caller": symbol {
																																	"symbol-value": "Formatter"
																																}, 
																																"arguments": []
																															}]
																														}
																													}
																												}, invocation-value {
																													"before-child": "\n									", 
																													"caller": data-access {
																														"property": "pass", 
																														"object": symbol {
																															"symbol-value": "local"
																														}
																													}, 
																													"arguments": [symbol {
																														"symbol-value": "local"
																													}, construction {
																														"caller": symbol {
																															"symbol-value": "State"
																														}, 
																														"arguments": []
																													}, symbol {
																														"symbol-value": "node"
																													}]
																												}]
																											}
																										}
																									}, invocation-value {
																										"before-child": "\n								", 
																										"caller": data-access {
																											"property": "right", 
																											"object": symbol {
																												"symbol-value": "local"
																											}
																										}, 
																										"arguments": [symbol {
																											"symbol-value": "local"
																										}]
																									}]
																								}
																							}]
																						}]
																					}
																				}
																			}, invocation-value {
																				"before-child": "\n						", 
																				"caller": data-access {
																					"property": "flatMapValue", 
																					"object": symbol {
																						"symbol-value": "local"
																					}
																				}, 
																				"arguments": [symbol {
																					"symbol-value": "local"
																				}, invocation-value {
																					"caller": lambda {
																						"param": symbol {
																							"symbol-value": "parsed"
																						}, 
																						"value": symbol {
																							"symbol-value": "writeAST"
																						}
																					}, 
																					"arguments": [invocation-value {
																						"caller": data-access {
																							"property": "resolveSibling", 
																							"object": symbol {
																								"symbol-value": "source"
																							}
																						}, 
																						"arguments": [string {
																							"string-value": "Main.output.ast"
																						}]
																					}, symbol {
																						"symbol-value": "parsed"
																					}]
																				}]
																			}]
																		}
																	}
																}, invocation-value {
																	"before-child": "\n					", 
																	"caller": data-access {
																		"property": "flatMapValue", 
																		"object": symbol {
																			"symbol-value": "local"
																		}
																	}, 
																	"arguments": [symbol {
																		"symbol-value": "local"
																	}, block {
																		"value": group {
																			"after-children": "\n					", 
																			"children": [initialization {
																				"before-child": "\n						", 
																				"definition": definition {
																					"name": "local", 
																					"type": symbol {
																						"symbol-value": "auto"
																					}
																				}, 
																				"value": block {
																					"value": group {
																						"after-children": "\n						", 
																						"children": [initialization {
																							"before-child": "\n							", 
																							"definition": definition {
																								"name": "local", 
																								"type": symbol {
																									"symbol-value": "auto"
																								}
																							}, 
																							"value": block {
																								"value": group {
																									"after-children": "\n							", 
																									"children": [initialization {
																										"before-child": "\n								", 
																										"definition": definition {
																											"name": "local", 
																											"type": symbol {
																												"symbol-value": "auto"
																											}
																										}, 
																										"value": lambda {
																											"param": symbol {
																												"symbol-value": "parsed"
																											}, 
																											"value": symbol {
																												"symbol-value": "CLang"
																											}
																										}
																									}, invocation-value {
																										"before-child": "\n								", 
																										"caller": data-access {
																											"property": "createCRootRule", 
																											"object": symbol {
																												"symbol-value": "local"
																											}
																										}, 
																										"arguments": [symbol {
																											"symbol-value": "local"
																										}]
																									}]
																								}
																							}
																						}, invocation-value {
																							"before-child": "\n							", 
																							"caller": data-access {
																								"property": "generate", 
																								"object": symbol {
																									"symbol-value": "local"
																								}
																							}, 
																							"arguments": [symbol {
																								"symbol-value": "local"
																							}, symbol {
																								"symbol-value": "parsed"
																							}]
																						}]
																					}
																				}
																			}, invocation-value {
																				"before-child": "\n						", 
																				"caller": data-access {
																					"property": "mapErr", 
																					"object": symbol {
																						"symbol-value": "local"
																					}
																				}, 
																				"arguments": [symbol {
																					"symbol-value": "local"
																				}, function-access {
																					"property": "new", 
																					"object": symbol {
																						"symbol-value": "ApplicationError"
																					}
																				}]
																			}]
																		}
																	}]
																}]
															}
														}
													}, invocation-value {
														"before-child": "\n				", 
														"caller": data-access {
															"property": "mapValue", 
															"object": symbol {
																"symbol-value": "local"
															}
														}, 
														"arguments": [symbol {
															"symbol-value": "local"
														}, invocation-value {
															"caller": lambda {
																"param": symbol {
																	"symbol-value": "generated"
																}, 
																"value": symbol {
																	"symbol-value": "writeGenerated"
																}
															}, 
															"arguments": [symbol {
																"symbol-value": "generated"
															}, invocation-value {
																"caller": data-access {
																	"property": "resolveSibling", 
																	"object": symbol {
																		"symbol-value": "source"
																	}
																}, 
																"arguments": [string {
																	"string-value": "Main.c"
																}]
															}]
														}]
													}]
												}
											}
										}, invocation-value {
											"before-child": "\n			", 
											"caller": data-access {
												"property": "match", 
												"object": symbol {
													"symbol-value": "local"
												}
											}, 
											"arguments": [symbol {
												"symbol-value": "local"
											}, lambda {
												"param": symbol {
													"symbol-value": "value"
												}, 
												"value": symbol {
													"symbol-value": "value"
												}
											}, function-access {
												"property": "of", 
												"object": symbol {
													"symbol-value": "Optional"
												}
											}]
										}]
									}
								}
							}]
						}
					}, 
					"params": [definition {
						"name": "source", 
						"type": symbol {
							"symbol-value": "Path"
						}
					}, definition {
						"name": "input", 
						"type": symbol {
							"symbol-value": "String"
						}
					}]
				}, function {
					"name": "writeAST", 
					"before-child": "\n	", 
					"modifiers": ["private", "static"], 
					"type": generic {
						"parent": "Result", 
						"children": [symbol {
							"symbol-value": "Node"
						}, symbol {
							"symbol-value": "ApplicationError"
						}]
					}, 
					"value": block {
						"value": group {
							"after-children": "\n	", 
							"children": [return {
								"before-child": "\n		", 
								"value": block {
									"value": group {
										"after-children": "\n		", 
										"children": [initialization {
											"before-child": "\n			", 
											"definition": definition {
												"name": "local", 
												"type": symbol {
													"symbol-value": "auto"
												}
											}, 
											"value": block {
												"value": group {
													"after-children": "\n			", 
													"children": [initialization {
														"before-child": "\n				", 
														"definition": definition {
															"name": "local", 
															"type": symbol {
																"symbol-value": "auto"
															}
														}, 
														"value": block {
															"value": group {
																"after-children": "\n				", 
																"children": [initialization {
																	"before-child": "\n					", 
																	"definition": definition {
																		"name": "local", 
																		"type": symbol {
																			"symbol-value": "auto"
																		}
																	}, 
																	"value": block {
																		"value": group {
																			"after-children": "\n					", 
																			"children": [initialization {
																				"before-child": "\n						", 
																				"definition": definition {
																					"name": "local", 
																					"type": symbol {
																						"symbol-value": "auto"
																					}
																				}, 
																				"value": invocation-value {
																					"caller": data-access {
																						"property": "writeString", 
																						"object": symbol {
																							"symbol-value": "JavaFiles"
																						}
																					}, 
																					"arguments": [symbol {
																						"symbol-value": "path"
																					}, invocation-value {
																						"caller": data-access {
																							"property": "toString", 
																							"object": symbol {
																								"symbol-value": "node"
																							}
																						}, 
																						"arguments": []
																					}]
																				}
																			}, invocation-value {
																				"before-child": "\n						", 
																				"caller": data-access {
																					"property": "map", 
																					"object": symbol {
																						"symbol-value": "local"
																					}
																				}, 
																				"arguments": [symbol {
																					"symbol-value": "local"
																				}, function-access {
																					"property": "new", 
																					"object": symbol {
																						"symbol-value": "JavaError"
																					}
																				}]
																			}]
																		}
																	}
																}, invocation-value {
																	"before-child": "\n					", 
																	"caller": data-access {
																		"property": "map", 
																		"object": symbol {
																			"symbol-value": "local"
																		}
																	}, 
																	"arguments": [symbol {
																		"symbol-value": "local"
																	}, function-access {
																		"property": "new", 
																		"object": symbol {
																			"symbol-value": "ApplicationError"
																		}
																	}]
																}]
															}
														}
													}, invocation-value {
														"before-child": "\n				", 
														"caller": data-access {
															"property": "map", 
															"object": symbol {
																"symbol-value": "local"
															}
														}, 
														"arguments": [symbol {
															"symbol-value": "local"
														}, function-access {
															"property": "new", 
															"object": symbol {
																"symbol-value": "Err"
															}
														}]
													}]
												}
											}
										}, invocation-value {
											"before-child": "\n			", 
											"caller": data-access {
												"property": "orElseGet", 
												"object": symbol {
													"symbol-value": "local"
												}
											}, 
											"arguments": [symbol {
												"symbol-value": "local"
											}, lambda {
												"value": construction {
													"caller": symbol {
														"symbol-value": "Ok"
													}, 
													"arguments": [symbol {
														"symbol-value": "node"
													}]
												}
											}]
										}]
									}
								}
							}]
						}
					}, 
					"params": [definition {
						"name": "path", 
						"type": symbol {
							"symbol-value": "Path"
						}
					}, definition {
						"name": "node", 
						"type": symbol {
							"symbol-value": "Node"
						}
					}]
				}, function {
					"name": "writeGenerated", 
					"before-child": "\n	", 
					"modifiers": ["private", "static"], 
					"type": generic {
						"parent": "Optional", 
						"children": [symbol {
							"symbol-value": "ApplicationError"
						}]
					}, 
					"value": block {
						"value": group {
							"after-children": "\n	", 
							"children": [return {
								"before-child": "\n		", 
								"value": block {
									"value": group {
										"after-children": "\n		", 
										"children": [initialization {
											"before-child": "\n			", 
											"definition": definition {
												"name": "local", 
												"type": symbol {
													"symbol-value": "auto"
												}
											}, 
											"value": block {
												"value": group {
													"after-children": "\n			", 
													"children": [initialization {
														"before-child": "\n				", 
														"definition": definition {
															"name": "local", 
															"type": symbol {
																"symbol-value": "auto"
															}
														}, 
														"value": invocation-value {
															"caller": data-access {
																"property": "writeString", 
																"object": symbol {
																	"symbol-value": "JavaFiles"
																}
															}, 
															"arguments": [symbol {
																"symbol-value": "target"
															}, symbol {
																"symbol-value": "generated"
															}]
														}
													}, invocation-value {
														"before-child": "\n				", 
														"caller": data-access {
															"property": "map", 
															"object": symbol {
																"symbol-value": "local"
															}
														}, 
														"arguments": [symbol {
															"symbol-value": "local"
														}, function-access {
															"property": "new", 
															"object": symbol {
																"symbol-value": "JavaError"
															}
														}]
													}]
												}
											}
										}, invocation-value {
											"before-child": "\n			", 
											"caller": data-access {
												"property": "map", 
												"object": symbol {
													"symbol-value": "local"
												}
											}, 
											"arguments": [symbol {
												"symbol-value": "local"
											}, function-access {
												"property": "new", 
												"object": symbol {
													"symbol-value": "ApplicationError"
												}
											}]
										}]
									}
								}
							}]
						}
					}, 
					"params": [definition {
						"name": "generated", 
						"type": symbol {
							"symbol-value": "String"
						}
					}, definition {
						"name": "target", 
						"type": symbol {
							"symbol-value": "Path"
						}
					}]
				}]
			}
		}
	}, whitespace {
		"before-child": "\n"
	}]
}