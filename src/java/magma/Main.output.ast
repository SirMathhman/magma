group {
	"after-children": "\n", 
	"children": [include {
		"namespace": ["magma", "api", "JavaFiles"]
	}, include {
		"before-child": "\n", 
		"namespace": ["magma", "api", "result", "Err"]
	}, include {
		"before-child": "\n", 
		"namespace": ["magma", "api", "result", "Ok"]
	}, include {
		"before-child": "\n", 
		"namespace": ["magma", "api", "result", "Result"]
	}, include {
		"before-child": "\n", 
		"namespace": ["magma", "compile", "Node"]
	}, include {
		"before-child": "\n", 
		"namespace": ["magma", "compile", "State"]
	}, include {
		"before-child": "\n", 
		"namespace": ["magma", "compile", "error", "ApplicationError"]
	}, include {
		"before-child": "\n", 
		"namespace": ["magma", "compile", "error", "JavaError"]
	}, include {
		"before-child": "\n", 
		"namespace": ["magma", "compile", "lang", "CLang"]
	}, include {
		"before-child": "\n", 
		"namespace": ["magma", "compile", "lang", "JavaLang"]
	}, include {
		"before-child": "\n", 
		"namespace": ["magma", "compile", "pass", "Flattener"]
	}, include {
		"before-child": "\n", 
		"namespace": ["magma", "compile", "pass", "Flattener0"]
	}, include {
		"before-child": "\n", 
		"namespace": ["magma", "compile", "pass", "Generator"]
	}, include {
		"before-child": "\n", 
		"namespace": ["magma", "compile", "pass", "Modifier"]
	}, include {
		"before-child": "\n", 
		"namespace": ["magma", "compile", "pass", "TreePassingStage"]
	}, include {
		"before-child": "\n", 
		"namespace": ["java", "nio", "file", "Path"]
	}, include {
		"before-child": "\n", 
		"namespace": ["java", "nio", "file", "Paths"]
	}, include {
		"before-child": "\n", 
		"namespace": ["java", "util", "Optional"]
	}, struct {
		"name": "Main", 
		"before-child": "\n", 
		"modifiers": ["public"], 
		"value": block {
			"value": group {
				"after-children": "\n", 
				"children": [function {
					"name": "main", 
					"before-child": "\n	", 
					"modifiers": ["public", "static"], 
					"type": symbol {
						"symbol-value": "void"
					}, 
					"value": block {
						"value": group {
							"after-children": "\n	", 
							"children": [initialization {
								"before-child": "\n		", 
								"definition": definition {
									"name": "source", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "Path"
									}
								}, 
								"value": invocation-value {
									"caller": data-access {
										"property": "get", 
										"object": symbol {
											"symbol-value": "Paths"
										}
									}, 
									"arguments": [string {
										"string-value": "."
									}, string {
										"string-value": "src"
									}, string {
										"string-value": "java"
									}, string {
										"string-value": "magma"
									}, string {
										"string-value": "Main.java"
									}]
								}
							}, invocation-statement {
								"before-child": "\n		", 
								"caller": data-access {
									"property": "ifPresent", 
									"object": invocation-value {
										"caller": data-access {
											"property": "match", 
											"object": invocation-value {
												"caller": data-access {
													"property": "mapErr", 
													"object": invocation-value {
														"caller": data-access {
															"property": "mapErr", 
															"object": invocation-value {
																"caller": data-access {
																	"property": "readString", 
																	"object": symbol {
																		"symbol-value": "JavaFiles"
																	}
																}, 
																"arguments": [symbol {
																	"symbol-value": "source"
																}]
															}
														}, 
														"arguments": [function {
															"name": "__function15__", 
															"type": symbol {
																"symbol-value": "auto"
															}, 
															"value": block {
																"value": group {
																	"children": [return {
																		"value": invocation-value {
																			"caller": data-access {
																				"property": "new", 
																				"object": symbol {
																					"symbol-value": "JavaError"
																				}
																			}, 
																			"arguments": [symbol {
																				"symbol-value": "__lambda2__"
																			}]
																		}
																	}]
																}
															}, 
															"params": [definition {
																"name": "__lambda2__", 
																"type": symbol {
																	"symbol-value": "auto"
																}
															}]
														}]
													}
												}, 
												"arguments": [function {
													"name": "__function14__", 
													"type": symbol {
														"symbol-value": "auto"
													}, 
													"value": block {
														"value": group {
															"children": [return {
																"value": invocation-value {
																	"caller": data-access {
																		"property": "new", 
																		"object": symbol {
																			"symbol-value": "ApplicationError"
																		}
																	}, 
																	"arguments": [symbol {
																		"symbol-value": "__lambda1__"
																	}]
																}
															}]
														}
													}, 
													"params": [definition {
														"name": "__lambda1__", 
														"type": symbol {
															"symbol-value": "auto"
														}
													}]
												}]
											}
										}, 
										"arguments": [function {
											"name": "__function12__", 
											"type": symbol {
												"symbol-value": "auto"
											}, 
											"value": block {
												"value": group {
													"children": [return {
														"value": invocation-value {
															"caller": symbol {
																"symbol-value": "runWithInput"
															}, 
															"arguments": [symbol {
																"symbol-value": "source"
															}, symbol {
																"symbol-value": "input"
															}]
														}
													}]
												}
											}, 
											"params": [definition {
												"name": "input", 
												"type": symbol {
													"symbol-value": "auto"
												}
											}]
										}, function {
											"name": "__function13__", 
											"type": symbol {
												"symbol-value": "auto"
											}, 
											"value": block {
												"value": group {
													"children": [return {
														"value": invocation-value {
															"caller": data-access {
																"property": "of", 
																"object": symbol {
																	"symbol-value": "Optional"
																}
															}, 
															"arguments": [symbol {
																"symbol-value": "__lambda0__"
															}]
														}
													}]
												}
											}, 
											"params": [definition {
												"name": "__lambda0__", 
												"type": symbol {
													"symbol-value": "auto"
												}
											}]
										}]
									}
								}, 
								"arguments": [function {
									"name": "__function11__", 
									"type": symbol {
										"symbol-value": "auto"
									}, 
									"value": block {
										"value": group {
											"children": [return {
												"value": invocation-value {
													"caller": data-access {
														"property": "println", 
														"object": data-access {
															"property": "err", 
															"object": symbol {
																"symbol-value": "System"
															}
														}
													}, 
													"arguments": [invocation-value {
														"caller": data-access {
															"property": "display", 
															"object": symbol {
																"symbol-value": "error"
															}
														}, 
														"arguments": []
													}]
												}
											}]
										}
									}, 
									"params": [definition {
										"name": "error", 
										"type": symbol {
											"symbol-value": "auto"
										}
									}]
								}]
							}]
						}
					}, 
					"params": [definition {
						"name": "args", 
						"type": array {
							"child": symbol {
								"symbol-value": "String"
							}
						}
					}]
				}, function {
					"name": "runWithInput", 
					"before-child": "\n	", 
					"modifiers": ["private", "static"], 
					"type": generic {
						"parent": "Optional", 
						"children": [symbol {
							"symbol-value": "ApplicationError"
						}]
					}, 
					"value": block {
						"value": group {
							"after-children": "\n	", 
							"children": [initialization {
								"before-child": "\n		", 
								"definition": definition {
									"name": "generator", 
									"modifiers": ["final"], 
									"type": symbol {
										"symbol-value": "var"
									}
								}, 
								"value": construction {
									"caller": symbol {
										"symbol-value": "Generator"
									}, 
									"arguments": []
								}
							}, return {
								"before-child": "\n		", 
								"value": invocation-value {
									"caller": data-access {
										"property": "match", 
										"object": invocation-value {
											"caller": data-access {
												"property": "mapValue", 
												"object": invocation-value {
													"caller": data-access {
														"property": "flatMapValue", 
														"object": invocation-value {
															"caller": data-access {
																"property": "flatMapValue", 
																"object": invocation-value {
																	"caller": data-access {
																		"property": "mapValue", 
																		"object": invocation-value {
																			"caller": data-access {
																				"property": "mapValue", 
																				"object": invocation-value {
																					"caller": data-access {
																						"property": "mapValue", 
																						"object": invocation-value {
																							"caller": data-access {
																								"property": "flatMapValue", 
																								"object": invocation-value {
																									"caller": data-access {
																										"property": "mapErr", 
																										"object": invocation-value {
																											"caller": data-access {
																												"property": "parse", 
																												"object": invocation-value {
																													"caller": data-access {
																														"property": "createJavaRootRule", 
																														"object": symbol {
																															"symbol-value": "JavaLang"
																														}
																													}, 
																													"arguments": []
																												}
																											}, 
																											"arguments": [symbol {
																												"symbol-value": "input"
																											}]
																										}
																									}, 
																									"arguments": [function {
																										"name": "__function26__", 
																										"type": symbol {
																											"symbol-value": "auto"
																										}, 
																										"value": block {
																											"value": group {
																												"children": [return {
																													"value": invocation-value {
																														"caller": data-access {
																															"property": "new", 
																															"object": symbol {
																																"symbol-value": "ApplicationError"
																															}
																														}, 
																														"arguments": [symbol {
																															"symbol-value": "__lambda5__"
																														}]
																													}
																												}]
																											}
																										}, 
																										"params": [definition {
																											"name": "__lambda5__", 
																											"type": symbol {
																												"symbol-value": "auto"
																											}
																										}]
																									}]
																								}
																							}, 
																							"arguments": [function {
																								"name": "__function25__", 
																								"type": symbol {
																									"symbol-value": "auto"
																								}, 
																								"value": block {
																									"value": group {
																										"children": [return {
																											"value": invocation-value {
																												"caller": symbol {
																													"symbol-value": "writeAST"
																												}, 
																												"arguments": [invocation-value {
																													"caller": data-access {
																														"property": "resolveSibling", 
																														"object": symbol {
																															"symbol-value": "source"
																														}
																													}, 
																													"arguments": [string {
																														"string-value": "Main.input.ast"
																													}]
																												}, symbol {
																													"symbol-value": "parsed"
																												}]
																											}
																										}]
																									}
																								}, 
																								"params": [definition {
																									"name": "parsed", 
																									"type": symbol {
																										"symbol-value": "auto"
																									}
																								}]
																							}]
																						}
																					}, 
																					"arguments": [function {
																						"name": "__function24__", 
																						"type": symbol {
																							"symbol-value": "auto"
																						}, 
																						"value": block {
																							"value": group {
																								"children": [return {
																									"value": invocation-value {
																										"caller": data-access {
																											"property": "right", 
																											"object": invocation-value {
																												"caller": data-access {
																													"property": "pass", 
																													"object": construction {
																														"caller": symbol {
																															"symbol-value": "TreePassingStage"
																														}, 
																														"arguments": [construction {
																															"caller": symbol {
																																"symbol-value": "Flattener"
																															}, 
																															"arguments": [symbol {
																																"symbol-value": "generator"
																															}]
																														}]
																													}
																												}, 
																												"arguments": [construction {
																													"caller": symbol {
																														"symbol-value": "State"
																													}, 
																													"arguments": []
																												}, symbol {
																													"symbol-value": "node"
																												}]
																											}
																										}, 
																										"arguments": []
																									}
																								}]
																							}
																						}, 
																						"params": [definition {
																							"name": "node", 
																							"type": symbol {
																								"symbol-value": "auto"
																							}
																						}]
																					}]
																				}
																			}, 
																			"arguments": [function {
																				"name": "__function23__", 
																				"type": symbol {
																					"symbol-value": "auto"
																				}, 
																				"value": block {
																					"value": group {
																						"children": [return {
																							"value": invocation-value {
																								"caller": data-access {
																									"property": "right", 
																									"object": invocation-value {
																										"caller": data-access {
																											"property": "pass", 
																											"object": construction {
																												"caller": symbol {
																													"symbol-value": "TreePassingStage"
																												}, 
																												"arguments": [construction {
																													"caller": symbol {
																														"symbol-value": "Modifier"
																													}, 
																													"arguments": [symbol {
																														"symbol-value": "generator"
																													}]
																												}]
																											}
																										}, 
																										"arguments": [construction {
																											"caller": symbol {
																												"symbol-value": "State"
																											}, 
																											"arguments": []
																										}, symbol {
																											"symbol-value": "node"
																										}]
																									}
																								}, 
																								"arguments": []
																							}
																						}]
																					}
																				}, 
																				"params": [definition {
																					"name": "node", 
																					"type": symbol {
																						"symbol-value": "auto"
																					}
																				}]
																			}]
																		}
																	}, 
																	"arguments": [function {
																		"name": "__function22__", 
																		"type": symbol {
																			"symbol-value": "auto"
																		}, 
																		"value": block {
																			"value": group {
																				"children": [return {
																					"value": invocation-value {
																						"caller": data-access {
																							"property": "right", 
																							"object": invocation-value {
																								"caller": data-access {
																									"property": "pass", 
																									"object": construction {
																										"caller": symbol {
																											"symbol-value": "TreePassingStage"
																										}, 
																										"arguments": [construction {
																											"caller": symbol {
																												"symbol-value": "Flattener0"
																											}, 
																											"arguments": [symbol {
																												"symbol-value": "generator"
																											}]
																										}]
																									}
																								}, 
																								"arguments": [construction {
																									"caller": symbol {
																										"symbol-value": "State"
																									}, 
																									"arguments": []
																								}, symbol {
																									"symbol-value": "node"
																								}]
																							}
																						}, 
																						"arguments": []
																					}
																				}]
																			}
																		}, 
																		"params": [definition {
																			"name": "node", 
																			"type": symbol {
																				"symbol-value": "auto"
																			}
																		}]
																	}]
																}
															}, 
															"arguments": [function {
																"name": "__function21__", 
																"type": symbol {
																	"symbol-value": "auto"
																}, 
																"value": block {
																	"value": group {
																		"children": [return {
																			"value": invocation-value {
																				"caller": symbol {
																					"symbol-value": "writeAST"
																				}, 
																				"arguments": [invocation-value {
																					"caller": data-access {
																						"property": "resolveSibling", 
																						"object": symbol {
																							"symbol-value": "source"
																						}
																					}, 
																					"arguments": [string {
																						"string-value": "Main.output.ast"
																					}]
																				}, symbol {
																					"symbol-value": "parsed"
																				}]
																			}
																		}]
																	}
																}, 
																"params": [definition {
																	"name": "parsed", 
																	"type": symbol {
																		"symbol-value": "auto"
																	}
																}]
															}]
														}
													}, 
													"arguments": [function {
														"name": "__function19__", 
														"type": symbol {
															"symbol-value": "auto"
														}, 
														"value": block {
															"value": group {
																"children": [return {
																	"value": invocation-value {
																		"caller": data-access {
																			"property": "mapErr", 
																			"object": invocation-value {
																				"caller": data-access {
																					"property": "generate", 
																					"object": invocation-value {
																						"caller": data-access {
																							"property": "createCRootRule", 
																							"object": symbol {
																								"symbol-value": "CLang"
																							}
																						}, 
																						"arguments": []
																					}
																				}, 
																				"arguments": [symbol {
																					"symbol-value": "parsed"
																				}]
																			}
																		}, 
																		"arguments": [function {
																			"name": "__function20__", 
																			"type": symbol {
																				"symbol-value": "auto"
																			}, 
																			"value": block {
																				"value": group {
																					"children": [return {
																						"value": invocation-value {
																							"caller": data-access {
																								"property": "new", 
																								"object": symbol {
																									"symbol-value": "ApplicationError"
																								}
																							}, 
																							"arguments": [symbol {
																								"symbol-value": "__lambda4__"
																							}]
																						}
																					}]
																				}
																			}, 
																			"params": [definition {
																				"name": "__lambda4__", 
																				"type": symbol {
																					"symbol-value": "auto"
																				}
																			}]
																		}]
																	}
																}]
															}
														}, 
														"params": [definition {
															"name": "parsed", 
															"type": symbol {
																"symbol-value": "auto"
															}
														}]
													}]
												}
											}, 
											"arguments": [function {
												"name": "__function18__", 
												"type": symbol {
													"symbol-value": "auto"
												}, 
												"value": block {
													"value": group {
														"children": [return {
															"value": invocation-value {
																"caller": symbol {
																	"symbol-value": "writeGenerated"
																}, 
																"arguments": [symbol {
																	"symbol-value": "generated"
																}, invocation-value {
																	"caller": data-access {
																		"property": "resolveSibling", 
																		"object": symbol {
																			"symbol-value": "source"
																		}
																	}, 
																	"arguments": [string {
																		"string-value": "Main.c"
																	}]
																}]
															}
														}]
													}
												}, 
												"params": [definition {
													"name": "generated", 
													"type": symbol {
														"symbol-value": "auto"
													}
												}]
											}]
										}
									}, 
									"arguments": [function {
										"name": "__function16__", 
										"type": symbol {
											"symbol-value": "auto"
										}, 
										"value": block {
											"value": group {
												"children": [return {
													"value": symbol {
														"symbol-value": "value"
													}
												}]
											}
										}, 
										"params": [definition {
											"name": "value", 
											"type": symbol {
												"symbol-value": "auto"
											}
										}]
									}, function {
										"name": "__function17__", 
										"type": symbol {
											"symbol-value": "auto"
										}, 
										"value": block {
											"value": group {
												"children": [return {
													"value": invocation-value {
														"caller": data-access {
															"property": "of", 
															"object": symbol {
																"symbol-value": "Optional"
															}
														}, 
														"arguments": [symbol {
															"symbol-value": "__lambda3__"
														}]
													}
												}]
											}
										}, 
										"params": [definition {
											"name": "__lambda3__", 
											"type": symbol {
												"symbol-value": "auto"
											}
										}]
									}]
								}
							}]
						}
					}, 
					"params": [definition {
						"name": "source", 
						"type": symbol {
							"symbol-value": "Path"
						}
					}, definition {
						"name": "input", 
						"type": symbol {
							"symbol-value": "String"
						}
					}]
				}, function {
					"name": "writeAST", 
					"before-child": "\n	", 
					"modifiers": ["private", "static"], 
					"type": generic {
						"parent": "Result", 
						"children": [symbol {
							"symbol-value": "Node"
						}, symbol {
							"symbol-value": "ApplicationError"
						}]
					}, 
					"value": block {
						"value": group {
							"after-children": "\n	", 
							"children": [return {
								"before-child": "\n		", 
								"value": invocation-value {
									"caller": data-access {
										"property": "orElseGet", 
										"object": invocation-value {
											"caller": data-access {
												"property": "map", 
												"object": invocation-value {
													"caller": data-access {
														"property": "map", 
														"object": invocation-value {
															"caller": data-access {
																"property": "map", 
																"object": invocation-value {
																	"caller": data-access {
																		"property": "writeString", 
																		"object": symbol {
																			"symbol-value": "JavaFiles"
																		}
																	}, 
																	"arguments": [symbol {
																		"symbol-value": "path"
																	}, invocation-value {
																		"caller": data-access {
																			"property": "toString", 
																			"object": symbol {
																				"symbol-value": "node"
																			}
																		}, 
																		"arguments": []
																	}]
																}
															}, 
															"arguments": [function {
																"name": "__function30__", 
																"type": symbol {
																	"symbol-value": "auto"
																}, 
																"value": block {
																	"value": group {
																		"children": [return {
																			"value": invocation-value {
																				"caller": data-access {
																					"property": "new", 
																					"object": symbol {
																						"symbol-value": "JavaError"
																					}
																				}, 
																				"arguments": [symbol {
																					"symbol-value": "__lambda8__"
																				}]
																			}
																		}]
																	}
																}, 
																"params": [definition {
																	"name": "__lambda8__", 
																	"type": symbol {
																		"symbol-value": "auto"
																	}
																}]
															}]
														}
													}, 
													"arguments": [function {
														"name": "__function29__", 
														"type": symbol {
															"symbol-value": "auto"
														}, 
														"value": block {
															"value": group {
																"children": [return {
																	"value": invocation-value {
																		"caller": data-access {
																			"property": "new", 
																			"object": symbol {
																				"symbol-value": "ApplicationError"
																			}
																		}, 
																		"arguments": [symbol {
																			"symbol-value": "__lambda7__"
																		}]
																	}
																}]
															}
														}, 
														"params": [definition {
															"name": "__lambda7__", 
															"type": symbol {
																"symbol-value": "auto"
															}
														}]
													}]
												}, 
												"type-arguments": [generic {
													"parent": "Result", 
													"children": [symbol {
														"symbol-value": "Node"
													}, symbol {
														"symbol-value": "ApplicationError"
													}]
												}]
											}, 
											"arguments": [function {
												"name": "__function28__", 
												"type": symbol {
													"symbol-value": "auto"
												}, 
												"value": block {
													"value": group {
														"children": [return {
															"value": invocation-value {
																"caller": data-access {
																	"property": "new", 
																	"object": symbol {
																		"symbol-value": "Err"
																	}
																}, 
																"arguments": [symbol {
																	"symbol-value": "__lambda6__"
																}]
															}
														}]
													}
												}, 
												"params": [definition {
													"name": "__lambda6__", 
													"type": symbol {
														"symbol-value": "auto"
													}
												}]
											}]
										}
									}, 
									"arguments": [function {
										"name": "__function27__", 
										"type": symbol {
											"symbol-value": "auto"
										}, 
										"value": block {
											"value": group {
												"children": [return {
													"value": construction {
														"caller": symbol {
															"symbol-value": "Ok"
														}, 
														"arguments": [symbol {
															"symbol-value": "node"
														}]
													}
												}]
											}
										}, 
										"params": []
									}]
								}
							}]
						}
					}, 
					"params": [definition {
						"name": "path", 
						"type": symbol {
							"symbol-value": "Path"
						}
					}, definition {
						"name": "node", 
						"type": symbol {
							"symbol-value": "Node"
						}
					}]
				}, function {
					"name": "writeGenerated", 
					"before-child": "\n	", 
					"modifiers": ["private", "static"], 
					"type": generic {
						"parent": "Optional", 
						"children": [symbol {
							"symbol-value": "ApplicationError"
						}]
					}, 
					"value": block {
						"value": group {
							"after-children": "\n	", 
							"children": [return {
								"before-child": "\n		", 
								"value": invocation-value {
									"caller": data-access {
										"property": "map", 
										"object": invocation-value {
											"caller": data-access {
												"property": "map", 
												"object": invocation-value {
													"caller": data-access {
														"property": "writeString", 
														"object": symbol {
															"symbol-value": "JavaFiles"
														}
													}, 
													"arguments": [symbol {
														"symbol-value": "target"
													}, symbol {
														"symbol-value": "generated"
													}]
												}
											}, 
											"arguments": [function {
												"name": "__function32__", 
												"type": symbol {
													"symbol-value": "auto"
												}, 
												"value": block {
													"value": group {
														"children": [return {
															"value": invocation-value {
																"caller": data-access {
																	"property": "new", 
																	"object": symbol {
																		"symbol-value": "JavaError"
																	}
																}, 
																"arguments": [symbol {
																	"symbol-value": "__lambda10__"
																}]
															}
														}]
													}
												}, 
												"params": [definition {
													"name": "__lambda10__", 
													"type": symbol {
														"symbol-value": "auto"
													}
												}]
											}]
										}
									}, 
									"arguments": [function {
										"name": "__function31__", 
										"type": symbol {
											"symbol-value": "auto"
										}, 
										"value": block {
											"value": group {
												"children": [return {
													"value": invocation-value {
														"caller": data-access {
															"property": "new", 
															"object": symbol {
																"symbol-value": "ApplicationError"
															}
														}, 
														"arguments": [symbol {
															"symbol-value": "__lambda9__"
														}]
													}
												}]
											}
										}, 
										"params": [definition {
											"name": "__lambda9__", 
											"type": symbol {
												"symbol-value": "auto"
											}
										}]
									}]
								}
							}]
						}
					}, 
					"params": [definition {
						"name": "generated", 
						"type": symbol {
							"symbol-value": "String"
						}
					}, definition {
						"name": "target", 
						"type": symbol {
							"symbol-value": "Path"
						}
					}]
				}]
			}
		}
	}, whitespace {
		"before-child": "\n"
	}]
}